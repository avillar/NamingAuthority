
06-055r1 Geopositioning Metadata AS Folder/06-055r1 Geopositioning Metadata.doc
OGC 06-055r1

OGC 06-055r1



Open Geospatial Consortium Inc.

Date: 2006-07-03

Reference number of this document: OGC 06-055r1

Version: 0.0.0

Category: OpenGIS® Discussion Paper

Editor: Arliss Whiteside

OpenGIS® GML 3.2 image geopositioning metadata application schema

Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
To obtain additional rights of use, visit http://www.opengeospatial.org/legal/.


Warning


This document is not an OGC Standard. It is distributed for review and comment. It is subject to change without notice and may not be referred to as an OGC Standard.


Document type:
OpenGIS® Discussion Paper

Document subtype:
Draft GML Application Schema

Document stage:
Draft proposed version 0.0

Document language:
English

Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.


Contents
Page

vi.
Preface


iii.
Submitting organizations
v

iv.
Document contributor contact points
v

v.
Revision history
v

vi.
Changes to the OGC Abstract Specification
vi

vii.
Future work
vi

Foreword
vii

Introduction
viii

1
Scope
1

2
Compliance
1

3
Normative references
1

4
Terms and definitions
2

5
Conventions
4

5.1
Abbreviated terms
4

5.2
UML notation
5

6
Image geopositioning metadata overview
5

6.1
Image geopositioning metadata
5

6.2
UML model
5

6.3
GML application schema
8

7
Sensor model
9

7.1
Introduction
9

7.2
UML model
10

7.3
XML encoding
11

8
Image geometry
11

8.1
Introduction
11

8.2
UML model
12

8.3
XML encoding
23

9
Sensor calibration
24

9.1
Introduction
24

9.2
UML model
24

9.3
XML encoding
27

10
Object point
28

10.1
Introduction
28

10.2
UML model
28

10.3
XML encoding
34

11
Covariance matrix
34

11.1
Introduction
34

11.2
UML model
35

11.3
XML encoding
41

Annex A (normative)  Abstract test suite
43

Annex B (normative)  XML Schema Documents
44

Bibliography
45




Figures
Page

7Figure 1 — Image geopositioning metadata UML packages with dependencies



8Figure 2 — Image geopositioning metadata and ISO/TC 211 packages



10Figure 3 — GSM_SensorModel package UML class diagram



13Figure 4 — GIG_ImageGeometry package UML class diagram, part 1



14Figure 5 — GIG_ImageGeometry package UML class diagram, part 2



25Figure 6 — GSC_SensorCalibration package UML class diagram



29Figure 7 — GOP_ObjectPoint package UML class diagram, part 1



30Figure 8 — GOP_ObjectPoint package UML class diagram, part 2



36Figure 9 — GCM_CovarianceMatrix package UML class diagram




Tables
Page

6Table 1 — Image geopositioning metadata UML model packages


Table 2 — ISO/TC 211 UML model packages used
8

Table 3 — GML 3.2 elements encoding ISO classes
9

Table 4 — Defining elements of GSM_ObjectImageTransformation class
11

Table 5 — Defining elements of GIG_ImageOrientation class
16

Table 6 — Defining elements of GIG_AdjustedGroup class
17

Table 7 — Defining elements of GIG_ImageParameterValues class
18

Table 8 — Defining elements of GIG_MovingSensorParameters class
19

Table 9 — Defining elements of GIG_StationarySensorParameters class
19

Table 10 — Defining elements of GIG_ImageAccuracy class
20

Table 11 — Defining elements of GIG_AdjustmentSummary class
21

Table 12 — Defining elements of GIG_AdjustableParameters class
22

Table 13 — Defining elements of GIG_EqualParameters class
22

Table 14 — Defining elements of GIG_ImageParametersStatus class
23

Table 15 — Defining elements of GIG_AdjustmentStatus class
23

Table 16 — Defining elements of GSC_ImageSensor class
26

Table 17 — Defining elements of GSC_SensorParameterValues class
27

Table 18 — Defining elements of GSC_SensorParameterStatus class
27

Table 19 — Defining elements of GOP_ObjectPoint class
31

Table 20 — Defining elements of GOP_ImagePosition class
31

Table 21 — Defining elements of GOP_ObjectPosition class
32

Table 22 — Defining elements of GOP_IdentificationImage class
32

Table 23 — Defining elements of GOP_ObjectPointType class
33

Table 24 — Defining elements of GOP_ImagePositionStatus class
33

Table 25 — Defining elements of GOP_ObjectPositionStatus class
34

Table 26 — Defining elements of GCM_CellValues class
38

Table 27 — Defining elements of GCM_PositionedCellValues class
38

Table 28 — Defining elements of GCM_CovarianceMatrix class
39

Table 29 — Defining elements of GCM_DiagonalCovarianceMatrix class
40

Table 30 — Defining elements of GCM_NormalCovarianceMatrix class
40

Table 31 — Defining elements of GCM_FullCovarianceMatrix class
41

Table 32 — Defining elements of GCM_SparseCovarianceMatrix class
41

Table 33 — Defining elements of GCM_BandedCovarianceMatrix class
41




i. Preface


This draft specifies a GML 3.2 Application Schema for image geopositioning metadata. This schema is also an Application Schema of ISO 19139. This geopositioning metadata schema is used by the separately specified Image Geopositioning Service (IGS) interface.

Suggested additions, changes, and comments on this draft are welcome and encouraged. Such suggestions may be submitted by email message or by making suggested changes in an edited copy of this document.


Document terms and definitions


This document uses the specification terms defined in Subclause 5.3 of [OGC 05-008], which is based on the ISO/IEC Directives, Part 2. Rules for the structure and drafting of International Standards. In particular, the word “shall” (not “must”) is the verb form used to indicate a requirement to be strictly followed to conform to this specification.

ii. Submitting organizations


The following organizations submitted this document to the Open Geospatial Consortium Inc.

BAE Systems E&IS

iii. Document contributor contact points


All questions regarding this document should be directed to the editor or the contributors:


		Name

		Organization



		Arliss Whiteside

		BAE Systems E&IS





iv. Revision history


		Date

		Release

		Editor

		Primary clauses modified

		Description



		2006-06-05

		0.0.0

		Arliss Whiteside

		All

		First draft



		2006-07-03

		0.0.0

		Arliss Whiteside

		vii, 7.2, 8.2, 9.2, 10.2, 11.2

		Editorial improvements





v. Changes to the OGC Abstract Specification


The OpenGIS® Abstract Specification Topic 11 “Metadata” (which includes ISO 19115) requires the following change to accommodate the technical contents of this document:

a) Change the “Maximum Occurrence” value from “1” to “N” of the valueUnit attribute of the DQ_QuantitativeResult class, in Figure A.4 of Subclause A.2.4.1 and in item 135 of Subclause B.2.4.4.4. (The corresponding change is also needed in ISO 19139.)

vi. Future work

Extensions of this Application Profile are desirable to:


b) Define specific image geometry (sensor) models. To allow useful implementation, at least one extension of this Application Profile is needed, that specifies at least one specific image geometry model. For each specific image geometry model added to this Application Schema, it is necessary to specify:

1) A concrete subclass of one of the abstract classes GIG_MovingSensorParameters or GIG_StationarySensorParameters, which specifies the (exterior) orientation parameter values for that sensor


2) A concrete subclass of the abstract class GSC_SensorParameterValues, which specifies the (interior) orientation parameter values for that sensor


3) GML Application Schema for encoding two items listed above


4) Specific parameters and sub-groups in a CC_OperationParametersGroup, which correspond to item 1)


5) Specific parameters and sub-groups in a CC_OperationParametersGroup, which correspond to item 2)


6) XML document(s) encoding two items listed above


7) Specific “formula” referenced by the CC_OperationMethod that is referenced by GSM_ObjectImageTransformation, which uses the parameters and groups specified in items 3) and 4)


NOTE 1
More generally, several extensions of this Application Profile that each specifies one or more specific image geometry model seem desirable. As stated and explained in Section 2.10 of OGC Abstract Specification Topic 16 [OGC 00-116]: “A number of different image geometry models are needed, for exploiting different image types under different conditions. Multiple different image geometry models should thus be standardized by the OGC (in the long term). However, some proprietary image geometry models are expected to exist, and not be standardized.”


NOTE 2
Where relevant, these specific image geometry models should build upon and adapt the Sensor Markup Language (SensorML), Transducer Markup Language (TML), and ISO 19130 (Sensor data model for imagery and gridded data).


c) Define image geometry (sensor) model components. For efficient extension of this Application Profile to more models, at least one extension of this Application Profile is needed, that specifies several components which are and/or can be used in multiple image geometry models.

EXAMPLES 
Possible components that could be used in multiple image geometry models would model lens distortion, atmospheric refraction, projection optics, correction functions, etc.


d) Stereoscopic pairs of images. An extension is desirable to more completely handle pairs of images that are expected to be exploited stereoscopically.

e) More covariance matrix types. Define additional subclasses of GCM_CovarianceMatrix for efficiently recording other covariance matrix types.

f) Triangulation results. An extension is desirable to more completely specify useful results from a triangulation

g) Image strip. Improvement is desirable to better handle strips of images.


h) Examples. An extension is desirable to include example XML documents.


i) Specify GML 3.2 and ISO 19139 profiles used. The profiles of GML 3.2 and ISO 19129 that are used by this Application Schema should be explicitly determined and documented, to simplify understanding those profiles.


Foreword


This document does not replace any previous OGC document, in whole or in part. This image geopositioning metadata application schema is used by the separately specified Image Geopositioning Service (IGS). That service is a specific Geodata Registration Service as described in Section 3.6 of OGC Abstract Specification Topic 15: Image Exploitation Services [OGC 00-115]. That service is designed to support the Register Images use case described in Section 2.1.2.5 of OGC Abstract Specification Topic 15: Image Exploitation Services [OGC 00-115].


This Application Schema uses small profiles (or subsets) of GML 3.2 (ISO 19136) and ISO 19139, although those profiles are not yet formally specified. For GML, the profile used is a subset of the GML grid CRSs and simple features profiles. For ISO 19139, the profile is a subset of the ISO 19139 profile that is used by GML 3.2 (ISO 19136).


This document includes three annexes; Annexes A and B are normative, and Annex C is informative.


Attention is drawn to the possibility that some of the elements of this document may be the subject of patent rights. The OGC shall not be held responsible for identifying any or all such patent rights.


Introduction


This document specifies a GML 3.2 Application Schema for image geopositioning metadata, which is also an Application Schema of ISO 19139. This geopositioning metadata schema is used by the separately specified Image Geopositioning Service (IGS) interface that adjusts the georeferencing coordinate transformations of images.

This XML schema encodes image georeferencing coordinate transformations with associated parameter error statistics. These georeferencing coordinate transformations can use many possible image geometry (or sensor) models that can be encoded using extensions of this Application Schema.


This application schema also encodes point positions measured in one of more images and optional object coordinates, with associated position error statistics. These object points can be tie points, control points, or check points. A control or check point has a measured position with position error statistics in one or more images, and a known position with error statistics in some geodetic Coordinate Reference System (CRS). A tie point has a measured position with error statistics in two or more images, but not a known position in any geodetic CRS.

Error statistics are represented as variance-covariance matrices, representing both absolute and relative accuracies. These covariance matrices are used to represent correlations between the accuracies of different coordinates, parameters, and positions.

OpenGIS® GML 3.2 image geopositioning metadata application schema

1 Scope


This document specifies a GML 3.2 Application Schema for image geopositioning metadata, which is also an Application Schema of ISO 19139. This geopositioning metadata is designed for use by a separately specified Image Geopositioning Service (IGS) that adjusts the georeferencing coordinate transformations of images.


This XML schema encodes image georeferencing coordinate transformations with associated parameter error statistics. These georeferencing coordinate transformations can use many possible image geometry (or sensor) models that can be encoded using extensions of this Application Schema.


This application schema also encodes object point positions measured in one of more images and optional object coordinates, with associated position error statistics. These object points can be tie points, control points, and check points.


Error statistics are represented as variance-covariance matrices, representing both absolute and relative accuracies. These covariance matrices are used to represent correlations between the accuracies of different coordinates, parameters, and positions.


2 Compliance

Compliance with this specification shall be checked using all the relevant tests specified in Annex A (normative).

3 Normative references


The following normative documents contain provisions that, through reference in this text, constitute provisions of this document. For dated references, subsequent amendments to, or revisions of, any of these publications do not apply. For undated references, the latest edition of the normative document referred to applies.


ISO 19105:2000, Geographic information — Conformance and Testing


ISO 19107:2003, Geographic information — Spatial schema



ISO 19109:2005, Geographic information — Rules for application schema

ISO 19115:2003, Geographic information — Metadata

ISO 19123:2005, Geographic information — Schema for coverage geometry and functions

OGC 01-111, OpenGIS® Metadata (contains ISO/TC 211 DIS 19115)

OGC 05-010, URNs of definitions in ogc namespace


OGC 05-094r1, GML 3.1.1 CRS support profile

OGC 05-095r1, GML 3.1.1 common CRSs profile

OGC 05-096r1, GML 3.1.1 grid CRSs profile

OGC 05-103, Geographic information — Spatial referencing by coordinates

OGC 05-105, Geographic information — Geography Markup Language (GML) (version 3.2, ISO/DIS 19136)

OGC 06-054, OpenGIS® Image Geopositioning Service Implementation Specification

OGC 05-008, Web Services Common Specification, version 1.0

This OWS Common Specification contains a list of normative references that are also applicable to this Implementation Specification.

In addition to this document, this specification includes several normative XML Schema Document files as specified in Annex B.

4 Terms and definitions


For the purposes of this specification, the definitions specified in Clause 4 of the OpenGIS® Abstract Specification Topic 2 [OGC 05-103] and in OWS Common Implementation Specification [OGC 05-008] shall apply. In addition, the following terms and definitions apply.


absolute accuracy


absolute external accuracy



statistic which gives the uncertainty of a point with respect to the datum required by a product specification (adapted from USIGS Glossary)


NOTE 
This definition implies that the effects of all error sources, both random and systematic, are considered.


accuracy



degree to which information on a map or in a digital database matches true or accepted values (adapted from USIGS Glossary)


NOTE 
Accuracy pertains to the quality of data and the number of errors contained in a dataset or map. In discussing a GIS database, it is possible to consider horizontal and vertical accuracy with respect to geographic position, as well as attribute, conceptual, and logical accuracy. The effect of inaccuracy and error on a GIS solution is the subject of sensitivity analysis. Accuracy, or error, is distinguished from precision , which concerns the level of measurement or detail of data in a database


check point


point with known object (or ground) position used to check the geopositioning of one or more images


NOTE 
The known position of a check point is not used in the geopositioning. The position of a check point is measured in one or more of the images geopositioned.


control point


point with known object (or ground) position used to geoposition one or more images


NOTE 
The position of a control point is measured in one or more of the images being geopositioned.


covariance matrix


detailed form of position accuracy data, sometimes called a variance-covariance matrix (adapted from USIGS Glossary)

NOTE 1
For three object (or ground) coordinates, a covariance matrix is a 3 by 3 matrix, with the matrix rows and columns each corresponding to the three coordinates. For two horizontal coordinates, a covariance matrix is a 2 by 2 matrix, with the matrix rows and columns each corresponding to the two horizontal coordinates. Similarly, for two image coordinates, a covariance matrix is a 2 by 2 matrix, with the matrix rows and columns each corresponding to the two image coordinates.

NOTE 2
The covariance matrix cells contain the expected average values of the product of the error in the matrix row coordinate times the simultaneous error in the matrix column coordinate. For absolute accuracy, the diagonal matrix cells contain the error variances of the corresponding coordinates, or the squares of the standard deviations. The off-diagonal cells contain the covariances between the errors in the corresponding coordinates; these covariances will be zero when the errors in different coordinates are not statistically correlated. All covariance matrices are symmetrical, meaning that the same cell values appear on both sides of the diagonal cells.

NOTE 3
Covariance matrices can be used to record absolute and/or relative accuracies. A covariance matrix for relative accuracy uses the three (or two) coordinates of one point for matrix rows and the three (or two) coordinates of the second point for matrix columns. A complete covariance matrix for N specific points would contain 3N rows by 3N columns.


georeferencing transformation


coordinate transformation that can be used to convert grid coordinate values to values of coordinates referenced to a coordinate reference system that is related to the earth by a datum (adapted from ISO 19123)


image geopositioning


adjustment of the parameter values of image georeferencing coordinate transformations to produce correct coordinates in a coordinate reference system that is related to the earth or other imaged object

object point


ground point

point with position on the imaged object(s), often the earth

photogrammetry



science of mensuration and geometric adjustment of an aerial photograph or satellite image (adapted from USIGS Glossary)

NOTE 1
Photogrammetry requires: a mathematical model of the image formation process, computation of the internal geometry of an image, and subsequent correction of imagery based upon the ground relationship for every part of the image. Correction of imagery based on computational algorithms and measurement of geometrical position in an image.


NOTE 2
Effective photogrammetry makes use of ground control by which aerial photographs are carefully compared and registered to the locations and characteristics of features identified in ground-level surveys.


relative accuracy

relative internal accuracy

evaluation of random errors in determining the positional accuracy of one point feature with respect to another feature (adapted from USIGS Glossary)

tie point


point with measured position in one or more images, used to geoposition those images


NOTE 
The estimated object (or ground) position of a tie point is not known before the geopositioning.


transformation



approximate transformation of position coordinates from one Spatial Reference System (SRS) to another


NOTE 
For example, this term is used when the transformation coefficients are determined by least squares adjustment. This term is strictly used only when the transformation is known only approximately. This term is loosely used when the transformation is known either approximately or exactly.


5 Conventions


5.1 Abbreviated terms


CRS
Coordinate Reference System

GML
Geography Markup Language


IGS
Image Geopositioning Service


ISO
International Organization for Standardization


OGC
Open Geospatial Consortium


OWS
OGC Web Service, or Open Web Service


TBD
To Be Determined


TBR
To Be Reviewed


UML
Unified Modeling Language


URI
Universal Resource Identifier


URL
Uniform Resource Locator


URN
Universal Resource Name


XML
Extensible Markup Language


1D
One Dimensional


2D
Two Dimensional


3D
Three Dimensional


5.2 UML notation


Most diagrams that appear in this specification are presented using the Unified Modeling Language (UML) static structure diagram, as described in Subclause 5.2 of [OGC 05-008].


6 Image geopositioning metadata overview


6.1 Image geopositioning metadata


This GML Application Schema XML schema encodes parameter values for image georeferencing coordinate transformations with associated parameter error statistics. These georeferencing coordinate transformations can use many possible image geometry (or sensor) models that can be encoded using extensions of this Application Schema.


This application schema also encodes point positions measured in one of more images and optional object coordinates, with associated position error statistics. These object points can be tie points, control points, and check points. A control or check point has a measured position with position error statistics in one or more images, and a known position with error statistics in some geodetic Coordinate Reference System (CRS). A tie point has a measured position with error statistics in two or more images, but not a known position in any geodetic CRS


Error statistics are represented as variance-covariance matrices, representing both absolute and relative accuracies. These covariance matrices are used to represent correlations between the accuracies of different coordinates, parameters, and positions.


6.2 UML model packages

This GML image geopositioning metadata application schema is specified in five parts, corresponding to five UML packages with five corresponding XML Schema Documents. The five UML packages are listed and briefly described in Table 1. The dependencies among these geopositioning metadata UML packages are shown in the Figure 1, together with the classes in each package.


Table 1 — Image geopositioning metadata UML model packages


		Package Name

		Description



		GSM_SensorModel

		Records multiple versions of object-to-image transformations and the sensor mathematical models used by these transformations



		GIG_ImageGeometry

		Records image orientation data, allowing multiple adjustments of orientation data and groups of images that are adjusted together



		GSC_SensorCalibration

		Records sensor calibration data, including multiple adjustments of interior orientation data



		GOP_ObjectPoint

		Records object point positions in one of more images with optional object coordinates, for control points, tie points, and other points



		GCM_CovarianceMatrix

		Records covariance matrices, for absolute and relative parameter and position error estimates





GIO_ImageGeometry


+ GIG_AdjustableParameters


+ GIG_AdjustmentGroup


+ GIG_AdjustmentStatus


+ GIG_AdjustmentSummary


+ GIG_EqualParameters


+ GIG_ImageAccuracy


+ GIG_ImageOrientation


+ GIG_ImageParameterValues


+ GIG_ImageParametersStatus


+ GIG_MovingSensorParameters


+ GIG_StationarySensorParameters


GSC_SensorCalibration


+ GSC_ImageSensor


+ GSC_SensorParameterStatus


+ GSC_SensorParameterValues


GOP_ObjectPoint


+ GOP_ IdentificationImage


+ GOP_ImagePosition


+ GOP_ImagePositionStatus


+ GOP_ObjectPoint


+ GOP_ObjectPosition


+ GOP_ObjectPositionStatus


+ GOP_PointType


GCM_CovarianceMatrix


+ GCM_BandedCovarianceMatrix


+ GCM_CellValues


+ GCM_CovarianceMatrix


+ GCM_DiagonalCovarianceMatrix


+ GCM_FullCovarianceMatrix


+ GCM_NormalCovarianceMatrix


+ GCM_PositionedCellValues


+ GCM_SparseCovarianceMatrix


GSM_SensorModel


+ GSM_ObjectImageTransformation




Figure 1 — Image geopositioning metadata UML packages with dependencies


This UML model is built upon the ISO/TC 211 UML model, contained in the ISO 191XX series of standards. The ISO/TC 211 UML model packages used, directly and indirectly, are listed in Table 2. The direct dependencies of the geopositioning metadata UML model packages on ISO/TC 211 UML model packages are shown in the Figure 2 (without the classes in each package).


Table 2 — ISO/TC 211 UML model packages used


		ISO Standard

		UML package name



		19107 Geographic information — Spatial schema

		GM_Geometry



		19109 Geographic information — Rules for application schema

		GF_GeneralFeature



		19111 Geographic information — Spatial referencing by coordinates

		CC_CoordinateOperation


CD_Datum


CS_CoordinateSystem


IO_IdentifiedObject


SC_CoordinateReferenceSystem



		19115 Geographic information — Metadata

		DQ_DataQuality


EX_Extent





GIO_ImageGeometry


GSC_SensorCalibration


GGP_GroundPoint


GCM_CovarianceMatrix


GSM_SensorModel


CC_CoordinateOperation


GM_Geometry


SC_CoordinateReferenceSystems


DQ_DataQuality


GF_GeneralFeature




Figure 2 — Image geopositioning metadata and ISO/TC 211 packages


6.3 GML application schema


This GML 3.2 Application Schema for geopositioning metadata is also an Application Schema of ISO 19139. This Application Schema uses small profiles (or subsets) of GML 3.2 (ISO 19136) and ISO 19139, although those profiles are not yet formally specified. For GML, the profile used is essentially a subset of the GML grid CRSs and simple features profiles. For ISO 19139, the profile is a subset of the ISO 19139 profile that is used by GML 3.2 (ISO 19136).


Most of the ISO/TC 211 classes used in the UML model are encoded by GML 3.2 XML elements as listed in Table 3.


Table 3 — GML 3.2 elements encoding ISO classes


		ISO package name (ISO number)
UML class name

		GML XML Schema Document 
XML element name



		CC_CoordinateOperation (19111)
CC_Transformation

		coordinateOperations.xsd
Transformation



		CC_CoordinateOperation (19111)
CC_OperationMethod

		coordinateOperations.xsd
OperationMethod



		CC_CoordinateOperation (19111)
CC_ParameterValueGroup

		coordinateOperations.xsd
ParameterValueGroup



		CC_CoordinateOperation (19111)
CC_OperationParameterGroup

		coordinateOperations.xsd
ParameterGroup



		GF_GeneralFeature (19109)
GF_FeatureType

		feature.xsd
AbstractFeature



		GM_Geometry (19107)
GM_Polygon

		geometryBasic2d.xsd
Polygon



		GM_Geometry (19107)
GM_Curve

		geometryBasic0d1d.xsd
AbstractCurve



		GM_Geometry (19107)
GM_Point

		geometryBasic0d1d.xsd
Point






Each of these geopositioning metadata UML packages and corresponding XML Schema Documents is defined in subsequent clauses.


7 Sensor model

7.1 Introduction


The sensor model part of the GML image geopositioning metadata application schema supports recording multiple versions of object-to-image transformations and the (image geometry) sensor mathematical models used by these transformations. These object-to-image transformations are used for georeferencing coordinate transformations. These coordinate transformations can use many possible image geometry (or sensor) models that can be encoded using extensions of this Application Schema. The parameter values used by these transformations are recorded in the image orientation and other parts of this application schema.

7.2 UML model


The UML class diagram for the GSM_SensorModel package is shown in Figure 3, together with the CC_CoordinateOperation classes that are directly inherited from. The new GSM_ObjectImageTransformation class defined in this GSM_SensorModel package is defined in Table 4. This diagram also shows two other classes added in this image geopositioning metadata application schema, namely GIG_ImageParameterValues and GSC_SensorParameterValues.

CC_Transformation


(from CC_CoordinateOperation)


<<Type>>


CC_OperationMethod


(from CC_CoordinateOperation)


<<Type>>


CC_GeneralOperationParameter


(from CC_CoordinateOperation)


<<Type>>


0..*


1..*


+parameter0..*


1..*


CC_SingleOperation


(from CC_CoordinateOperation)


<<Type>>


1


0..*


+method


1


0..*


CC_OperationParameterGroup


(from CC_CoordinateOperation)


<<Type>>


2..*


0..*


+parameter


2..*


0..*


CC_GeneralParameterValue


(from CC_CoordinateOperation)


<<Type>>


0..*


1


+parameterValue0..*


1


CC_ParameterValueGroup


(from CC_CoordinateOperation)


<<Type>>


1


0..*


+group


1


0..*


2..*


1


+parameterValue2..*


1


GSC_SensorParameterValues


(from GSC_SensorCalibration)


<<Type>>


GIG_ImageParameterValues


(from GIO_ImageGeometry)


<<Type>>


1


0..*


+parameterValue (inherited)


1


0..*


GSM_ObjectImageTransformation


<<Type>>


1


1


+parameterValue (inherited)


1


1




Figure 3 — GSM_SensorModel package UML class diagram


The GSM_SensorModel package for the GML image geopositioning metadata application schema specializes the CC_CoordinateOperation package in ISO 19111 (new version), by defining more-specific subclasses. By specializing the CC_CoordinateOperation package, the GSM_SensorModel package uses the existing ISO 19111 concepts and terms, for coordinate Transformations, Operation Methods, Operation Parameter Groups, etc.

Specifically, the GSM_ObjectImageTransformation class specializes the CC_Transformation class for image georeferencing object-to-image coordinate transformations. That new class uses the GIG_ImageParameterValues and GSC_SensorParameterValues classes which specialize the CC_ParameterValueGroup class. The CC_OperationMethod and CC_OperationParameterGroup classes have instances that are specialized for this use (specialized classes are not used).

Table 0\IF >= 1 "A." 
4 — Defining elements of GSM_ObjectImageTransformation class


		Description:
Definition of one object-to-image coordinate transformation for image georeferencing, using one group of (adjusted) image parameter values, which contains one group of (calibrated) sensor parameter values.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
CC_Transformation

Association roles:
imageParameterValues to GIG_ImageParameterValues [1] a 
(Association to values of group of image parameters used by this transformation)


method to CC_OperationMethod [1] b
(Inherited association to method used by this transformation)

Public attributes: 
11 attributes inherited from CC_Transformation and IO_IdentifiedObjectBase



		a
Association inherited through CC_Transformation, CC_SingleOperation, CC_GeneralPareameterValues, and CC_ParameterValueGroup.

b
Association inherited through CC_Transformation and CC_SingleOperation.





NOTE 
These tables are using the table format used in ISO 19111 [OGC 05-103].


7.3 XML encoding


The GSM_SensorModel UML package is encoded in the igmSensorModel.xsd XML Schema Document, which imports the coordinateOperations.xsd XML Schema Document from GML 3.2. The ISO 19111 classes used in the UML model are encoded by the GML 3.2 XML elements as listed in Table 3. The contents of the igmSensorModel.xsd XML Schema Document shall be as specified in the attached file.


8 Image geometry

8.1 Introduction


The image geometry part of the GML image geopositioning metadata application schema supports recording image (exterior) orientation parameter values, including image sensor position and attitude. This package supports multiple adjustments of this image orientation data and groups of images that are adjusted together. Most of these orientation parameter values are specific to each image collected by one image sensor, and usually must be adjusted for each image collected. These parameters can be for many possible image geometry (or sensor) models that can be encoded using extensions of this Application Schema.


8.2 UML model


The UML class diagram for the GIG_ImageGeometry package is shown in Figure 4 and Figure 5, together with the ISO 191XX UML classes that are directly inherited from. The new classes defined in this GIG_ImageGeometry package are described in Table 5 through Table 12.

A concrete subclass of one 


of these abstract classes 


shall be specified for each 


specific sensor model


GF_FeatureType


+ definition : CharacterString


+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


CC_ParameterValueGroup


(from CC_CoordinateOperation)


<<Type>>


GIG_MovingSensorParameters


<<Type>>


GM_Curve


(from GM_Geometry)


<<Type>>


1..*


1


1..*


+sensorPath1


1..*


1


1..*


+attitudeHistory1


GIG_StationarySensorParameters


<<Type>>


GIG_ImageOrientation


+ pixelsReference : URI


<<Type>>


GM_Polygon


(from GM_Geometry)


<<Type>>


GIG_ImageParameterValues


+ parameterStatus : GIG_ImageParametersStatus


+ imageAccuracySummary : GIG_ImageAccuracy


<<Type>>


0..*


1


+parameterValues


0..*


+image


1


0..1


1


+footprint


0..1


1


GM_Point


(from GM_Geometry)


<<Type>>


1


1


1


+sensorPosition


1


1


1


1


+sensorAttitude1


GCM_CovarianceMatrix


(from GCM_CovarianceMatrix)


<<Type>>


GOP_ObjectPosition


(from GOP_ObjectPoint)


<<Type>>


GIG_AdjustmentGroup


+ adjustmentStatus : GIG_AdjustmentStatus


+ timeStamp [0..1] : DateTime


+ adjustmentSummary [0..1] : GIG_AdjustmentSummary


<<Type>>


0..*0..1


+updates


0..*0..1


0..1


1


+footprint0..1


1


0..1


1


0..1


+parameterErrorEstimates1


1..*


0..*


+adjustedmage


1..*


+inGroup0..*


0..*


0..1


0..*


+adjustedPosition


0..1


GSC_SensorParameterValues


(from GSC_SensorCalibration)


<<Type>>


0..*


1


0..*


+parameterValue (inherited)


1


0..*


0..1


0..*


+adjustedCalibration


0..1




Figure 4 — GIG_ImageGeometry package UML class diagram, part 1

GIG_ImageParametersStatus


+ estimated


+ adjusted


+ validated


+ invalid


<<CodeList>>


GIG_AdjustmentStatus


+ estimated


+ adjusted


+ validated


+ invalid


<<CodeList>>


GF_FeatureType


+ definition : CharacterString


+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


GIG_AdjustableParameters


+ parameters : Sequence<URI>


<<Type>>


GIG_ImageParameterValues


<<Type>>


1


0..*


+adjustableParameters


1


0..*


Repeated from part 1


GIG_ImageAccuracy


+ CE : Length


+ LE [0..1] : Length


+ horizontalShear [0..1] : Length


+ verticalShear [0..1] : Length


<<DataType>>


GIG_EqualParameters


+ parameters : Sequence<URI>


<<Type>>


GIG_AdjustmentGroup


<<Type>>


0..*


0..*


+equalParameters


0..*


0..*


GIG_AdjustmentSummary


+ numberIterations : PositiveInteger


+ numberImages : PositiveInteger


+ numberTiePoints : PositiveInteger


+ numberControlPoints : PositiveInteger


+ numberCheckPoints : PositiveInteger


+ allChecksPassed : Boolean


+ checkPassed [0..*] : CharacterString


+ checkFailed [0..*] : CharacterString




Figure 5 — GIG_ImageGeometry package UML class diagram, part 2


Part 1 of this UML class diagram shows how multiple groups of orientation parameter values can be recorded for each image, with each group associated with any one adjustment that produced it. That is, multiple ImageParameterValues objects can be associated with the ImageOrientation object for one image. Similarly, multiple ImageParameterValues objects can be associated with an AdjustedGroup object for one adjustment (or triangulation).

As needed for different image types and purposes, different sensor models can be used by the multiple ImageParameterValues objects which are associated with the ImageOrientation for one image, or with the AdjustedGroup for one adjustment. Similarly, different image parameters can be adjusted in different ImageParameterValues objects. As indicated, the ImageOrientation class contains a pointer to the image pixels.


The AdjustedGroup concrete class records the status of that adjustment, and has an association to the CovarianceMatrix object that records all the parameter error estimates resulting from that adjustment. Each AdjustedGroup object is associated to the SensorParameterValues and ObjectPosition objects that were adjusted or computed by this adjustment. Each AdjustedGroup object also has an optional association to a Polygon giving the approximate footprint for that adjustment. Since the GM_Polygon is used, any holes in that polygon can be recorded.

The ImageParameterValues abstract class records the parameter values for any sensor model, including the status of that group of parameter values. Each ImageParameterValues object also has an optional association to a Polygon giving the (approximate) footprint for the image using those parameter values.


The Stationary​Sensor​Parameters and Moving​Sensor​Parameters abstract subclasses of ImageParameterValues record the parameter values common to all stationary and moving sensors. For a stationary sensor, these parameters are the sensor position coordinates and the sensor attitude (rotation) parameters, each recorded using a GM_Point object. For a moving sensor, these parameters are the sensor path positions and the sensor attitude history, each recorded using a GM_Curve object. The sensor path and attitude history can be shared by multiple images collected in a strip, with each image specifying the collection time or range within this history.

The details specific to each specific sensor model are recorded as concrete subclasses of the Stationary​Sensor​Parameters and Moving​Sensor​Parameters abstract classes, which shall be specified in extensions of this Application Schema. These classes should share more classes for common aspects (also not shown here). Wherever relevant, these specific image geometry models should build upon and adapt the Sensor Markup Language (SensorML), Transducer Markup Language (TML), and ISO 19130 (Sensor data model for imagery and gridded data).


Part 2 of this UML class diagram shows that each ImageParameterValues object also has an association to one AdjustableParameters object that identifies which of the image and sensor parameters could have been adjusted by the associated AdjustmentGroup. Each AdjustableParameters object can be associated from multiple ImageParameterValues objects which have the same set of adjustable parameters (as is common).

Also, each AdjustmentGroup object can have associations to zero or more EqualParameters objects, which each identify two or more otherwise adjustable parameters that were considered to have the same values during that adjustment. Each EqualParameters object can be associated from multiple AdjustmentGroup objects which have the same set of equal parameters (as is common).

The ImageGeometry package for the GML image geopositioning metadata application schema specializes the GF_FeatureType package in ISO 19109, by defining more-specific subclasses. By defining the ImageOrientation and AdjustedGroup classes as feature collections, identification metadata is inherited and additional properties for recording needed metadata can be easily added. By defining the AdjustableParameters and EqualParameters as features, identification metadata is inherited and additional properties for recording needed metadata can be easily added.

This package also specializes the CC_CoordinateOperation package in ISO 19111, by defining more-specific subclasses of CC_ParameterValueGroup. By defining the ImageParameterValues class as a parameter value group, individual parameters and subsidiary parameter groups can be defined for different image geometry (or sensor) models. This package also uses parts of the GM_Geometry package from ISO 19107, avoiding new definitions of points, curves, and polygons.

Table 5 — Defining elements of GIG_ImageOrientation class


		Description:
Orientation metadata for one image.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
parameterValues to GIG_ImageParameterValues [0..*] 
(Association to group of parameter values determined for this image)


point to GOP_ObjectPoint [0..*] 
(Association to object point that falls within this image)


image from GIG_ImageParameterValues [1] 
(Association from group of parameter values determined for this image)


inImage from GOP_ImagePosition [1] 
(Association from position measured in this image)

Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Pixels reference

		pixelsReference

		URI

		M

		1

		Reference to pixels of this image.





Table 0\IF >= 1 "A." 
6 — Defining elements of GIG_AdjustedGroup class


		Description:
Definition of a group of one or more images that were adjusted as a group. a



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
adjustedImage to GIG_ImageParameterValues [1..*] 
(Association to image parameter values determined by this adjustment group)


adjustedPosition to GOP_ObjectPosition [0..*]
(Association to object positions determined by this adjustment group)



adjustedCalibration to GSC_SensorParameterValues [0..*]
(Association to group of sensor parameters determined by this adjustment group)



parameterErrorEstimates to GCM_CovarianceMatrix [1] 
(Association to error estimates for all the image parameter values from this adjustment)



footprint to GM_Polygon [0..1] 
(Association to approximate footprint of this adjustment group)


equalParameters to GIG_EqualParameters [0..*] 
(Association to list of equal parameters for this adjusted group)



updates to GIG_AdjustedGroup [0..*] 
(Association to previous group updated by this adjustment group)


updates from GIG_AdjustedGroup [0..1] 
(Association from group that updated by this adjustment group)


inGroup from GIG_ImageParameterValues [0..1] 
(Association from group of image parameter values adjusted by this group)


Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Adjustment status

		adjustmentStatus

		GIG_AdjustmentStatus

		M

		1

		Status of this adjustment of this group of images.



		Time stamp

		timeStamp

		DateTime

		C b

		1

		Time when this group adjustment was performed or last changed.



		Adjustment Summary

		adjustmentSummary

		GIG_AdjustmentSummary

		C b

		1

		Summary of results of this adjustment.



		a
A group of images can be either: 1) a strip of overlapping images collected in one pass, 2) a block of images covering a roughly rectangular area, 3) a group of blocks of images, or 4) a single image (for example, being adjusted to control points).

b
Condition: Include after adjustment performed.





Table 0\IF >= 1 "A." 
7 — Defining elements of GIG_ImageParameterValues class


		Description:
Group of parameter values for one adjustment of one image, including most exterior orientation parameters.



		Stereotype:
Type


Class attribute:
Abstract


Inheritance from:
CC_ParameterValueGroup


Association roles:
image to GIG_ImageOrientation [1]
(Association to the image orientation using this group of image parameter values)



parameterValue to GSC_SensorParameterValues [1] a
(Inherited association to calibrated sensor parameter values used by this image parameter adjustment)


footprint to GM_Polygon [0..1] 
(Association to approximate footprint of this image using this group of image parameter values)


adjustableParameters to GIG_AdjustableParameters [1}
(Association to list of adjustable parameters in this group)


group to CC_OperationParameterGroup [1] a 


(Inherited association to operation parameter group for this group of image parameter values)



inGroup to GIG_AdjustedGroup [0..1] 
(Association to the adjustment group that produced this group of image parameter values)


parameterValue from GSM_ObjectImageTransformation [1] 
(Association from object to image transformation that uses this set of parameter values)


Public attributes: 
No attributes inherited from CC_ParameterValueGroup



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Image parameter status

		imageParameterStatus

		GIG_ImageParametersStatus

		M

		1

		Status of this group of image parameter values.



		Image accuracy summary

		imageAccuracySummary

		GIG_ImageAccuracy

		M

		1

		Summary of positional accuracy of this image using this group of parameter values.



		a
Association inherited from CC_ParameterValueGroup.





NOTE 1
All GM_Polygon objects reference the geodetic coordinate reference system of these polygons.


Table 0\IF >= 1 "A." 
8 — Defining elements of GIG_MovingSensorParameters class


		Description:
Group of image parameter values for one image collected by a sensor which moved during image collection. A concrete subclass of this abstract class must be specified for each specific moving image geometry (sensor) mathematical model, in an extension of this GML image geopositioning metadata application schema.



		Stereotype:
Type

Class attribute:
Abstract


Inheritance from:
GIG_ImageParameterValues

Association roles:
sensorPath to GM_Curve [1] 
(Association to sensor path position coordinates during the collection period of one or more images)



sensorAttitudeHistory to GM_Curve [1] 
(Association to sensor attitude “history” during the collection period of one or more images)


Plus associations inherited from GIG_ImageParameterValues class


Public attributes: 
One attribute inherited from GIG_ImageParameterValues



		a
This geopositioning metadata structure assumes that GM_Curve is interpreted to allow recording of the four quantities used to specify the attitude of an imaging sensor, in place of the three coordinates of an imaging sensor position.





Table 0\IF >= 1 "A." 
9 — Defining elements of GIG_StationarySensorParameters class


		Description:
Group of image parameter values for one image collected by a sensor which was stationary during image collection. A concrete subclass of this abstract class must be specified for each specific stationary image geometry (sensor) mathematical model, in an extension of this GML image geopositioning metadata application schema.



		Stereotype:
Type

Class attribute:
Abstract


Inheritance from:
GIG_ImageParameterValues

Association roles:
sensorPosition to GM_Point [1] 
(Association to sensor position coordinates at the collection time)



sensorAttitude to GM_Point [1] 
(Association to sensor attitude at the collection time)


Plus associations inherited from GIG_ImageParameterValues class

Public attributes: 
One attribute inherited from GIG_ImageParameterValues



		a
This geopositioning metadata structure assumes that GM_Point is interpreted to allow recording of the four quantities used to specify the attitude of an imaging sensor, in place of the three coordinates of an imaging sensor position.





NOTE 2
All GM_Curve and GM_Point objects reference the geodetic coordinate reference system for these positions and attitudes


Table 0\IF >= 1 "A." 

 SEQ Table \* MERGEFORMAT 
10
 — Defining elements of GIG_ImageAccuracy class


		Description:
Summary of the estimated positional accuracies of positions extracted using this image with this group of parameter values.



		Stereotype:
DataType

Class attribute:
Concrete

Inheritance from:
(none)

Association roles:
(none)

Used by:
GIG_ImageParameterValues


Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Circular error (90%)

		CE

		Length

		M

		1

		Estimated absolute (external) horizontal error in object positions extracted using this image.



		Linear error (90%)

		LE

		Length

		C a

		1

		Estimated absolute (external) elevation error in object positions extracted using this image with its stereo mate image in this adjusted group.



		Horizontal shear

		horizontalShear

		Length

		C b

		1

		Estimated (relative internal) horizontal difference between object positions extracted using this image and overlapping image(s) in this adjusted group.



		Vertical shear

		verticalShear

		Length

		C c

		1

		Estimated (relative internal) elevation difference between object positions extracted using this image and overlapping image(s) in this adjusted group.



		a
Condition: At least one stereo mate image is included in this adjusted group.


b
Condition: One or more overlapping images, excluding any stereo mate image(s), are included in this adjusted group.

c
Condition: One or more overlapping stereo pairs of images are included in this adjusted group.





Table 0\IF >= 1 "A." 

 SEQ Table \* MERGEFORMAT 
11
 — Defining elements of GIG_AdjustmentSummary class


		Description:
Summary of results of this adjustment.



		Stereotype:
DataType

Class attribute:
Concrete

Inheritance from:
(none)

Association roles:
(none)

Used by:
GIG_AdjustedGroup


Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Number of iterations

		numberIterations

		PositiveInteger

		M

		1

		Number of adjustment computation iterations actually executed.



		Number of images

		numberImages

		PositiveInteger

		M

		1

		Number of images whose image parameters were adjusted.



		Number of tie points

		numberTiePoints

		PositiveInteger

		M

		1

		Number of tie points whose image position coordinates were used, and object positions estimated.



		Number of control points

		numberControlPoints

		PositiveInteger

		M

		1

		Number of control points whose object and image position coordinates were used, and object positions estimated.



		Number of check points

		numberCheckPoints

		PositiveInteger

		M

		1

		Number of check points whose object positions were estimated using image position coordinates with final image parameters (but were not used in adjustment).



		All checks passed

		allChecksPassed

		Boolean

		M

		1

		Adjustment results passed all required tests (or checks).



		Check passed

		checkPassed

		Character String 

		C a

		N

		Adjustment results passed identified test.



		Check failed

		checkFailed

		Character String 

		C b

		N

		Adjustment results failed identified test.



		a
Condition: At least one identified test was passed by adjustment results.


b
Condition: At least one identified test was failed by adjustment results.





Table 0\IF >= 1 "A." 

 SEQ Table \* MERGEFORMAT 
12
 — Defining elements of GIG_AdjustableParameters class


		Description:
List of the adjustable parameters in a group of image parameter values, for the adjustment group that includes these parameter values.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
adjustableParameters from GIG_ImageParameterValues [0..*] 
(Association from list of adjustable parameters in this group)


Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Name

		name

		CharacterString

		M

		N

		Identifier of adjustable parameter.





Table 0\IF >= 1 "A." 

 SEQ Table \* MERGEFORMAT 
13
 — Defining elements of GIG_EqualParameters class


		Description:
List of adjustable parameters in an adjustment group that are constrained to have equal values.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
equalParameters from GIG_AdjustedGroup [0..*] 
(Association from adjusted group using this list of equal parameters)


Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Name

		name

		CharacterString

		M

		N

		Identifier of adjustable parameter constrained to have the same value as all others in this list.





Table 0\IF >= 1 "A." 
14 — Defining elements of GIG_ImageParametersStatus class


		Description:
Status of this group of image parameter values.



		Stereotype:
CodeList

Class attribute:
Concrete


Inheritance from:
(none)

Association roles:
(none)

Used by:
GIG_ImageParameterValues

Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Estimated

		estimated

		CharacterString

		C

		1

		Contains initial estimated values.



		Adjusted

		adjusted

		CharacterString

		C

		1

		Contains computed adjusted values, not yet checked



		Validated

		validated

		CharacterString

		C

		1

		Contains validated (or checked) adjusted values.



		Invalid

		invalid

		CharacterString

		C

		1

		Contains values considered not valid for some reason (but object not yet deleted).



		Condition: One and only one of the listed attributes shall be supplied.





Table 0\IF >= 1 "A." 
15 — Defining elements of GIG_AdjustmentStatus class


		Description:
Status of this adjustment of this group of images.



		Stereotype:
CodeList

Class attribute:
Concrete


Inheritance from:
(none)

Association roles:
(none)

Used by:
GIG_AdjustedGroup


Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Estimated

		estimated

		CharacterString

		C

		1

		Contains initial estimated values.



		Adjusted

		adjusted

		CharacterString

		C

		1

		Contains computed adjusted values, not yet checked



		Validated

		validated

		CharacterString

		C

		1

		Contains validated (or checked) adjusted values.



		Invalid

		invalid

		CharacterString

		C

		1

		Contains values considered not valid for some reason (but object not yet deleted).



		Condition: One and only one of the listed attributes shall be supplied.





8.3 XML encoding


The GIG_ImageGeometry UML package is encoded in the igmImageGeometry.xsd XML Schema Document, which imports the feature.xsd, coordinateOperations.xsd, and geometryBasic2d.xsd XML Schema Documents from GML 3.2. The ISO 19107, 19109, and 19111 classes used in the UML model are encoded by the GML 3.2 XML elements as listed in Table 3. The contents of the igmImageGeometry.xsd XML Schema Document shall be as specified in the attached file.


9 Sensor calibration

9.1 Introduction


The sensor calibration part of the GML image geopositioning metadata application schema supports recording imaging sensor calibration parameter values, including multiple adjustments of interior orientation data. The sensor calibration parameter values are constant for many images collected by one image sensor, and are not frequently adjusted, so are recorded separate from the image parameter values specified above. This sensor calibration can be for many possible image geometry (or sensor) models that can be encoded using extensions of this Application Schema.

9.2 UML model


The UML class diagram for this package is shown in Figure 6, together with the classes that are inherited from. The four new classes defined in this GSC_SensorCalibration package are described in Table 16 through Table 16.


0..1


GF_FeatureType


+ definition : CharacterString


+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


GSC_SensorParameterStatus


+ estimated


+ adjusted


+ validated


+ invalid


<<CodeList>>


CC_ParameterValueGroup


(from CC_CoordinateOperation)


<<Type>>


GSC_ImageSensor


<<Type>>


GIG_ImageParameterValues


(from GIO_ImageGeometry)


<<Type>>


A concrete subclass of this 


abstract class shall be specified 


for each specific sensor model


GIG_AdjustmentGroup


(from GIO_ImageGeometry)


<<Type>>


GSC_SensorParameterValues


+ parameterStatus : GSC_SensorParameterStatus


<<Type>>


0..*


1


+sensorParameterValues0..*


+sensor1


1


0..*


+parameterValue (inherited)


1


0..*


0..*


0..1


+adjustedCalibration0..*




Figure 6 — GSC_SensorCalibration package UML class diagram


This UML class diagram shows how multiple groups of sensor calibration parameter values can be recorded for each image sensor, with each group associated with one AdjustedGroup that produced it. That is, multiple SensorParameterValues objects are associated with the ImageSensor object for one imaging sensor. The SensorParameterValues abstract class records the parameter values for any sensor model.

The details specific to each specific sensor model are recorded as concrete subclasses of the SensorParameterValues abstract class, which shall be specified in extensions of this Application Schema. These classes should share more classes for common aspects (also not shown here). Wherever relevant, these specific image geometry models should build upon and adapt the Sensor Markup Language (SensorML), Transducer Markup Language (TML), and ISO 19130 (Sensor data model for imagery and gridded data).


The GSC_SensorCalibration package for the GML image geopositioning metadata application schema specializes the GF_FeatureType package in ISO 19109, by defining more-specific subclasses. By defining the GSC_ImageSensor class as a feature, identification metadata is inherited and additional feature properties for recording needed metadata can be easily added.


This package also specializes the CC_CoordinateOperation package in ISO 19111, by defining more-specific subclasses of CC_ParameterValueGroup. By defining the GSC_SensorParameterValues class as a parameter value group, individual parameters and subsidiary parameter groups can be defined for different image geometry (or sensor) models.


Table 16 — Defining elements of GSC_ImageSensor class


		Description:
Calibration (interior orientation) data for one imaging sensor.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
sensorParameterValues to GSC_SensorParameterValues [0..*] 
(Association to group of parameter values determined for this sensor)


sensor from GSC_SensorParameterValues [1]
(Association from group of parameter values determined for this sensor)


Public attributes: 
Two attributes inherited from GF_FeatureType





Table 0\IF >= 1 "A." 
17 — Defining elements of GSC_SensorParameterValues class


		Description:
Generic set of calibrated parameter values for one imaging sensor and sensor configuration, including most interior orientation parameters.



		Stereotype:
Type

Class attribute:
Abstract


Inheritance from:
CC_ParameterValueGroup

Association roles:
sensor to GSC_ImageSensor [1]
(Association to image sensor for this group of parameter values)



group to CC_OperationParameterGroup [1] 


(Inherited association to operation parameter group for this group of sensor parameter values)



sensorParameterValues from GIG_ImageParameterValues [1] 
(Association from image parameter adjustment to calibrated imaging sensor parameter used)


adjustedCalibration from GIG_AdjustedGroup [0..1]
(Association to group of sensor parameters determined by this adjustment group)



sensorParameterValues from GSC_Sensor [0..*] 
(Association from sensor that uses this group of sensor parameter values)


Public attributes: 
No attributes inherited from CC_ParameterValueGroup, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Sensor parameter status

		parameterStatus

		GSC_SensorParameterStatus

		M

		1

		Status of this group of sensor parameter values.





Table 0\IF >= 1 "A." 
18 — Defining elements of GSC_SensorParameterStatus class


		Description:
Status of this group of sensor parameter values.



		Stereotype:
CodeList

Class attribute:
Concrete


Inheritance from:
(none)

Association roles:
(none)

Used by:
GIG_SensorParameterValues

Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Estimated

		estimated

		CharacterString

		C

		1

		Contains initial estimated values.



		Adjusted

		adjusted

		CharacterString

		C

		1

		Contains computed adjusted values, not yet checked



		Validated

		validated

		CharacterString

		C

		1

		Contains validated (or checked) adjusted values.



		Invalid

		invalid

		CharacterString

		C

		1

		Contains values considered not valid for some reason (but object not yet deleted).



		Condition: One and only one of the listed attributes shall be supplied.





9.3 XML encoding


The GIG_SensorCalibration UML package is encoded in the igmSensorCalibration.xsd XML Schema Document, which imports the coordinateOperations.xsd XML Schema Document from GML 3.2. The ISO 19107, 19109, and 19111 classes used in the UML model are encoded by the GML 3.2 XML elements as listed in Table 3. The contents of the igmSensorCalibration.xsd XML Schema Document shall be as specified in the attached file.


10 Object point

10.1 Introduction


The object point part of the GML image geopositioning metadata application schema records object point positions in one of more images and optional object (or ground) coordinates. These object points can be tie points, control points, or check points. A control point or check point has a measured position with position error statistics in one or more images, and a known position with error statistics in some geodetic Coordinate Reference System (CRS). A tie point has a measured position with error statistics in two or more images, but not a known position in any geodetic CRS. All types of points can have the estimated object position computed from the measured positions in two or more images.

10.2 UML model


The UML class diagram for this package is shown in Figure 7 and Figure 8, together with the classes that are inherited from. The new classes defined in this GOP_ObjectPoint package are described in Table 19 through Table 25.


GF_FeatureType


+ definition : CharacterString


+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


SC_CRS


(from SC_CoordinateReferenceSystems)


GM_Point


(from GM_Geometry)


<<Type>>


1


0..*


+crs1


0..*


GCM_CovarianceMatrix


(from GCM_CovarianceMatrix)


<<Type>>


GOP_ObjectPosition


+ groundPositionStatus : GOP_ObjectPositionStatus


+ dimension : Integer


<<Type>>


1


1


+position


1


1


1


0..*


+positionErrorEstimates1


0..*


GOP_ImagePosition


+ imagePositionStatus : GOP_ImagePositionStatus


<<Type>>


1


1


+position


1


1


1


0..1


+postionErrorEstimates


1


0..1


GIG_ImageOrientation


(from GIO_ImageGeometry)


<<Type>>


1


0..*


+inImage1


0..*


GOP_ObjectPoint


+ pointType : GOP_PointType


<<Type>>


0..*


1


+objectPosition


0..*


+point1


0..*


1


+imagePosition0..*


1


0..*


0..*


+point


0..*


0..*


GOP_ IdentificationImage


+ patchPixels : TBD


<<Type>>


0..*


1


+identificationImage


0..*


1


GeodeticCRS


(from SC_CoordinateReferenceSystems)


SC_DerivedCRS


(from SC_CoordinateReferenceSystems)


0..*


1


+patchCRS0..*


1


1


0..*


+baseCRS1


0..*




Figure 7 — GOP_ObjectPoint package UML class diagram, part 1

GOP_PointType


+ tiePoint


+ controlPoint


+ checkPoint


<<CodeList>>


GOP_ImagePositionStatus


+ estimated


+ measured


+ validated


+ removed


+ invalid


<<CodeList>>


GOP_ObjectPositionStatus


+ measured


+ removed


+ estimated


+ validated


+ invalid


<<CodeList>>




Figure 8 — GOP_ObjectPoint package UML class diagram, part 2

This UML class diagram shows how flexible object (or ground) point metadata is structured. A ObjectPoint object records the identification, type, and status of each recorded point. Each ObjectPoint object is associated to zero or more ObjectPosition objects that record object position coordinates for this point, using one GM_Point object. Similarly, each Object​Point object is associated to zero or more ImagePosition objects that record position coordinates of this point measured in different images, using one GM_Point. Also, each Object​Point is associated to zero or more IdentificationImage objects that record image patches for use in point identification within another image.

Both Object​Position and ImagePosition objects are associated with the CovarianceMatrix that records position error estimates. Each GM_Point references its Coordinate Reference System (SC_CRS), and each IdentificationImage references the image patch plus the SC_DerivedCRS for the image patch grid. That SC_DerivedCRS references its baseCRS, which is always a GeodeticCRS. More specifically, each GM_Point for a ObjectPosition references the GeodeticCRS for that point position, and each GM_Point for an ImagePosition references the ImageCRS for positions in that image.

The GOP_ObjectPoint package for the GML image geopositioning metadata application schema specializes the GF_FeatureType package in ISO 19109, by defining more-specific subclasses. The GOP_ObjectPoint class is a feature collection, and the GOP_ImagePosition, GOP_ObjectPosition, and GOP_IdentificationImage classes are considered features. By subclassing GF_FeatureType, identification metadata is inherited and additional feature properties for recording needed metadata can be easily added. This package also uses the GM_Point class from ISO 19107, avoiding new definitions of point positions.


Table 19 — Defining elements of GOP_ObjectPoint class


		Description:
Description of one object (or ground) point, including its identification.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
objectPosition GOP_ObjectPosition [0..*] a
(Association to object position for this point)



imagePosition to GOP_ImagePosition [0..*]
(association to image position for this point)



identificationImage to GOP_IdentificationImage [0..*] b
(Association to identification image for this object point)



point from GIG_ImageOrientation [0..*]
(Association from image containing this point)


Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Object point type

		pointType

		GOP_ObjectPointType

		M

		1

		Type of this object point.



		a
Multiple GOP_ObjectPosition objects can be associated to provide estimated positions from different adjustments.


b
Multiple GOP_IdentificationImage objects can be associated to identify one object point when those image patches have significantly different object (or ground) resolutions or other image appearance differences.





Table 0\IF >= 1 "A." 
20 — Defining elements of GOP_ImagePosition class


		Description:
Measured image position for a object point.



		Stereotype:
Type


Class attribute:
Concrete

Inheritance from:
GF_FeatureType

Association roles:
inImage to GIG_ImageOrientation [1]
(Association to image in which this image position was measured)



position to GM_Point [1] 
(Association to measured image position coordinates)



positionErrorEstimates to GCM_CovarianceMatrix [1]
(Association to absolute position error estimates for this image position)



imagePosition from GOP_ObjectPoint [0..*] 


(Association from object point that uses this image position)


Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Image position status

		imagePositionStatus

		GSC_ImagePositionStatus

		M

		1

		Status of this image position.





Table 0\IF >= 1 "A." 
21 — Defining elements of GOP_ObjectPosition class


		Description:
Object (or ground) position for an object point.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
point to GOP_ObjectPoint [1]
(Association to description of this object point)


position to GM_Point [1] 
(Association to object position coordinates)



positionErrorEstimates to GCM_CovarianceMatrix [1]
(Association to position error estimates for this object position, including absolute errors of this object position and errors relative to other object positions)



objectPosition from GOP_ObjectPoint [0..*] 
(Association from object point that uses this object position)



adjustedPosition from GIG_AdjustedGroup [0..1]
(Association from adjustment group that determined this object position)


Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Object position status

		ObjectPositionStatus

		GSC_ObjectPositionStatus

		M

		1

		Status of this object position.



		Dimension

		dimension

		Integer

		M

		1

		Number of object position coordinates that are known.





 Table 0\IF >= 1 "A." 
22 — Defining elements of GOP_IdentificationImage class


		Description:
Image patch identifying one object point, located at the center of this patch.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GF_FeatureType

Association roles:
patchCRS to SC_DerivedCRS [1] 
(Association to grid CRS for this image patch) a


identification from GOP_ObjectPosition [0..*]
(Association from object point that uses this image patch for identification)


Public attributes: 
Two attributes inherited from GF_FeatureType, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Patch pixels

		patchPixels

		TBD

		M

		1

		Image pixels in identification image patch.



		a
This DerivedCRS is used for a pixel grid that is defined in a geodetic CRS that is the baseCRS of this DerivedCRS.





 Table 0\IF >= 1 "A." 
23 — Defining elements of GOP_ObjectPointType class


		Description:
Type of this object point.



		Stereotype:
CodeList

Class attribute:
Concrete


Inheritance from:
(none)

Association roles:
(none)

Used by:
GOP_ObjectPoint

Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Tie point

		tiePoint

		CharacterString

		C

		1

		Point with measured position in one or more images, used to geoposition those images.



		Control point

		controlPont

		CharacterString

		C

		1

		Point with known object position used to geoposition one or more images.



		Check point

		checkPoint

		CharacterString

		C

		1

		Point with known object position used to check the geopositioning of one or more images.



		Condition: One and only one of the listed attributes shall be supplied.





Table 0\IF >= 1 "A." 
24 — Defining elements of GOP_ImagePositionStatus class


		Description:
Status of this image position.



		Stereotype:
CodeList

Class attribute:
Concrete


Inheritance from:
(none)

Association roles:
(none)

Used by:
GOP_ImagePosition

Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Estimated

		estimated

		CharacterString

		C

		1

		Contains estimated position.



		Measured

		measured

		CharacterString

		C

		1

		Contains position measured in image, not yet checked.



		Validated

		validated

		CharacterString

		C

		1

		Contains validated (or checked) measured position.



		Removed

		removed

		CharacterString

		C

		1

		Contains position automatically detected as having a blunder, and removed from use in later triangulation computation iterations.



		Invalid

		invalid

		CharacterString

		C

		1

		Contains position considered not valid for some reason (but object not yet deleted).



		Condition: One and only one of the listed attributes shall be supplied.





Table 25 — Defining elements of GOP_ObjectPositionStatus class


		Description:
Status of this object position.



		Stereotype:
CodeList

Class attribute:
Concrete


Inheritance from:
(none)

Association roles:
(none)

Used by:
GOP_ObjectPosition


Public attributes: 




		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Measured

		measured

		CharacterString

		C

		1

		Contains measured and checked position.



		Removed

		removed

		CharacterString

		C

		1

		Contains position automatically detected as having a blunder, and removed from use in later triangulation computation iterations.



		Estimated

		estimated

		CharacterString

		C

		1

		Contains position estimated by computation.



		Validated

		validated

		CharacterString

		C

		1

		Contains validated (or checked) estimated position.



		Invalid

		invalid

		CharacterString

		C

		1

		Contains position considered not valid for some reason (but object not yet deleted).



		Condition: One and only one of the listed attributes shall be supplied.





10.3 XML encoding


The GOP_ObjectPoint UML package is encoded in the igmObjectPoint.xsd XML Schema Document, which imports the coordinateReferenceSystems.xsd XML Schema Documents from GML 3.2. The ISO 19107 and 19109 classes used in the UML model are encoded by the GML 3.2 XML elements as listed in Table 3. The contents of the igmObjectPoint.xsd XML Schema Document shall be as specified in the attached file.


11 Covariance matrix

11.1 Introduction


The covariance matrix part of the GML image geopositioning metadata application schema records combined absolute and relative position error estimates. The error statistics are in the form of covariance matrices, also called variance-covariance matrices, together with the (most-likely) values to which the covariance matrices apply. These covariance matrices normally represent correlations between the accuracies of different coordinates, parameters, and positions.


These covariance matrices contain the variance of each adjusted value estimated in the triangulation, and the covariances between these values. These estimated values include various parameters in georeferencing coordinate transformations, including the camera 3D position coordinates and 3D orientation angles. The estimated values also include point position coordinates in object CRSs.

NOTE 
Such covariance matrices for single point coordinates are described in Table D.33 of [ISO/TS 19138 draft n1934].


11.2 UML model


The UML class diagram for the GCM_CovarianceMatrix package is shown in Figure 9, together with the ISO 19115 classes that are inherited from. The new classes defined in this GCM_CovarianceMatrix package are described in through Table 26 through Table 33.


GCM_CovarianceMatrix


+ measureIdentification [0] : MD_IdentifierCharacterString


+ evaluationMethodType [0] : DQ_EvaluationMethodType


+ evaluationProcedure [0] : CI_Citation


+ dateTime [0] : DateTime


+ matrixSize : PositiveInteger


+ adjustedParameters : Sequence<URI>


<<Type>>


DQ_Element


+ nameOfMeasure [0..1] : CharacterString


+ measureIdentification [0..1] : MD_IdentifierCharacterString


+ measureDescription [0..1] : CharacterString


+ evaluationMethodType [0..1] : DQ_EvaluationMethodType


+ evaluationProcedure [0..1] : CI_Citation


+ dateTime [0..1] : DateTime


+ result [1..2] : DQ_Result


(from DQ_DataQuality)


DQ_PositionalAccuracy


(from DQ_DataQuality)


GCM_FullCovarianceMatrix


<<Type>>


GCM_DiagonalCovarianceMatrix


+ result [1] : GCM_CellValues


<<Type>>


GCM_SparseCovarianceMatrix


<<Type>>


GCM_BandedCovarianceMatrix


<<Type>>


DQ_Result


(from DQ_DataQuality)


DQ_QuantitativeResult


+ valueType [0..1] : Record


+ valueUnit [1..*] : UnitOfMeasure


+ errorStatistic [0..1] : CharacterString


+ value [1..*] : Record


(from DQ_DataQuality)


GCM_CellValues


+ valueType [0] : Record


+ value [1..*] : Sequence<Number>


<<Type>>


GCM_NormalCovarianceMatrix


+ result [1] : GCM_PositionedCellValues


<<Type>>


GCM_PositionedCellValues


+ firstRow : PositiveInteger


+ firstColumn : PositiveInteger


<<Type>>




Figure 9 — GCM_CovarianceMatrix package UML class diagram


NOTE 
This GCM_CovarianceMatrix package class diagram shows all the attributes in the DQ_Element and DQ_QuantitativeResult classes. However, some of the optional attributes in each are not expected to be useful in this application, and are thus prohibited in the GCM_CovarianceMatrix and GCM_CellValues classes.

This UML class diagram shows how multiple types of covariance matrices can be efficiently recorded. The CovarianceMatrix package (for the GML image geopositioning metadata application schema) specializes the DQ_DataQuality package specified in ISO 19115, by defining more-specific subclasses of DQ_PositionalAccuracy and DQ_QuantitativeResult.


The CellValues concrete class restricts the DQ_QuantitativeResult concrete class for efficiently recording many ordered sequences of values for adjacent covariance matrix cells. Instead of a general record, each “value” attribute is an ordered sequence of values of adjacent covariance matrix cells. In the PositionedCellValues subclass of the Cell Values class, the cell position of the first value is specified by the firstRow and firstColumn indices for this covariance matrix.

The CovarianceMatrix abstract class restricts and extends the DQ_PositionalAccuracy abstract class for combined absolute external and relative internal positional accuracies. This class adds the size of this matrix and an ordered sequence of references to the parameters for this covariance matrix. The Diagonal-, Full-, Sparse-, and Banded-CovarianceMatrix concrete subclasses are designed to efficiently record different matrix types. The Full-, Sparse-, and Banded-CovarianceMatrix concrete subclasses are specialized subclasses of the NormalVovarianceMatrix abstract subclass of the CovarianceMatrix class, which contain the same contents but specify how multiple PositionedGridCells objects shall be used.

NOTE 
 Additional concrete subclasses can be added to this Application Schema for more efficient encoding of covariance matrices with other properties.

Table 26 — Defining elements of GCM_CellValues class


		Description:
Ordered sequence of values for adjacent covariance matrix cells.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
DQ_QuantitativeResult

Association roles:
(none)


Public attributes: 
(All four listed attributes are inherited from DQ_QuantitativeResult, with two attributes being restricted here.



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		valueType

		valueType

		RecordType

		0

		0 a

		Value type for reporting a data quality result.



		valueUnit

		valueUnit

		UnitOfMeasure

		M

		N b

		Value unit for reporting a data quality result. c



		errorStatistic

		errorStatistic

		CharacterString




		0

		1

		Statistical method used to determine the value. d



		value

		value

		Sequence of Number e

		M

		N

		Ordered list of covariance matrix cell values.



		a
Inclusion of the valueType attribute is prohibited in this GCM_CellValues subclass of DQ_QuantitativeResult.


b
In this GCM_CellValues subclass of DQ_QuantitativeResult, the valueUnit needs to be repeated, and that needed change in ISO 19115 is assumed here.


c
In this GCM_CellValues class, these units shall be an ordered list of the units for each covariance matrix row, with the same units for each column, and with the unit for each matrix cell being the product of the corresponding row and column units.

d
In this GCM_CellValues class, this attribute is allowed but is not expected to be included.

e
Inherited from DQ_QuantitativeResult, but specialized from Record type to Sequence of Number type.





Table 27 — Defining elements of GCM_PositionedCellValues class


		Description:
Ordered sequence of values for adjacent covariance matrix cells with starting cell position.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GCM_CellValues

Association roles:
(none)


Public attributes: 
Four attributes inherited from GCM_CellValues, plus:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		First row

		firstRow

		Positive Integer

		M

		1

		Index of row in covariance matrix of first cell value included.



		First column

		firstColumn

		Positive Integer

		M

		1

		Index of column in covariance matrix of first cell value included.





Table 28 — Defining elements of GCM_CovarianceMatrix class


		Description:
Generic covariance matrix error estimates, usually for statistically-correlated sets of parameters, containing ordered list of parameter names for matrix rows and columns.



		Stereotype:
Type

Class attribute:
Abstract


Inheritance from:
DQ_PositionalAccuracy

Association roles:
parameterErrorEstimates from GIG_ImageParameterValues [1] 
(Association from set of image parameter values for these error estimates)



positionErrorEstimates from GOP_ImagePosition [1]
(Association from image position for these absolute and relative position error estimates)



positionErrorEstimates from GOP_ObjectPosition [1]
(Association to absolute and relative position error estimates for this object position)


Public attributes: 
(The first eight optional attributes listed below are inherited from DQ_Element through DQ_PositionalAccuracy, with four of these attributes being prohibited here.)



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		nameOfMeasure

		nameOfMeasure

		CharacterString

		O

		N

		Name of the test applied to the data. b



		measureIdentification

		measureIdentification

		MD_Identifier

		O

		0 a

		Code identifying a registered standard procedure.



		measureDescription

		measureDescription

		CharacterString

		O

		1

		Description of the measure. b



		evaluationMethodType

		evaluationMethodType

		DQ_EvaluationMethodType

		O

		0 a

		Type of method used to evaluate quality of the dataset.



		evaluationMethodDescription

		evaluationMethodDescription

		CharacterString

		O

		1

		Description of the evaluation method. b



		evaluationProcedure

		evaluationProcedure

		CI_Citation

		O

		0 a

		Reference to the procedure information.



		dateTime

		dateTime

		DateTime

		O

		0 a

		Date or range of dates on which a data quality measure was applied.



		result

		result

		DQ_Result

		M

		1

		Value (or set of values) obtained from applying a data quality measure.



		Matrix size

		matrixSize

		PositiveInteger

		M

		1

		Number or rows and columns in this covariance matrix.



		Adjusted parameter

		adjustedParameter

		URI

		M

		N

		Reference to adjusted parameter whose estimated error is represented by one row and one column in covariance matrix.



		a
Inclusion of this attribute is prohibited in this GCM_CovarianceMatrix class subclass of the DQ_PositionalAccuracy subclass of the DQ_Element class.

b
In this GCM_CovarianceMatrix class, this attribute is allowed but is not expected to be included.





Table 29 — Defining elements of GCM_DiagonalCovarianceMatrix class


		Description:
Covariance matrix containing non-zero values for only the matrix diagonal cells. (Such a matrix is for a statistically-uncorrelated set of parameters). For this Diagonal Covariance Matrix, there shall be one “value” attribute in the GCM_CellValues class, which shall contain an ordered list of the values of only the cells on the matrix diagonal.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GCM_CovarianceMatrix

Association roles:
(inherited from GCM_CovarianceMatrix)


Public attributes: 
Ten attributes inherited from GCM_CovarianceMatrix, with one of these attributes being restricted as follows:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Result

		result 

		GCM_CellValues a

		M

		1 b

		Ordered sequence of values for adjacent covariance matrix cells.



		a
Restricted to GCM_CellValues subclass of the DQ_QuantitativeResult class.

b
Restricted to one occurrence here.





Table 30 — Defining elements of GCM_NormalCovarianceMatrix class


		Description:
Generic covariance matrix error estimates, for statistically-correlated sets of parameters.



		Stereotype:
Type

Class attribute:
Abstract


Inheritance from:
GCM_CovarianceMatrix

Association roles:
(inherited from GCM_CovarianceMatrix)


Public attributes: 
Ten attributes inherited from GCM_CovarianceMatrix, with one of these attributes being restricted as follows:



		Attribute name

		UML identifier

		Data type

		Obligation

		Maximum occurrence

		Attribute description



		Result

		result 

		GCM_PositionedCellValues a

		M

		1 b

		Ordered sequence of values for adjacent covariance matrix cells, with position of first cell.



		a
Restricted to GCM_PositionedCellValues subclass of the GCM_CellValues subclass of the DQ_QuantitativeResult.

b
Restricted to one occurrence here.





Table 31 — Defining elements of GCM_FullCovarianceMatrix class


		Description:
Covariance matrix containing the values for all matrix cells, for a symmetric matrix. For this Full Covariance Matrix, one “result” attribute using the GCM_PositionedCellValues class shall be included for each matrix row. Each “result” attribute shall contain the value of one diagonal matrix cell, followed by the values of all other cells to the right in that matrix row (and down in that matrix column). Each sequence shall end when several sequential zero cell values are reached or the right edge of this matrix is reached.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GCM_NormalCovarianceMatrix

Association roles:
(inherited from GCM_CovarianceMatrix)


Public attributes: 
Ten attributes inherited from GCM_NormalCovarianceMatrix





Table 32 — Defining elements of GCM_SparseCovarianceMatrix class


		Description:
Covariance matrix containing only or mostly the values of non-zero matrix cells, for a symmetric matrix. For this Sparse Covariance Matrix, each “result” attribute shall contain the value of one non-zero matrix cell, followed by the values of other cells to the right in that matrix row. Each sequence shall end when several sequential zero cell values are reached or the right edge of this matrix is reached. The “result” attribute using the GCM_PositionedCellValues class shall contain a list of the values of this sequence of (mostly non-zero) matrix cells.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GCM_NormalCovarianceMatrix

Association roles:
(inherited from GCM_CovarianceMatrix)


Public attributes: 
Ten attributes inherited from GCM_NormalCovarianceMatrix





Table 33 — Defining elements of GCM_BandedCovarianceMatrix class


		Description:
Covariance matrix containing the values of all non-zero matrix cells, for a symmetric matrix with only zero values in the top-right and bottom-left corners. For this Banded Covariance Matrix, one “result” attribute using the GCM_PositionedCellValues class shall be included for each matrix row. Each “result” attribute shall contain the value of one diagonal matrix cell, followed by the values of other cells to the right in that matrix row (and down in that matrix column). Each sequence shall end when there are no more non-zero cell values in that row or the right edge of this matrix is reached.



		Stereotype:
Type

Class attribute:
Concrete


Inheritance from:
GCM_NormalCovarianceMatrix

Association roles:
(inherited from GCM_CovarianceMatrix)


Public attributes: 
Ten attributes inherited from GCM_NormalCovarianceMatrix





11.3 XML encoding


The GCM_CovarianceMatrix UML package is encoded in the igmCovarianceMatrix.xsd XML Schema Document, which imports the TBD XML Schema Document from ISO 19139. The ISO 19115 classes used in the UML model are encoded by the ISO 19139 XML elements as listed in Table 3. The contents of the igmCovarianceMatrix.xsd XML Schema Document shall be as specified in the attached file.


Annex A
(normative)

Abstract test suite

An abstract test suite is not provided in this draft version of this Implementation Specification, but should be included in version 1.0.0.


Annex B
(normative)

XML Schema Documents

In addition to this document, this specification includes several normative XML Schema Documents. These XML Schema Documents are bundled in a zip file with the present document. After OGC acceptance of a Version 1.0.0 of this specification, these XML Schema Documents will also be posted online at the URL http://schemas.opengeospatial.net/igs/1.0.0. In the event of a discrepancy between the bundled and online versions of the XML Schema Documents, the online files shall be considered authoritative.

The image geopositioning metadata application schema specified in this document use five specified XML Schema Documents included in the zip file with this document. These XML Schema Documents roughly match the five UML packages described in Clauses 7 through 11, and are named:


igmSensorModel.xsd

igmImageGeometry.xsd

igmSensorCalibration.xsd

igmObjectPoint.xsd


igmCovarianceMatrix.xsd


These XML Schema Documents import and build upon parts of many of the GML 3.2 XML Schema Documents specified in [OGC 05-105].

All these XML Schema Documents contain documentation of the meaning of each element and attribute, and this documentation shall be considered normative as specified in Subclause 11.6.3 of [OGC 05-008].


Bibliography


[1] ASPRS 2004, Manual of Photogrammetry, Fifth Edition, American Society for Photogrammetry and Remote Sensing, 2004


[2] ISO 19130 draft n1772, Geographic information - Sensor data model for imagery and gridded data


[3] ISO/TS 19138 draft n2027, Geographic information — Data quality measures

[4] OGC 00-115, OGC Abstract Specification Topic 15: Image Exploitation Services

[5] OGC 00-116, OGC Abstract Specification Topic 16: Image Coordinate Transformation Services


[6] OGC 05-095r1, GML 3.1.1 common CRSs profile


[7] OGC 05-096r1, GML 3.1.1 grid CRSs profile


[8] OGC 05-TBD, Transducer Markup Language (TML)


[9] OGC 05-TBD, Sensor Markup Language (SensorML)

[10] USIGS Glossary


		

		





		ii

		Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.





		Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.

		iii









06-055r1 Geopositioning Metadata AS Folder/06-055r1 Geopositioning Metadata.pdf


 


Open Geospatial Consortium Inc. 
Date: 2006-07-03 


Reference number of this document: OGC 06-055r1 


Version: 0.0.0 


Category: OpenGIS® Discussion Paper 


Editor: Arliss Whiteside 


OpenGIS® GML 3.2 image geopositioning metadata 
application schema 


 


 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 
To obtain additional rights of use, visit http://www.opengeospatial.org/legal/. 


 


Warning 


This document is not an OGC Standard. It is distributed for review and comment. It 
is subject to change without notice and may not be referred to as an OGC Standard. 


Recipients of this document are invited to submit, with their comments, notification 
of any relevant patent rights of which they are aware and to provide supporting 
documentation. 


Document type: OpenGIS® Discussion Paper 
Document subtype: Draft GML Application Schema 
Document stage: Draft proposed version 0.0 
Document language: English 


 
 



http://www.opengeospatial.org/legal/





OGC 06-055r1 


ii Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Contents Page 


i. Preface......................................................................................................................v 


iii. Submitting organizations .........................................................................................v 


iv. Document contributor contact points.......................................................................v 


v. Revision history .......................................................................................................v 


vi. Changes to the OGC Abstract Specification.......................................................... vi 


vii. Future work............................................................................................................ vi 


Foreword ........................................................................................................................... vii 


Introduction...................................................................................................................... viii 


1 Scope........................................................................................................................1 


2 Compliance ..............................................................................................................1 


3 Normative references ...............................................................................................1 


4 Terms and definitions ..............................................................................................2 


5 Conventions .............................................................................................................4 
5.1 Abbreviated terms ...............................................................................................4 
5.2 UML notation ......................................................................................................5 


6 Image geopositioning metadata overview ...............................................................5 
6.1 Image geopositioning metadata...........................................................................5 
6.2 UML model .........................................................................................................5 
6.3 GML application schema ....................................................................................8 


7 Sensor model............................................................................................................9 
7.1 Introduction .........................................................................................................9 
7.2 UML model .......................................................................................................10 
7.3 XML encoding ..................................................................................................11 


8 Image geometry .....................................................................................................11 
8.1 Introduction .......................................................................................................11 
8.2 UML model .......................................................................................................12 
8.3 XML encoding ..................................................................................................23 


9 Sensor calibration...................................................................................................24 
9.1 Introduction .......................................................................................................24 
9.2 UML model .......................................................................................................24 
9.3 XML encoding ..................................................................................................27 


10 Object point............................................................................................................28 
10.1 Introduction .......................................................................................................28 
10.2 UML model .......................................................................................................28 
10.3 XML encoding ..................................................................................................34 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. iii
 


11 Covariance matrix..................................................................................................34 
11.1 Introduction .......................................................................................................34 
11.2 UML model .......................................................................................................35 
11.3 XML encoding ..................................................................................................41 


Annex A (normative)  Abstract test suite ..........................................................................43 


Annex B (normative)  XML Schema Documents..............................................................44 


Bibliography ......................................................................................................................45 
 


Figures Page 
Figure 1 — Image geopositioning metadata UML packages with dependencies............................ 7 
Figure 2 — Image geopositioning metadata and ISO/TC 211 packages......................................... 8 
Figure 3 — GSM_SensorModel package UML class diagram..................................................... 10 
Figure 4 — GIG_ImageGeometry package UML class diagram, part 1....................................... 13 
Figure 5 — GIG_ImageGeometry package UML class diagram, part 2....................................... 14 
Figure 6 — GSC_SensorCalibration package UML class diagram .............................................. 25 
Figure 7 — GOP_ObjectPoint package UML class diagram, part 1............................................. 29 
Figure 8 — GOP_ObjectPoint package UML class diagram, part 2............................................. 30 
Figure 9 — GCM_CovarianceMatrix package UML class diagram............................................. 36 


Tables Page 
Table 1 — Image geopositioning metadata UML model packages ................................................ 6 
Table 2 — ISO/TC 211 UML model packages used....................................................................... 8 
Table 3 — GML 3.2 elements encoding ISO classes...................................................................... 9 
Table 4 — Defining elements of GSM_ObjectImageTransformation class ................................. 11 
Table 5 — Defining elements of GIG_ImageOrientation class .................................................... 16 
Table 6 — Defining elements of GIG_AdjustedGroup class........................................................ 17 
Table 7 — Defining elements of GIG_ImageParameterValues class ........................................... 18 
Table 8 — Defining elements of GIG_MovingSensorParameters class ....................................... 19 
Table 9 — Defining elements of GIG_StationarySensorParameters class ................................... 19 
Table 10 — Defining elements of GIG_ImageAccuracy class ..................................................... 20 
Table 11 — Defining elements of GIG_AdjustmentSummary class ............................................ 21 
Table 12 — Defining elements of GIG_AdjustableParameters class ........................................... 22 
Table 13 — Defining elements of GIG_EqualParameters class ................................................... 22 







OGC 06-055r1 


iv Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 14 — Defining elements of GIG_ImageParametersStatus class ......................................... 23 
Table 15 — Defining elements of GIG_AdjustmentStatus class .................................................. 23 
Table 16 — Defining elements of GSC_ImageSensor class ......................................................... 26 
Table 17 — Defining elements of GSC_SensorParameterValues class........................................ 27 
Table 18 — Defining elements of GSC_SensorParameterStatus class ......................................... 27 
Table 19 — Defining elements of GOP_ObjectPoint class .......................................................... 31 
Table 20 — Defining elements of GOP_ImagePosition class ...................................................... 31 
Table 21 — Defining elements of GOP_ObjectPosition class...................................................... 32 
Table 22 — Defining elements of GOP_IdentificationImage class .............................................. 32 
Table 23 — Defining elements of GOP_ObjectPointType class .................................................. 33 
Table 24 — Defining elements of GOP_ImagePositionStatus class............................................. 33 
Table 25 — Defining elements of GOP_ObjectPositionStatus class ............................................ 34 
Table 26 — Defining elements of GCM_CellValues class........................................................... 38 
Table 27 — Defining elements of GCM_PositionedCellValues class .......................................... 38 
Table 28 — Defining elements of GCM_CovarianceMatrix class ............................................... 39 
Table 29 — Defining elements of GCM_DiagonalCovarianceMatrix class................................. 40 
Table 30 — Defining elements of GCM_NormalCovarianceMatrix class ................................... 40 
Table 31 — Defining elements of GCM_FullCovarianceMatrix class ......................................... 41 
Table 32 — Defining elements of GCM_SparseCovarianceMatrix class..................................... 41 
Table 33 — Defining elements of GCM_BandedCovarianceMatrix class ................................... 41 
 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. v
 


i. Preface 


This draft specifies a GML 3.2 Application Schema for image geopositioning metadata. 
This schema is also an Application Schema of ISO 19139. This geopositioning metadata 
schema is used by the separately specified Image Geopositioning Service (IGS) interface. 


Suggested additions, changes, and comments on this draft are welcome and encouraged. 
Such suggestions may be submitted by email message or by making suggested changes in 
an edited copy of this document. 


ii. Document terms and definitions 


This document uses the specification terms defined in Subclause 5.3 of [OGC 05-008], 
which is based on the ISO/IEC Directives, Part 2. Rules for the structure and drafting of 
International Standards. In particular, the word “shall” (not “must”) is the verb form used 
to indicate a requirement to be strictly followed to conform to this specification. 


iii. Submitting organizations 


The following organizations submitted this document to the Open Geospatial Consortium 
Inc. 


BAE Systems E&IS 


iv. Document contributor contact points 


All questions regarding this document should be directed to the editor or the contributors: 


Name Organization 
Arliss Whiteside BAE Systems E&IS 


v. Revision history 


Date Release Editor Primary clauses 
modified 


Description 


2006-06-05 0.0.0 Arliss 
Whiteside 


All First draft 


2006-07-03 0.0.0 Arliss 
Whiteside 


vii, 7.2, 8.2, 9.2, 
10.2, 11.2 


Editorial improvements 







OGC 06-055r1 


vi Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


vi. Changes to the OGC Abstract Specification 


The OpenGIS® Abstract Specification Topic 11 “Metadata” (which includes ISO 19115) 
requires the following change to accommodate the technical contents of this document: 


a) Change the “Maximum Occurrence” value from “1” to “N” of the valueUnit attribute 
of the DQ_QuantitativeResult class, in Figure A.4 of Subclause A.2.4.1 and in item 
135 of Subclause B.2.4.4.4. (The corresponding change is also needed in ISO 
19139.) 


vii. Future work 


Extensions of this Application Profile are desirable to: 


a) Define specific image geometry (sensor) models. To allow useful implementation, at 
least one extension of this Application Profile is needed, that specifies at least one 
specific image geometry model. For each specific image geometry model added to 
this Application Schema, it is necessary to specify: 


1) A concrete subclass of one of the abstract classes GIG_MovingSensorParameters 
or GIG_StationarySensorParameters, which specifies the (exterior) orientation 
parameter values for that sensor 


2) A concrete subclass of the abstract class GSC_SensorParameterValues, which 
specifies the (interior) orientation parameter values for that sensor 


3) GML Application Schema for encoding two items listed above 
4) Specific parameters and sub-groups in a CC_OperationParametersGroup, which 


correspond to item 1) 


5) Specific parameters and sub-groups in a CC_OperationParametersGroup, which 
correspond to item 2) 


6) XML document(s) encoding two items listed above 


7) Specific “formula” referenced by the CC_OperationMethod that is referenced by 
GSM_ObjectImageTransformation, which uses the parameters and groups 
specified in items 3) and 4) 


NOTE 1 More generally, several extensions of this Application Profile that each specifies one or more 
specific image geometry model seem desirable. As stated and explained in Section 2.10 of OGC Abstract 
Specification Topic 16 [OGC 00-116]: “A number of different image geometry models are needed, for 
exploiting different image types under different conditions. Multiple different image geometry models 
should thus be standardized by the OGC (in the long term). However, some proprietary image geometry 
models are expected to exist, and not be standardized.” 


NOTE 2 Where relevant, these specific image geometry models should build upon and adapt the Sensor 
Markup Language (SensorML), Transducer Markup Language (TML), and ISO 19130 (Sensor data model 
for imagery and gridded data). 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. vii
 


b) Define image geometry (sensor) model components. For efficient extension of this 
Application Profile to more models, at least one extension of this Application Profile 
is needed, that specifies several components which are and/or can be used in multiple 
image geometry models. 


EXAMPLES  Possible components that could be used in multiple image geometry models would model 
lens distortion, atmospheric refraction, projection optics, correction functions, etc. 


c) Stereoscopic pairs of images. An extension is desirable to more completely handle 
pairs of images that are expected to be exploited stereoscopically. 


d) More covariance matrix types. Define additional subclasses of 
GCM_CovarianceMatrix for efficiently recording other covariance matrix types. 


e) Triangulation results. An extension is desirable to more completely specify useful 
results from a triangulation 


f) Image strip. Improvement is desirable to better handle strips of images. 


g) Examples. An extension is desirable to include example XML documents. 


h) Specify GML 3.2 and ISO 19139 profiles used. The profiles of GML 3.2 and ISO 
19129 that are used by this Application Schema should be explicitly determined and 
documented, to simplify understanding those profiles. 


Foreword 


This document does not replace any previous OGC document, in whole or in part. This 
image geopositioning metadata application schema is used by the separately specified 
Image Geopositioning Service (IGS). That service is a specific Geodata Registration 
Service as described in Section 3.6 of OGC Abstract Specification Topic 15: Image 
Exploitation Services [OGC 00-115]. That service is designed to support the Register 
Images use case described in Section 2.1.2.5 of OGC Abstract Specification Topic 15: 
Image Exploitation Services [OGC 00-115]. 


This Application Schema uses small profiles (or subsets) of GML 3.2 (ISO 19136) and 
ISO 19139, although those profiles are not yet formally specified. For GML, the profile 
used is a subset of the GML grid CRSs and simple features profiles. For ISO 19139, the 
profile is a subset of the ISO 19139 profile that is used by GML 3.2 (ISO 19136). 


This document includes three annexes; Annexes A and B are normative, and Annex C is 
informative. 


Attention is drawn to the possibility that some of the elements of this document may be 
the subject of patent rights. The OGC shall not be held responsible for identifying any or 
all such patent rights. 







OGC 06-055r1 


viii Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Introduction 


This document specifies a GML 3.2 Application Schema for image geopositioning 
metadata, which is also an Application Schema of ISO 19139. This geopositioning 
metadata schema is used by the separately specified Image Geopositioning Service (IGS) 
interface that adjusts the georeferencing coordinate transformations of images. 


This XML schema encodes image georeferencing coordinate transformations with 
associated parameter error statistics. These georeferencing coordinate transformations 
can use many possible image geometry (or sensor) models that can be encoded using 
extensions of this Application Schema. 


This application schema also encodes point positions measured in one of more images 
and optional object coordinates, with associated position error statistics. These object 
points can be tie points, control points, or check points. A control or check point has a 
measured position with position error statistics in one or more images, and a known 
position with error statistics in some geodetic Coordinate Reference System (CRS). A tie 
point has a measured position with error statistics in two or more images, but not a 
known position in any geodetic CRS. 


Error statistics are represented as variance-covariance matrices, representing both 
absolute and relative accuracies. These covariance matrices are used to represent 
correlations between the accuracies of different coordinates, parameters, and positions. 







OpenGIS® Discussion Paper OGC 06-055r1


 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 1
 


OpenGIS® GML 3.2 image geopositioning metadata 
application schema 


1 Scope 


This document specifies a GML 3.2 Application Schema for image geopositioning 
metadata, which is also an Application Schema of ISO 19139. This geopositioning 
metadata is designed for use by a separately specified Image Geopositioning Service 
(IGS) that adjusts the georeferencing coordinate transformations of images. 


This XML schema encodes image georeferencing coordinate transformations with 
associated parameter error statistics. These georeferencing coordinate transformations 
can use many possible image geometry (or sensor) models that can be encoded using 
extensions of this Application Schema. 


This application schema also encodes object point positions measured in one of more 
images and optional object coordinates, with associated position error statistics. These 
object points can be tie points, control points, and check points. 


Error statistics are represented as variance-covariance matrices, representing both 
absolute and relative accuracies. These covariance matrices are used to represent 
correlations between the accuracies of different coordinates, parameters, and positions. 


2 Compliance 


Compliance with this specification shall be checked using all the relevant tests specified 
in Annex A (normative). 


3 Normative references 


The following normative documents contain provisions that, through reference in this 
text, constitute provisions of this document. For dated references, subsequent 
amendments to, or revisions of, any of these publications do not apply. For undated 
references, the latest edition of the normative document referred to applies. 


ISO 19105:2000, Geographic information — Conformance and Testing 


ISO 19107:2003, Geographic information — Spatial schema  


ISO 19109:2005, Geographic information — Rules for application schema 


ISO 19115:2003, Geographic information — Metadata 







OGC 06-055r1 


2 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


ISO 19123:2005, Geographic information — Schema for coverage geometry and 
functions 


OGC 01-111, OpenGIS® Metadata (contains ISO/TC 211 DIS 19115) 


OGC 05-010, URNs of definitions in ogc namespace 


OGC 05-094r1, GML 3.1.1 CRS support profile 


OGC 05-095r1, GML 3.1.1 common CRSs profile 


OGC 05-096r1, GML 3.1.1 grid CRSs profile 


OGC 05-103, Geographic information — Spatial referencing by coordinates 


OGC 05-105, Geographic information — Geography Markup Language (GML) (version 
3.2, ISO/DIS 19136) 


OGC 06-054, OpenGIS® Image Geopositioning Service Implementation Specification 


OGC 05-008, Web Services Common Specification, version 1.0 


This OWS Common Specification contains a list of normative references that are also 
applicable to this Implementation Specification. 


In addition to this document, this specification includes several normative XML Schema 
Document files as specified in Annex B. 


4 Terms and definitions 


For the purposes of this specification, the definitions specified in Clause 4 of the 
OpenGIS® Abstract Specification Topic 2 [OGC 05-103] and in OWS Common 
Implementation Specification [OGC 05-008] shall apply. In addition, the following terms 
and definitions apply. 


4.1  
absolute accuracy 
absolute external accuracy  
statistic which gives the uncertainty of a point with respect to the datum required by a 
product specification (adapted from USIGS Glossary) 


NOTE  This definition implies that the effects of all error sources, both random and systematic, are 
considered. 


4.2  
accuracy  
degree to which information on a map or in a digital database matches true or accepted 
values (adapted from USIGS Glossary) 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 3
 


NOTE  Accuracy pertains to the quality of data and the number of errors contained in a dataset or map. 
In discussing a GIS database, it is possible to consider horizontal and vertical accuracy with respect to 
geographic position, as well as attribute, conceptual, and logical accuracy. The effect of inaccuracy and 
error on a GIS solution is the subject of sensitivity analysis. Accuracy, or error, is distinguished from 
precision , which concerns the level of measurement or detail of data in a database 


4.3  
check point 
point with known object (or ground) position used to check the geopositioning of one or 
more images 


NOTE  The known position of a check point is not used in the geopositioning. The position of a check 
point is measured in one or more of the images geopositioned. 


4.4  
control point 
point with known object (or ground) position used to geoposition one or more images 


NOTE  The position of a control point is measured in one or more of the images being geopositioned. 


4.5  
covariance matrix 
detailed form of position accuracy data, sometimes called a variance-covariance matrix 
(adapted from USIGS Glossary) 


NOTE 1 For three object (or ground) coordinates, a covariance matrix is a 3 by 3 matrix, with the matrix 
rows and columns each corresponding to the three coordinates. For two horizontal coordinates, a 
covariance matrix is a 2 by 2 matrix, with the matrix rows and columns each corresponding to the two 
horizontal coordinates. Similarly, for two image coordinates, a covariance matrix is a 2 by 2 matrix, with 
the matrix rows and columns each corresponding to the two image coordinates. 
 
NOTE 2 The covariance matrix cells contain the expected average values of the product of the error in 
the matrix row coordinate times the simultaneous error in the matrix column coordinate. For absolute 
accuracy, the diagonal matrix cells contain the error variances of the corresponding coordinates, or the 
squares of the standard deviations. The off-diagonal cells contain the covariances between the errors in the 
corresponding coordinates; these covariances will be zero when the errors in different coordinates are not 
statistically correlated. All covariance matrices are symmetrical, meaning that the same cell values appear 
on both sides of the diagonal cells. 
 
NOTE 3 Covariance matrices can be used to record absolute and/or relative accuracies. A covariance 
matrix for relative accuracy uses the three (or two) coordinates of one point for matrix rows and the three 
(or two) coordinates of the second point for matrix columns. A complete covariance matrix for N specific 
points would contain 3N rows by 3N columns. 


4.6  
georeferencing transformation 
coordinate transformation that can be used to convert grid coordinate values to values of 
coordinates referenced to a coordinate reference system that is related to the earth by a 
datum (adapted from ISO 19123) 


4.7  
image geopositioning 
adjustment of the parameter values of image georeferencing coordinate transformations 
to produce correct coordinates in a coordinate reference system that is related to the earth 
or other imaged object 







OGC 06-055r1 


4 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


4.8  
object point 
ground point 
point with position on the imaged object(s), often the earth 


4.9  
photogrammetry  
science of mensuration and geometric adjustment of an aerial photograph or satellite 
image (adapted from USIGS Glossary) 


NOTE 1 Photogrammetry requires: a mathematical model of the image formation process, computation 
of the internal geometry of an image, and subsequent correction of imagery based upon the ground 
relationship for every part of the image. Correction of imagery based on computational algorithms and 
measurement of geometrical position in an image. 


NOTE 2 Effective photogrammetry makes use of ground control by which aerial photographs are 
carefully compared and registered to the locations and characteristics of features identified in ground-level 
surveys. 


4.10  
relative accuracy 
relative internal accuracy 
evaluation of random errors in determining the positional accuracy of one point feature 
with respect to another feature (adapted from USIGS Glossary) 


4.11  
tie point 
point with measured position in one or more images, used to geoposition those images 


NOTE  The estimated object (or ground) position of a tie point is not known before the geopositioning. 


4.12  
transformation  
approximate transformation of position coordinates from one Spatial Reference System 
(SRS) to another 


NOTE  For example, this term is used when the transformation coefficients are determined by least 
squares adjustment. This term is strictly used only when the transformation is known only approximately. 
This term is loosely used when the transformation is known either approximately or exactly. 


5 Conventions 


5.1 Abbreviated terms 


CRS Coordinate Reference System 


GML Geography Markup Language 


IGS Image Geopositioning Service 


ISO International Organization for Standardization 


OGC Open Geospatial Consortium 


OWS OGC Web Service, or Open Web Service 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 5
 


TBD To Be Determined 


TBR To Be Reviewed 


UML Unified Modeling Language 


URI Universal Resource Identifier 


URL Uniform Resource Locator 


URN Universal Resource Name 


XML Extensible Markup Language 


1D One Dimensional 


2D Two Dimensional 


3D Three Dimensional 


5.2 UML notation 


Most diagrams that appear in this specification are presented using the Unified Modeling 
Language (UML) static structure diagram, as described in Subclause 5.2 of [OGC 05-
008]. 


6 Image geopositioning metadata overview 


6.1 Image geopositioning metadata 


This GML Application Schema XML schema encodes parameter values for image 
georeferencing coordinate transformations with associated parameter error statistics. 
These georeferencing coordinate transformations can use many possible image geometry 
(or sensor) models that can be encoded using extensions of this Application Schema. 


This application schema also encodes point positions measured in one of more images 
and optional object coordinates, with associated position error statistics. These object 
points can be tie points, control points, and check points. A control or check point has a 
measured position with position error statistics in one or more images, and a known 
position with error statistics in some geodetic Coordinate Reference System (CRS). A tie 
point has a measured position with error statistics in two or more images, but not a 
known position in any geodetic CRS 


Error statistics are represented as variance-covariance matrices, representing both 
absolute and relative accuracies. These covariance matrices are used to represent 
correlations between the accuracies of different coordinates, parameters, and positions. 


6.2 UML model packages 


This GML image geopositioning metadata application schema is specified in five parts, 
corresponding to five UML packages with five corresponding XML Schema Documents. 
The five UML packages are listed and briefly described in Table 1. The dependencies 







OGC 06-055r1 


6 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


among these geopositioning metadata UML packages are shown in the Figure 1, together 
with the classes in each package. 


Table 1 — Image geopositioning metadata UML model packages 


Package Name Description 
GSM_SensorModel Records multiple versions of object-to-image transformations and 


the sensor mathematical models used by these transformations 
GIG_ImageGeometry Records image orientation data, allowing multiple adjustments of 


orientation data and groups of images that are adjusted together 
GSC_SensorCalibration Records sensor calibration data, including multiple adjustments of 


interior orientation data 
GOP_ObjectPoint Records object point positions in one of more images with optional 


object coordinates, for control points, tie points, and other points 
GCM_CovarianceMatrix Records covariance matrices, for absolute and relative parameter and 


position error estimates 
 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 7
 


GIO_ImageGeometry
+ GIG_AdjustableParameters


+ GIG_AdjustmentGroup
+ GIG_AdjustmentStatus


+ GIG_AdjustmentSummary
+ GIG_EqualParameters
+ GIG_ImageAccuracy


+ GIG_ImageOrientation
+ GIG_ImageParameterValues
+ GIG_ImageParametersStatus


+ GIG_MovingSensorParameters
+ GIG_StationarySensorParameters


GSC_SensorCalibration
+ GSC_ImageSensor


+ GSC_SensorParameterStatus
+ GSC_SensorParameterValues


GOP_ObjectPoint
+ GOP_ IdentificationImage


+ GOP_ImagePosition
+ GOP_ImagePositionStatus


+ GOP_ObjectPoint
+ GOP_ObjectPosition


+ GOP_ObjectPositionStatus
+ GOP_PointType


GCM_CovarianceMatrix
+ GCM_BandedCovarianceMatrix


+ GCM_CellValues
+ GCM_CovarianceMatrix


+ GCM_DiagonalCovarianceMatrix
+ GCM_FullCovarianceMatrix


+ GCM_NormalCovarianceMatrix
+ GCM_PositionedCellValues


+ GCM_SparseCovarianceMatrix


GSM_SensorModel
+ GSM_ObjectImageTransformation


 


Figure 1 — Image geopositioning metadata UML packages with dependencies 


This UML model is built upon the ISO/TC 211 UML model, contained in the ISO 
191XX series of standards. The ISO/TC 211 UML model packages used, directly and 
indirectly, are listed in Table 2. The direct dependencies of the geopositioning metadata 
UML model packages on ISO/TC 211 UML model packages are shown in the Figure 2 
(without the classes in each package). 







OGC 06-055r1 


8 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 2 — ISO/TC 211 UML model packages used 


ISO Standard UML package name 
19107 Geographic information — Spatial schema GM_Geometry 
19109 Geographic information — Rules for application schema GF_GeneralFeature 
19111 Geographic information — Spatial referencing by 


coordinates 
CC_CoordinateOperation 
CD_Datum 
CS_CoordinateSystem 
IO_IdentifiedObject 
SC_CoordinateReferenceSystem 


19115 Geographic information — Metadata DQ_DataQuality 
EX_Extent 


 


GIO_ImageGeometry


GSC_SensorCalibration


GGP_GroundPoint


GCM_CovarianceMatrix


GSM_SensorModel


CC_CoordinateOperation


GM_Geometry SC_CoordinateReferenceSystems


DQ_DataQuality


GF_GeneralFeature


 


Figure 2 — Image geopositioning metadata and ISO/TC 211 packages 


6.3 GML application schema 


This GML 3.2 Application Schema for geopositioning metadata is also an Application 
Schema of ISO 19139. This Application Schema uses small profiles (or subsets) of GML 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 9
 


3.2 (ISO 19136) and ISO 19139, although those profiles are not yet formally specified. 
For GML, the profile used is essentially a subset of the GML grid CRSs and simple 
features profiles. For ISO 19139, the profile is a subset of the ISO 19139 profile that is 
used by GML 3.2 (ISO 19136). 


Most of the ISO/TC 211 classes used in the UML model are encoded by GML 3.2 XML 
elements as listed in Table 3. 


Table 3 — GML 3.2 elements encoding ISO classes 


ISO package name (ISO number)
UML class name 


GML XML Schema Document  
XML element name 


CC_CoordinateOperation (19111) 
CC_Transformation 


coordinateOperations.xsd 
Transformation 


CC_CoordinateOperation (19111) 
CC_OperationMethod 


coordinateOperations.xsd 
OperationMethod 


CC_CoordinateOperation (19111) 
CC_ParameterValueGroup 


coordinateOperations.xsd 
ParameterValueGroup 


CC_CoordinateOperation (19111) 
CC_OperationParameterGroup 


coordinateOperations.xsd 
ParameterGroup 


GF_GeneralFeature (19109) 
GF_FeatureType 


feature.xsd 
AbstractFeature 


GM_Geometry (19107) 
GM_Polygon 


geometryBasic2d.xsd 
Polygon 


GM_Geometry (19107) 
GM_Curve 


geometryBasic0d1d.xsd 
AbstractCurve 


GM_Geometry (19107) 
GM_Point 


geometryBasic0d1d.xsd 
Point 


 
Each of these geopositioning metadata UML packages and corresponding XML Schema 
Documents is defined in subsequent clauses. 


7 Sensor model 


7.1 Introduction 


The sensor model part of the GML image geopositioning metadata application schema 
supports recording multiple versions of object-to-image transformations and the (image 
geometry) sensor mathematical models used by these transformations. These object-to-
image transformations are used for georeferencing coordinate transformations. These 
coordinate transformations can use many possible image geometry (or sensor) models 
that can be encoded using extensions of this Application Schema. The parameter values 
used by these transformations are recorded in the image orientation and other parts of this 
application schema. 







OGC 06-055r1 


10 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


7.2 UML model 


The UML class diagram for the GSM_SensorModel package is shown in Figure 3, 
together with the CC_CoordinateOperation classes that are directly inherited from. The 
new GSM_ObjectImageTransformation class defined in this GSM_SensorModel package 
is defined in Table 4. This diagram also shows two other classes added in this image 
geopositioning metadata application schema, namely GIG_ImageParameterValues and 
GSC_SensorParameterValues. 


CC_Transformation
(from CC_CoordinateOperation)


<<Type>>


CC_OperationMethod
(from CC_CoordinateOperation)


<<Type>>


CC_GeneralOperationParameter
(from CC_CoordinateOperation)


<<Type>>


0..*


1..*


+parameter0..*


1..*


CC_SingleOperation
(from CC_CoordinateOperation)


<<Type>>
10..*


+method


10..*


CC_OperationParameterGroup
(from CC_CoordinateOperation)


<<Type>>


2..*


0..*


+parameter2..*


0..*


CC_GeneralParameterValue
(from CC_CoordinateOperation)


<<Type>>


0..*


1


+parameterValue0..*


1


CC_ParameterValueGroup
(from CC_CoordinateOperation)


<<Type>>


10..*


+group


10..*


2..*


1


+parameterValue2..*


1


GSC_SensorParameterValues
(from GSC_SensorCal ibration)


<<Type>>


GIG_ImageParameterValues
(from GIO_ImageGeometry)


<<Type>>


1


0..*


+parameterValue (inherited) 1


0..*


GSM_ObjectImageTransformation
<<Type>>


1


1


+parameterValue (inherited)1


1


 


Figure 3 — GSM_SensorModel package UML class diagram 


The GSM_SensorModel package for the GML image geopositioning metadata 
application schema specializes the CC_CoordinateOperation package in ISO 19111 (new 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 11
 


version), by defining more-specific subclasses. By specializing the 
CC_CoordinateOperation package, the GSM_SensorModel package uses the existing 
ISO 19111 concepts and terms, for coordinate Transformations, Operation Methods, 
Operation Parameter Groups, etc. 


Specifically, the GSM_ObjectImageTransformation class specializes the 
CC_Transformation class for image georeferencing object-to-image coordinate 
transformations. That new class uses the GIG_ImageParameterValues and 
GSC_SensorParameterValues classes which specialize the CC_ParameterValueGroup 
class. The CC_OperationMethod and CC_OperationParameterGroup classes have 
instances that are specialized for this use (specialized classes are not used). 


Table 4 — Defining elements of GSM_ObjectImageTransformation class 


Description: Definition of one object-to-image coordinate transformation for image georeferencing, using 
one group of (adjusted) image parameter values, which contains one group of (calibrated) 
sensor parameter values. 


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: CC_Transformation 
Association roles: imageParameterValues to GIG_ImageParameterValues [1] a  


(Association to values of group of image parameters used by this transformation) 
 method to CC_OperationMethod [1] b 


(Inherited association to method used by this transformation) 
Public attributes:  11 attributes inherited from CC_Transformation and IO_IdentifiedObjectBase 


a Association inherited through CC_Transformation, CC_SingleOperation, CC_GeneralPareameterValues, and 
CC_ParameterValueGroup. 
b Association inherited through CC_Transformation and CC_SingleOperation. 


 
NOTE  These tables are using the table format used in ISO 19111 [OGC 05-103]. 


7.3 XML encoding 


The GSM_SensorModel UML package is encoded in the igmSensorModel.xsd XML 
Schema Document, which imports the coordinateOperations.xsd XML Schema 
Document from GML 3.2. The ISO 19111 classes used in the UML model are encoded 
by the GML 3.2 XML elements as listed in Table 3. The contents of the 
igmSensorModel.xsd XML Schema Document shall be as specified in the attached file. 


8 Image geometry 


8.1 Introduction 


The image geometry part of the GML image geopositioning metadata application schema 
supports recording image (exterior) orientation parameter values, including image sensor 
position and attitude. This package supports multiple adjustments of this image 
orientation data and groups of images that are adjusted together. Most of these orientation 
parameter values are specific to each image collected by one image sensor, and usually 







OGC 06-055r1 


12 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


must be adjusted for each image collected. These parameters can be for many possible 
image geometry (or sensor) models that can be encoded using extensions of this 
Application Schema. 


8.2 UML model 


The UML class diagram for the GIG_ImageGeometry package is shown in Figure 4 and 
Figure 5, together with the ISO 191XX UML classes that are directly inherited from. The 
new classes defined in this GIG_ImageGeometry package are described in Table 5 
through Table 12. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 13
 


A concrete subclass of one 
of these abstract classes 
shall be specified for each 
specific sensor model


GF_FeatureType


+ definition : CharacterString
+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


CC_ParameterValueGroup
(from CC_CoordinateOperation)


<<Type>>


GIG_MovingSensorParameters
<<Type>>


GM_Curve
(from GM_Geometry)


<<Type>>


1..*


1


1..*


+sensorPath 1


1..*


1


1..*


+attitudeHistory1


GIG_StationarySensorParameters
<<Type>>


GIG_ImageOrientation
+ pixelsReference : URI


<<Type>>


GM_Polygon
(from GM_Geometry)


<<Type>>


GIG_ImageParameterValues
+ parameterStatus : GIG_ImageParametersStatus
+ imageAccuracySummary : GIG_ImageAccuracy


<<Type>>


0..*


1


+parameterValues0..*


+image1


0..1


1


+footprint 0..1


1


GM_Point
(from GM_Geometry)


<<Type>>


1


1


1


+sensorPosition 1


1


1


1


+sensorAttitude1


GCM_CovarianceMatrix
(from GCM_CovarianceMatrix)


<<Type>>


GOP_ObjectPosition
(from GOP_ObjectPoint)


<<Type>>


GIG_AdjustmentGroup
+ adjustmentStatus : GIG_AdjustmentStatus
+ timeStamp [0..1] : DateTime
+ adjustmentSummary [0..1] : GIG_AdjustmentSummary


<<Type>>


0..* 0..1+updates0..* 0..1


0..1


1


+footprint 0..1


1


0..1


1


0..1


+parameterErrorEstimates 1


1..*


0..*


+adjustedmage 1..*


+inGroup0..*


0..*


0..1


0..*+adjustedPosition


0..1


GSC_SensorParameterValues
(from GSC_SensorCal ibration)


<<Type>>


0..*


1


0..*


+parameterValue (inherited)1


0..*


0..1


0..*


+adjustedCalibration


0..1


 
Figure 4 — GIG_ImageGeometry package UML class diagram, part 1 







OGC 06-055r1 


14 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


GIG_ImageParametersStatus
+ estimated
+ adjusted
+ validated
+ invalid


<<CodeList>>
GIG_AdjustmentStatus


+ estimated
+ adjusted
+ validated
+ invalid


<<CodeList>>


GF_FeatureType


+ definition : CharacterString
+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


GIG_AdjustableParameters
+ parameters : Sequence<URI>


<<Type>>


GIG_ImageParameterValues
<<Type>>


1


0..*


+adjustableParameters 1


0..*


Repeated from part 1


GIG_ImageAccuracy
+ CE : Length
+ LE [0..1] : Length
+ horizontalShear [0..1] : Length
+ verticalShear [0..1] : Length


<<DataType>>


GIG_EqualParameters
+ parameters : Sequence<URI>


<<Type>>


GIG_AdjustmentGroup
<<Type>>


0..*


0..*


+equalParameters0..*


0..*


GIG_AdjustmentSummary
+ numberIterations : PositiveInteger
+ numberImages : PositiveInteger
+ numberTiePoints : PositiveInteger
+ numberControlPoints : PositiveInteger
+ numberCheckPoints : PositiveInteger
+ allChecksPassed : Boolean
+ checkPassed [0..*] : CharacterString
+ checkFailed [0..*] : CharacterString


 
Figure 5 — GIG_ImageGeometry package UML class diagram, part 2 


Part 1 of this UML class diagram shows how multiple groups of orientation parameter 
values can be recorded for each image, with each group associated with any one 
adjustment that produced it. That is, multiple ImageParameterValues objects can be 
associated with the ImageOrientation object for one image. Similarly, multiple 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 15
 


ImageParameterValues objects can be associated with an AdjustedGroup object for one 
adjustment (or triangulation). 


As needed for different image types and purposes, different sensor models can be used by 
the multiple ImageParameterValues objects which are associated with the 
ImageOrientation for one image, or with the AdjustedGroup for one adjustment. 
Similarly, different image parameters can be adjusted in different ImageParameterValues 
objects. As indicated, the ImageOrientation class contains a pointer to the image pixels. 


The AdjustedGroup concrete class records the status of that adjustment, and has an 
association to the CovarianceMatrix object that records all the parameter error estimates 
resulting from that adjustment. Each AdjustedGroup object is associated to the 
SensorParameterValues and ObjectPosition objects that were adjusted or computed by 
this adjustment. Each AdjustedGroup object also has an optional association to a Polygon 
giving the approximate footprint for that adjustment. Since the GM_Polygon is used, any 
holes in that polygon can be recorded. 


The ImageParameterValues abstract class records the parameter values for any sensor 
model, including the status of that group of parameter values. Each 
ImageParameterValues object also has an optional association to a Polygon giving the 
(approximate) footprint for the image using those parameter values. 


The StationarySensorParameters and MovingSensorParameters abstract subclasses of 
ImageParameterValues record the parameter values common to all stationary and moving 
sensors. For a stationary sensor, these parameters are the sensor position coordinates and 
the sensor attitude (rotation) parameters, each recorded using a GM_Point object. For a 
moving sensor, these parameters are the sensor path positions and the sensor attitude 
history, each recorded using a GM_Curve object. The sensor path and attitude history can 
be shared by multiple images collected in a strip, with each image specifying the 
collection time or range within this history. 


The details specific to each specific sensor model are recorded as concrete subclasses of 
the StationarySensorParameters and MovingSensorParameters abstract classes, which 
shall be specified in extensions of this Application Schema. These classes should share 
more classes for common aspects (also not shown here). Wherever relevant, these 
specific image geometry models should build upon and adapt the Sensor Markup 
Language (SensorML), Transducer Markup Language (TML), and ISO 19130 (Sensor 
data model for imagery and gridded data). 


Part 2 of this UML class diagram shows that each ImageParameterValues object also has 
an association to one AdjustableParameters object that identifies which of the image and 
sensor parameters could have been adjusted by the associated AdjustmentGroup. Each 
AdjustableParameters object can be associated from multiple ImageParameterValues 
objects which have the same set of adjustable parameters (as is common). 


Also, each AdjustmentGroup object can have associations to zero or more 
EqualParameters objects, which each identify two or more otherwise adjustable 
parameters that were considered to have the same values during that adjustment. Each 







OGC 06-055r1 


16 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


EqualParameters object can be associated from multiple AdjustmentGroup objects which 
have the same set of equal parameters (as is common). 


The ImageGeometry package for the GML image geopositioning metadata application 
schema specializes the GF_FeatureType package in ISO 19109, by defining more-
specific subclasses. By defining the ImageOrientation and AdjustedGroup classes as 
feature collections, identification metadata is inherited and additional properties for 
recording needed metadata can be easily added. By defining the AdjustableParameters 
and EqualParameters as features, identification metadata is inherited and additional 
properties for recording needed metadata can be easily added. 


This package also specializes the CC_CoordinateOperation package in ISO 19111, by 
defining more-specific subclasses of CC_ParameterValueGroup. By defining the 
ImageParameterValues class as a parameter value group, individual parameters and 
subsidiary parameter groups can be defined for different image geometry (or sensor) 
models. This package also uses parts of the GM_Geometry package from ISO 19107, 
avoiding new definitions of points, curves, and polygons. 


Table 5 — Defining elements of GIG_ImageOrientation class 


Description: Orientation metadata for one image. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: parameterValues to GIG_ImageParameterValues [0..*]  


(Association to group of parameter values determined for this image) 
 point to GOP_ObjectPoint [0..*]  


(Association to object point that falls within this image) 
 image from GIG_ImageParameterValues [1]  


(Association from group of parameter values determined for this image) 
 inImage from GOP_ImagePosition [1]  


(Association from position measured in this image) 
Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Pixels reference pixelsRefere
nce 


URI M 1 Reference to pixels of this image. 


 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 17
 


Table 6 — Defining elements of GIG_AdjustedGroup class 


Description: Definition of a group of one or more images that were adjusted as a group. a


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: adjustedImage to GIG_ImageParameterValues [1..*]  


(Association to image parameter values determined by this adjustment group) 
 adjustedPosition to GOP_ObjectPosition [0..*] 


(Association to object positions determined by this adjustment group) 
 adjustedCalibration to GSC_SensorParameterValues [0..*] 


(Association to group of sensor parameters determined by this adjustment group) 
 parameterErrorEstimates to GCM_CovarianceMatrix [1]  


(Association to error estimates for all the image parameter values from this adjustment) 
 footprint to GM_Polygon [0..1]  


(Association to approximate footprint of this adjustment group)
 equalParameters to GIG_EqualParameters [0..*]  


(Association to list of equal parameters for this adjusted group) 
 updates to GIG_AdjustedGroup [0..*]  


(Association to previous group updated by this adjustment group) 
 updates from GIG_AdjustedGroup [0..1]  


(Association from group that updated by this adjustment group) 
 inGroup from GIG_ImageParameterValues [0..1]  


(Association from group of image parameter values adjusted by this group) 
Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Adjustment 
status 


adjustmen
tStatus 


GIG_Adjustm
entStatus 


M 1 Status of this adjustment of this group of 
images. 


Time 
stamp 


timeStam
p 


DateTime C b 1 Time when this group adjustment was 
performed or last changed. 


Adjustment 
Summary 


adjustmen
tSummary 


GIG_Adjustm
entSummary 


C b 1 Summary of results of this adjustment. 


a A group of images can be either: 1) a strip of overlapping images collected in one pass, 2) a block of images 
covering a roughly rectangular area, 3) a group of blocks of images, or 4) a single image (for example, being 
adjusted to control points). 
b Condition: Include after adjustment performed. 


 







OGC 06-055r1 


18 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 7 — Defining elements of GIG_ImageParameterValues class 


Description: Group of parameter values for one adjustment of one image, including most exterior orientation 
parameters. 


Stereotype: Type 
Class attribute: Abstract 
Inheritance from: CC_ParameterValueGroup 
Association roles: image to GIG_ImageOrientation [1] 


(Association to the image orientation using this group of image parameter values) 
 parameterValue to GSC_SensorParameterValues [1] a 


(Inherited association to calibrated sensor parameter values used by this image parameter 
adjustment) 


 footprint to GM_Polygon [0..1]  
(Association to approximate footprint of this image using this group of image parameter values) 


 adjustableParameters to GIG_AdjustableParameters [1} 
(Association to list of adjustable parameters in this group) 


 group to CC_OperationParameterGroup [1] a    
(Inherited association to operation parameter group for this group of image parameter values) 


 inGroup to GIG_AdjustedGroup [0..1]  
(Association to the adjustment group that produced this group of image parameter values) 


 parameterValue from GSM_ObjectImageTransformation [1]  
(Association from object to image transformation that uses this set of parameter values) 


Public attributes:  No attributes inherited from CC_ParameterValueGroup 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Image parameter 
status 


imageParame
terStatus 


GIG_ImagePara
metersStatus 


M 1 Status of this group of image 
parameter values. 


Image accuracy 
summary 


imageAccura
cySummary 


GIG_ImageAccu
racy 


M 1 Summary of positional accuracy of 
this image using this group of 
parameter values. 


a Association inherited from CC_ParameterValueGroup. 
 
NOTE 1 All GM_Polygon objects reference the geodetic coordinate reference system of these polygons. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 19
 


Table 8 — Defining elements of GIG_MovingSensorParameters class 


Description: Group of image parameter values for one image collected by a sensor which moved during 
image collection. A concrete subclass of this abstract class must be specified for each 
specific moving image geometry (sensor) mathematical model, in an extension of this GML 
image geopositioning metadata application schema. 


Stereotype: Type 
Class attribute: Abstract 
Inheritance from: GIG_ImageParameterValues 
Association roles: sensorPath to GM_Curve [1]  


(Association to sensor path position coordinates during the collection period of one or more 
images) 


 sensorAttitudeHistory to GM_Curve [1]  
(Association to sensor attitude “history” during the collection period of one or more images) 


 Plus associations inherited from GIG_ImageParameterValues class 
Public attributes:  One attribute inherited from GIG_ImageParameterValues 


a This geopositioning metadata structure assumes that GM_Curve is interpreted to allow recording of the four 
quantities used to specify the attitude of an imaging sensor, in place of the three coordinates of an imaging sensor 
position. 


 
Table 9 — Defining elements of GIG_StationarySensorParameters class 


Description: Group of image parameter values for one image collected by a sensor which was stationary 
during image collection. A concrete subclass of this abstract class must be specified for each 
specific stationary image geometry (sensor) mathematical model, in an extension of this 
GML image geopositioning metadata application schema. 


Stereotype: Type 
Class attribute: Abstract 
Inheritance from: GIG_ImageParameterValues 
Association roles: sensorPosition to GM_Point [1]  


(Association to sensor position coordinates at the collection time) 
 sensorAttitude to GM_Point [1]  


(Association to sensor attitude at the collection time) 
 Plus associations inherited from GIG_ImageParameterValues class 
Public attributes:  One attribute inherited from GIG_ImageParameterValues 


a This geopositioning metadata structure assumes that GM_Point is interpreted to allow recording of the four 
quantities used to specify the attitude of an imaging sensor, in place of the three coordinates of an imaging sensor 
position. 


 
NOTE 2 All GM_Curve and GM_Point objects reference the geodetic coordinate reference system for 
these positions and attitudes 







OGC 06-055r1 


20 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 10 — Defining elements of GIG_ImageAccuracy class 


Description: Summary of the estimated positional accuracies of positions extracted using this image with 
this group of parameter values. 


Stereotype: DataType 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GIG_ImageParameterValues 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data 
type 


Oblig
ation 


Maximum 
occurrence 


Attribute description 


Circular 
error (90%) 


CE Length M 1 Estimated absolute (external) horizontal error in 
object positions extracted using this image. 


Linear error 
(90%) 


LE Length C a 1 Estimated absolute (external) elevation error in 
object positions extracted using this image with its 
stereo mate image in this adjusted group. 


Horizontal 
shear 


horizontal
Shear 


Length C b 1 Estimated (relative internal) horizontal difference 
between object positions extracted using this 
image and overlapping image(s) in this adjusted 
group. 


Vertical 
shear 


verticalSh
ear 


Length C c 1 Estimated (relative internal) elevation difference 
between object positions extracted using this 
image and overlapping image(s) in this adjusted 
group. 


a Condition: At least one stereo mate image is included in this adjusted group. 
b Condition: One or more overlapping images, excluding any stereo mate image(s), are included in this 
adjusted group. 
c Condition: One or more overlapping stereo pairs of images are included in this adjusted group. 


 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 21
 


Table 11 — Defining elements of GIG_AdjustmentSummary class 


Description: Summary of results of this adjustment. 
Stereotype: DataType 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GIG_AdjustedGroup 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Number of 
iterations 


numberIterat
ions 


PositiveIn
teger 


M 1 Number of adjustment computation 
iterations actually executed. 


Number of 
images 


numberImag
es 


PositiveIn
teger 


M 1 Number of images whose image parameters 
were adjusted. 


Number of 
tie points 


numberTieP
oints 


PositiveIn
teger 


M 1 Number of tie points whose image position 
coordinates were used, and object positions 
estimated. 


Number of 
control points 


numberCont
rolPoints 


PositiveIn
teger 


M 1 Number of control points whose object and 
image position coordinates were used, and 
object positions estimated. 


Number of 
check points 


numberChec
kPoints 


PositiveIn
teger 


M 1 Number of check points whose object 
positions were estimated using image 
position coordinates with final image 
parameters (but were not used in 
adjustment). 


All checks 
passed 


allChecksPa
ssed 


Boolean M 1 Adjustment results passed all required tests 
(or checks). 


Check passed checkPassed Character 
String  


C a N Adjustment results passed identified test. 


Check failed checkFailed Character 
String  


C b N Adjustment results failed identified test. 


a Condition: At least one identified test was passed by adjustment results. 
b Condition: At least one identified test was failed by adjustment results. 


 







OGC 06-055r1 


22 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 12 — Defining elements of GIG_AdjustableParameters class 


Description: List of the adjustable parameters in a group of image parameter values, for the adjustment 
group that includes these parameter values. 


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: adjustableParameters from GIG_ImageParameterValues [0..*]  


(Association from list of adjustable parameters in this group) 
Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Name name CharacterString M N Identifier of adjustable parameter. 
 


Table 13 — Defining elements of GIG_EqualParameters class 


Description: List of adjustable parameters in an adjustment group that are constrained to have equal 
values. 


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: equalParameters from GIG_AdjustedGroup [0..*]  


(Association from adjusted group using this list of equal parameters) 
Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Name name CharacterString M N Identifier of adjustable parameter 
constrained to have the same value 
as all others in this list. 


 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 23
 


Table 14 — Defining elements of GIG_ImageParametersStatus class 


Description: Status of this group of image parameter values. 
Stereotype: CodeList 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GIG_ImageParameterValues 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Estimated estimated CharacterString C 1 Contains initial estimated values. 
Adjusted adjusted CharacterString C 1 Contains computed adjusted values, not yet 


checked 
Validated validated CharacterString C 1 Contains validated (or checked) adjusted 


values. 
Invalid invalid CharacterString C 1 Contains values considered not valid for 


some reason (but object not yet deleted). 
Condition: One and only one of the listed attributes shall be supplied. 


 
Table 15 — Defining elements of GIG_AdjustmentStatus class 


Description: Status of this adjustment of this group of images. 
Stereotype: CodeList 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GIG_AdjustedGroup 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Estimated estimated CharacterString C 1 Contains initial estimated values. 
Adjusted adjusted CharacterString C 1 Contains computed adjusted values, not yet 


checked 
Validated validated CharacterString C 1 Contains validated (or checked) adjusted 


values. 
Invalid invalid CharacterString C 1 Contains values considered not valid for 


some reason (but object not yet deleted). 
Condition: One and only one of the listed attributes shall be supplied. 


 
8.3 XML encoding 


The GIG_ImageGeometry UML package is encoded in the igmImageGeometry.xsd XML 
Schema Document, which imports the feature.xsd, coordinateOperations.xsd, and 
geometryBasic2d.xsd XML Schema Documents from GML 3.2. The ISO 19107, 19109, 
and 19111 classes used in the UML model are encoded by the GML 3.2 XML elements 







OGC 06-055r1 


24 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


as listed in Table 3. The contents of the igmImageGeometry.xsd XML Schema Document 
shall be as specified in the attached file. 


9 Sensor calibration 


9.1 Introduction 


The sensor calibration part of the GML image geopositioning metadata application 
schema supports recording imaging sensor calibration parameter values, including 
multiple adjustments of interior orientation data. The sensor calibration parameter values 
are constant for many images collected by one image sensor, and are not frequently 
adjusted, so are recorded separate from the image parameter values specified above. This 
sensor calibration can be for many possible image geometry (or sensor) models that can 
be encoded using extensions of this Application Schema. 


9.2 UML model 


The UML class diagram for this package is shown in Figure 6, together with the classes 
that are inherited from. The four new classes defined in this GSC_SensorCalibration 
package are described in Table 16 through Table 16. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 25
 


0..1


GF_FeatureType


+ definition : CharacterString
+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


GSC_SensorParameterStatus
+ estimated
+ adjusted
+ validated
+ invalid


<<CodeList>>


CC_ParameterValueGroup
(from CC_CoordinateOperation)


<<Type>>


GSC_ImageSensor
<<Type>> GIG_ImageParameterValues


(from GIO_ImageGeometry)


<<Type>>


A concrete subclass of this 
abstract class shall be specified 
for each specific sensor model


GIG_AdjustmentGroup
(from GIO_ImageGeometry)


<<Type>>


GSC_SensorParameterValues
+ parameterStatus : GSC_SensorParameterStatus


<<Type>>


0..*


1


+sensorParameterValues 0..*


+sensor 1


1


0..*


+parameterValue (inherited)1


0..*


0..*


0..1


+adjustedCalibration 0..*


 
Figure 6 — GSC_SensorCalibration package UML class diagram 


This UML class diagram shows how multiple groups of sensor calibration parameter 
values can be recorded for each image sensor, with each group associated with one 
AdjustedGroup that produced it. That is, multiple SensorParameterValues objects are 
associated with the ImageSensor object for one imaging sensor. The 
SensorParameterValues abstract class records the parameter values for any sensor model. 







OGC 06-055r1 


26 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


The details specific to each specific sensor model are recorded as concrete subclasses of 
the SensorParameterValues abstract class, which shall be specified in extensions of this 
Application Schema. These classes should share more classes for common aspects (also 
not shown here). Wherever relevant, these specific image geometry models should build 
upon and adapt the Sensor Markup Language (SensorML), Transducer Markup Language 
(TML), and ISO 19130 (Sensor data model for imagery and gridded data). 


The GSC_SensorCalibration package for the GML image geopositioning metadata 
application schema specializes the GF_FeatureType package in ISO 19109, by defining 
more-specific subclasses. By defining the GSC_ImageSensor class as a feature, 
identification metadata is inherited and additional feature properties for recording needed 
metadata can be easily added. 


This package also specializes the CC_CoordinateOperation package in ISO 19111, by 
defining more-specific subclasses of CC_ParameterValueGroup. By defining the 
GSC_SensorParameterValues class as a parameter value group, individual parameters 
and subsidiary parameter groups can be defined for different image geometry (or sensor) 
models. 


Table 16 — Defining elements of GSC_ImageSensor class 


Description: Calibration (interior orientation) data for one imaging sensor. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: sensorParameterValues to GSC_SensorParameterValues [0..*]  


(Association to group of parameter values determined for this sensor) 
 sensor from GSC_SensorParameterValues [1] 


(Association from group of parameter values determined for this sensor) 
Public attributes:  Two attributes inherited from GF_FeatureType 


 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 27
 


Table 17 — Defining elements of GSC_SensorParameterValues class 


Description: Generic set of calibrated parameter values for one imaging sensor and sensor configuration, 
including most interior orientation parameters. 


Stereotype: Type 
Class attribute: Abstract 
Inheritance from: CC_ParameterValueGroup 
Association roles: sensor to GSC_ImageSensor [1] 


(Association to image sensor for this group of parameter values) 
 group to CC_OperationParameterGroup [1]    


(Inherited association to operation parameter group for this group of sensor parameter 
values) 


 sensorParameterValues from GIG_ImageParameterValues [1]  
(Association from image parameter adjustment to calibrated imaging sensor parameter used) 


 adjustedCalibration from GIG_AdjustedGroup [0..1] 
(Association to group of sensor parameters determined by this adjustment group) 


 sensorParameterValues from GSC_Sensor [0..*]  
(Association from sensor that uses this group of sensor parameter values) 


Public attributes:  No attributes inherited from CC_ParameterValueGroup, plus: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Sensor 
parameter status 


parameterSt
atus 


GSC_SensorP
arameterStatus 


M 1 Status of this group of sensor 
parameter values. 


 
Table 18 — Defining elements of GSC_SensorParameterStatus class 


Description: Status of this group of sensor parameter values. 
Stereotype: CodeList 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GIG_SensorParameterValues 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Estimated estimated CharacterString C 1 Contains initial estimated values. 
Adjusted adjusted CharacterString C 1 Contains computed adjusted values, not yet 


checked 
Validated validated CharacterString C 1 Contains validated (or checked) adjusted 


values. 
Invalid invalid CharacterString C 1 Contains values considered not valid for 


some reason (but object not yet deleted). 
Condition: One and only one of the listed attributes shall be supplied. 


 
9.3 XML encoding 


The GIG_SensorCalibration UML package is encoded in the igmSensorCalibration.xsd 
XML Schema Document, which imports the coordinateOperations.xsd XML Schema 







OGC 06-055r1 


28 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Document from GML 3.2. The ISO 19107, 19109, and 19111 classes used in the UML 
model are encoded by the GML 3.2 XML elements as listed in Table 3. The contents of 
the igmSensorCalibration.xsd XML Schema Document shall be as specified in the 
attached file. 


10 Object point 


10.1 Introduction 


The object point part of the GML image geopositioning metadata application schema 
records object point positions in one of more images and optional object (or ground) 
coordinates. These object points can be tie points, control points, or check points. A 
control point or check point has a measured position with position error statistics in one 
or more images, and a known position with error statistics in some geodetic Coordinate 
Reference System (CRS). A tie point has a measured position with error statistics in two 
or more images, but not a known position in any geodetic CRS. All types of points can 
have the estimated object position computed from the measured positions in two or more 
images. 


10.2 UML model 


The UML class diagram for this package is shown in Figure 7 and Figure 8, together with 
the classes that are inherited from. The new classes defined in this GOP_ObjectPoint 
package are described in Table 19 through Table 25. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 29
 


GF_FeatureType


+ definition : CharacterString
+ typeName : LocalName


(from GF_GeneralFeature)


<<Metaclass>>


SC_CRS
(from SC_CoordinateReferenceSystems)


GM_Point
(from GM_Geometry)


<<Type>>


1


0..*


+crs1


0..*


GCM_CovarianceMatrix
(from GCM_CovarianceMatrix)


<<Type>>


GOP_ObjectPosition
+ groundPositionStatus : GOP_ObjectPositionStatus
+ dimension : Integer


<<Type>>


1


1


+position1


1


1


0..*


+positionErrorEstimates1


0..*


GOP_ImagePosition
+ imagePositionStatus : GOP_ImagePositionStatus


<<Type>>


1


1


+position 1


1


1


0..1


+postionErrorEstimates


1


0..1


GIG_ImageOrientation
(from GIO_ImageGeometry)


<<Type>>


1


0..*


+inImage 1


0..*


GOP_ObjectPoint
+ pointType : GOP_PointType


<<Type>>


0..*


1


+objectPosition0..*


+point1


0..*


1


+imagePosition0..*


1


0..*


0..*


+point0..*


0..*


GOP_ IdentificationImage
+ patchPixels : TBD


<<Type>>


0..*


1


+identificationImage 0..*


1


GeodeticCRS
(from SC_CoordinateReferenceSystems)


SC_DerivedCRS
(from SC_CoordinateReferenceSystems)


0..*


1


+patchCRS0..*


1


1


0..*


+baseCRS1


0..*


 
Figure 7 — GOP_ObjectPoint package UML class diagram, part 1 







OGC 06-055r1 


30 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


GOP_PointType
+ tiePoint
+ controlPoint
+ checkPoint


<<CodeList>>


GOP_ImagePositionStatus
+ estimated
+ measured
+ validated
+ removed
+ invalid


<<CodeList>>
GOP_ObjectPositionStatus


+ measured
+ removed
+ estimated
+ validated
+ invalid


<<CodeList>>


 
Figure 8 — GOP_ObjectPoint package UML class diagram, part 2 


This UML class diagram shows how flexible object (or ground) point metadata is 
structured. A ObjectPoint object records the identification, type, and status of each 
recorded point. Each ObjectPoint object is associated to zero or more ObjectPosition 
objects that record object position coordinates for this point, using one GM_Point object. 
Similarly, each ObjectPoint object is associated to zero or more ImagePosition objects 
that record position coordinates of this point measured in different images, using one 
GM_Point. Also, each ObjectPoint is associated to zero or more IdentificationImage 
objects that record image patches for use in point identification within another image. 


Both ObjectPosition and ImagePosition objects are associated with the CovarianceMatrix 
that records position error estimates. Each GM_Point references its Coordinate Reference 
System (SC_CRS), and each IdentificationImage references the image patch plus the 
SC_DerivedCRS for the image patch grid. That SC_DerivedCRS references its baseCRS, 
which is always a GeodeticCRS. More specifically, each GM_Point for a ObjectPosition 
references the GeodeticCRS for that point position, and each GM_Point for an 
ImagePosition references the ImageCRS for positions in that image. 


The GOP_ObjectPoint package for the GML image geopositioning metadata application 
schema specializes the GF_FeatureType package in ISO 19109, by defining more-
specific subclasses. The GOP_ObjectPoint class is a feature collection, and the 
GOP_ImagePosition, GOP_ObjectPosition, and GOP_IdentificationImage classes are 
considered features. By subclassing GF_FeatureType, identification metadata is inherited 
and additional feature properties for recording needed metadata can be easily added. This 
package also uses the GM_Point class from ISO 19107, avoiding new definitions of point 
positions. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 31
 


Table 19 — Defining elements of GOP_ObjectPoint class 


Description: Description of one object (or ground) point, including its identification. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: objectPosition GOP_ObjectPosition [0..*] a 


(Association to object position for this point) 
 imagePosition to GOP_ImagePosition [0..*] 


(association to image position for this point) 
 identificationImage to GOP_IdentificationImage [0..*] b 


(Association to identification image for this object point) 
 point from GIG_ImageOrientation [0..*] 


(Association from image containing this point) 
Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Object point 
type 


pointType GOP_ObjectPoi
ntType 


M 1 Type of this object point. 


a Multiple GOP_ObjectPosition objects can be associated to provide estimated positions from different 
adjustments. 
b Multiple GOP_IdentificationImage objects can be associated to identify one object point when those image 
patches have significantly different object (or ground) resolutions or other image appearance differences. 


 
Table 20 — Defining elements of GOP_ImagePosition class 


Description: Measured image position for a object point. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: inImage to GIG_ImageOrientation [1] 


(Association to image in which this image position was measured) 
 position to GM_Point [1]  


(Association to measured image position coordinates) 
 positionErrorEstimates to GCM_CovarianceMatrix [1] 


(Association to absolute position error estimates for this image position) 
 imagePosition from GOP_ObjectPoint [0..*]    


(Association from object point that uses this image position) 
Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Image position 
status 


imagePositi
onStatus 


GSC_ImagePo
sitionStatus 


M 1 Status of this image position. 


 







OGC 06-055r1 


32 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 21 — Defining elements of GOP_ObjectPosition class 


Description: Object (or ground) position for an object point. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: point to GOP_ObjectPoint [1] 


(Association to description of this object point) 
 position to GM_Point [1]  


(Association to object position coordinates) 
 positionErrorEstimates to GCM_CovarianceMatrix [1] 


(Association to position error estimates for this object position, including absolute errors of 
this object position and errors relative to other object positions) 


 objectPosition from GOP_ObjectPoint [0..*]  
(Association from object point that uses this object position) 


 adjustedPosition from GIG_AdjustedGroup [0..1] 
(Association from adjustment group that determined this object position) 


Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Object position 
status 


ObjectPositi
onStatus 


GSC_ObjectP
ositionStatus 


M 1 Status of this object position. 


Dimension dimension Integer M 1 Number of object position 
coordinates that are known. 


 
 Table 22 — Defining elements of GOP_IdentificationImage class 


Description: Image patch identifying one object point, located at the center of this patch. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GF_FeatureType 
Association roles: patchCRS to SC_DerivedCRS [1]  


(Association to grid CRS for this image patch) a 
 identification from GOP_ObjectPosition [0..*] 


(Association from object point that uses this image patch for identification) 
Public attributes:  Two attributes inherited from GF_FeatureType, plus: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Patch pixels patchPixels TBD M 1 Image pixels in identification 
image patch. 


a This DerivedCRS is used for a pixel grid that is defined in a geodetic CRS that is the baseCRS of this 
DerivedCRS. 


 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 33
 


 Table 23 — Defining elements of GOP_ObjectPointType class 


Description: Type of this object point. 
Stereotype: CodeList 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GOP_ObjectPoint 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Tie point tiePoint CharacterString C 1 Point with measured position in 
one or more images, used to 
geoposition those images. 


Control point controlPont CharacterString C 1 Point with known object position 
used to geoposition one or more 
images. 


Check point checkPoint CharacterString C 1 Point with known object position 
used to check the geopositioning 
of one or more images. 


Condition: One and only one of the listed attributes shall be supplied. 
 


Table 24 — Defining elements of GOP_ImagePositionStatus class 


Description: Status of this image position. 
Stereotype: CodeList 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GOP_ImagePosition 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Estimated estimated CharacterString C 1 Contains estimated position. 
Measured measured CharacterString C 1 Contains position measured in image, not 


yet checked. 
Validated validated CharacterString C 1 Contains validated (or checked) measured 


position. 
Removed removed CharacterString C 1 Contains position automatically detected as 


having a blunder, and removed from use in 
later triangulation computation iterations. 


Invalid invalid CharacterString C 1 Contains position considered not valid for 
some reason (but object not yet deleted). 


Condition: One and only one of the listed attributes shall be supplied. 
 







OGC 06-055r1 


34 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 25 — Defining elements of GOP_ObjectPositionStatus class 


Description: Status of this object position. 
Stereotype: CodeList 
Class attribute: Concrete 
Inheritance from: (none) 
Association roles: (none) 
Used by: GOP_ObjectPosition 
Public attributes:   


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Measured measured CharacterString C 1 Contains measured and checked position. 
Removed removed CharacterString C 1 Contains position automatically detected as 


having a blunder, and removed from use in 
later triangulation computation iterations. 


Estimated estimated CharacterString C 1 Contains position estimated by 
computation. 


Validated validated CharacterString C 1 Contains validated (or checked) estimated 
position. 


Invalid invalid CharacterString C 1 Contains position considered not valid for 
some reason (but object not yet deleted). 


Condition: One and only one of the listed attributes shall be supplied. 
 
10.3 XML encoding 


The GOP_ObjectPoint UML package is encoded in the igmObjectPoint.xsd XML 
Schema Document, which imports the coordinateReferenceSystems.xsd XML Schema 
Documents from GML 3.2. The ISO 19107 and 19109 classes used in the UML model 
are encoded by the GML 3.2 XML elements as listed in Table 3. The contents of the 
igmObjectPoint.xsd XML Schema Document shall be as specified in the attached file. 


11 Covariance matrix 


11.1 Introduction 


The covariance matrix part of the GML image geopositioning metadata application 
schema records combined absolute and relative position error estimates. The error 
statistics are in the form of covariance matrices, also called variance-covariance matrices, 
together with the (most-likely) values to which the covariance matrices apply. These 
covariance matrices normally represent correlations between the accuracies of different 
coordinates, parameters, and positions. 


These covariance matrices contain the variance of each adjusted value estimated in the 
triangulation, and the covariances between these values. These estimated values include 
various parameters in georeferencing coordinate transformations, including the camera 
3D position coordinates and 3D orientation angles. The estimated values also include 
point position coordinates in object CRSs. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 35
 


NOTE  Such covariance matrices for single point coordinates are described in Table D.33 of [ISO/TS 
19138 draft n1934]. 


11.2 UML model 


The UML class diagram for the GCM_CovarianceMatrix package is shown in Figure 9, 
together with the ISO 19115 classes that are inherited from. The new classes defined in 
this GCM_CovarianceMatrix package are described in through Table 26 through Table 
33. 







OGC 06-055r1 


36 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


GCM_CovarianceMatrix
+ measureIdentification [0] : MD_IdentifierCharacterString
+ evaluationMethodType [0] : DQ_EvaluationMethodType
+ evaluationProcedure [0] : CI_Citation
+ dateTime [0] : DateTime
+ matrixSize : PositiveInteger
+ adjustedParameters : Sequence<URI>


<<Type>>


DQ_Element


+ nameOfMeasure [0..1] : CharacterString
+ measureIdentification [0..1] : MD_IdentifierCharacterString
+ measureDescription [0..1] : CharacterString
+ evaluationMethodType [0..1] : DQ_EvaluationMethodType
+ evaluationProcedure [0..1] : CI_Citation
+ dateTime [0..1] : DateTime
+ result [1..2] : DQ_Result


(from DQ_DataQual ity)


DQ_PositionalAccuracy
(from DQ_DataQual ity)


GCM_FullCovarianceMatrix
<<Type>>


GCM_DiagonalCovarianceMatrix
+ result [1] : GCM_CellValues


<<Type>>


GCM_SparseCovarianceMatrix
<<Type>>


GCM_BandedCovarianceMatrix
<<Type>>


DQ_Result
(from DQ_DataQuality)


DQ_QuantitativeResult


+ valueType [0..1] : Record
+ valueUnit [1..*] : UnitOfMeasure
+ errorStatistic [0..1] : CharacterString
+ value [1..*] : Record


(from DQ_DataQuality)


GCM_CellValues
+ valueType [0] : Record
+ value [1..*] : Sequence<Number>


<<Type>>


GCM_NormalCovarianceMatrix
+ result [1] : GCM_PositionedCellValues


<<Type>>


GCM_PositionedCellValues
+ firstRow : PositiveInteger
+ firstColumn : PositiveInteger


<<Type>>


 


Figure 9 — GCM_CovarianceMatrix package UML class diagram 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 37
 


NOTE  This GCM_CovarianceMatrix package class diagram shows all the attributes in the 
DQ_Element and DQ_QuantitativeResult classes. However, some of the optional attributes in each are not 
expected to be useful in this application, and are thus prohibited in the GCM_CovarianceMatrix and 
GCM_CellValues classes. 


This UML class diagram shows how multiple types of covariance matrices can be 
efficiently recorded. The CovarianceMatrix package (for the GML image geopositioning 
metadata application schema) specializes the DQ_DataQuality package specified in ISO 
19115, by defining more-specific subclasses of DQ_PositionalAccuracy and 
DQ_QuantitativeResult. 


The CellValues concrete class restricts the DQ_QuantitativeResult concrete class for 
efficiently recording many ordered sequences of values for adjacent covariance matrix 
cells. Instead of a general record, each “value” attribute is an ordered sequence of values 
of adjacent covariance matrix cells. In the PositionedCellValues subclass of the Cell 
Values class, the cell position of the first value is specified by the firstRow and 
firstColumn indices for this covariance matrix. 


The CovarianceMatrix abstract class restricts and extends the DQ_PositionalAccuracy 
abstract class for combined absolute external and relative internal positional accuracies. 
This class adds the size of this matrix and an ordered sequence of references to the 
parameters for this covariance matrix. The Diagonal-, Full-, Sparse-, and Banded-
CovarianceMatrix concrete subclasses are designed to efficiently record different matrix 
types. The Full-, Sparse-, and Banded-CovarianceMatrix concrete subclasses are 
specialized subclasses of the NormalVovarianceMatrix abstract subclass of the 
CovarianceMatrix class, which contain the same contents but specify how multiple 
PositionedGridCells objects shall be used. 


NOTE   Additional concrete subclasses can be added to this Application Schema for more efficient 
encoding of covariance matrices with other properties. 







OGC 06-055r1 


38 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 26 — Defining elements of GCM_CellValues class 


Description: Ordered sequence of values for adjacent covariance matrix cells. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: DQ_QuantitativeResult 
Association roles: (none) 
Public attributes:  (All four listed attributes are inherited from DQ_QuantitativeResult, with two attributes 


being restricted here. 


Attribute 
name 


UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


valueType valueType RecordType 0 0 a Value type for reporting a data quality 
result. 


valueUnit valueUnit UnitOfMeasure M N b Value unit for reporting a data quality 
result. c 


errorStatistic errorStatistic CharacterString 
 


0 1 Statistical method used to determine 
the value. d 


value value Sequence of 
Number e 


M N Ordered list of covariance matrix cell 
values. 


a Inclusion of the valueType attribute is prohibited in this GCM_CellValues subclass of 
DQ_QuantitativeResult. 
b In this GCM_CellValues subclass of DQ_QuantitativeResult, the valueUnit needs to be repeated, and that 
needed change in ISO 19115 is assumed here. 
c In this GCM_CellValues class, these units shall be an ordered list of the units for each covariance matrix row, 
with the same units for each column, and with the unit for each matrix cell being the product of the corresponding 
row and column units. 
d In this GCM_CellValues class, this attribute is allowed but is not expected to be included. 
e Inherited from DQ_QuantitativeResult, but specialized from Record type to Sequence of Number type. 


 
Table 27 — Defining elements of GCM_PositionedCellValues class 


Description: Ordered sequence of values for adjacent covariance matrix cells with starting cell position. 
Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GCM_CellValues 
Association roles: (none) 
Public attributes:  Four attributes inherited from GCM_CellValues, plus: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


First row firstRow Positive 
Integer 


M 1 Index of row in covariance matrix 
of first cell value included. 


First column firstColumn Positive 
Integer 


M 1 Index of column in covariance 
matrix of first cell value included. 


 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 39
 


Table 28 — Defining elements of GCM_CovarianceMatrix class 


Description: Generic covariance matrix error estimates, usually for statistically-correlated sets of 
parameters, containing ordered list of parameter names for matrix rows and columns. 


Stereotype: Type 
Class attribute: Abstract 
Inheritance from: DQ_PositionalAccuracy 
Association roles: parameterErrorEstimates from GIG_ImageParameterValues [1]  


(Association from set of image parameter values for these error estimates) 
 positionErrorEstimates from GOP_ImagePosition [1] 


(Association from image position for these absolute and relative position error estimates) 
 positionErrorEstimates from GOP_ObjectPosition [1] 


(Association to absolute and relative position error estimates for this object position) 
Public attributes:  (The first eight optional attributes listed below are inherited from DQ_Element through 


DQ_PositionalAccuracy, with four of these attributes being prohibited here.) 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


nameOfMeasure nameOfMea
sure 


CharacterString O N Name of the test applied to the 
data. b 


measureIdentific
ation 


measureIden
tification 


MD_Identifier O 0 a Code identifying a registered 
standard procedure. 


measureDescript
ion 


measureDes
cription 


CharacterString O 1 Description of the measure. b 


evaluationMetho
dType 


evaluationM
ethodType 


DQ_Evaluation
MethodType 


O 0 a Type of method used to evaluate 
quality of the dataset. 


evaluationMetho
dDescription 


evaluationM
ethodDescri
ption 


CharacterString O 1 Description of the evaluation 
method. b 


evaluationProce
dure 


evaluationPr
ocedure 


CI_Citation O 0 a Reference to the procedure 
information. 


dateTime dateTime DateTime O 0 a Date or range of dates on which a 
data quality measure was applied. 


result result DQ_Result M 1 Value (or set of values) obtained 
from applying a data quality 
measure. 


Matrix size matrixSize PositiveInteger M 1 Number or rows and columns in 
this covariance matrix. 


Adjusted 
parameter 


adjustedPara
meter 


URI M N Reference to adjusted parameter 
whose estimated error is 
represented by one row and one 
column in covariance matrix. 


a Inclusion of this attribute is prohibited in this GCM_CovarianceMatrix class subclass of the 
DQ_PositionalAccuracy subclass of the DQ_Element class. 
b In this GCM_CovarianceMatrix class, this attribute is allowed but is not expected to be included. 


 







OGC 06-055r1 


40 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Table 29 — Defining elements of GCM_DiagonalCovarianceMatrix class 


Description: Covariance matrix containing non-zero values for only the matrix diagonal cells. (Such a 
matrix is for a statistically-uncorrelated set of parameters). For this Diagonal Covariance 
Matrix, there shall be one “value” attribute in the GCM_CellValues class, which shall 
contain an ordered list of the values of only the cells on the matrix diagonal. 


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GCM_CovarianceMatrix 
Association roles: (inherited from GCM_CovarianceMatrix) 
Public attributes:  Ten attributes inherited from GCM_CovarianceMatrix, with one of these attributes being 


restricted as follows: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Result result  GCM_CellVal
ues a 


M 1 b Ordered sequence of values for 
adjacent covariance matrix cells. 


a Restricted to GCM_CellValues subclass of the DQ_QuantitativeResult class. 
b Restricted to one occurrence here. 


 
Table 30 — Defining elements of GCM_NormalCovarianceMatrix class 


Description: Generic covariance matrix error estimates, for statistically-correlated sets of parameters. 
Stereotype: Type 
Class attribute: Abstract 
Inheritance from: GCM_CovarianceMatrix 
Association roles: (inherited from GCM_CovarianceMatrix) 
Public attributes:  Ten attributes inherited from GCM_CovarianceMatrix, with one of these attributes being 


restricted as follows: 


Attribute name UML 
identifier 


Data type Oblig
ation 


Maximum 
occurrence 


Attribute description 


Result result  GCM_Position
edCellValues a 


M 1 b Ordered sequence of values for 
adjacent covariance matrix cells, 
with position of first cell. 


a Restricted to GCM_PositionedCellValues subclass of the GCM_CellValues subclass of the 
DQ_QuantitativeResult. 
b Restricted to one occurrence here. 


 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 41
 


Table 31 — Defining elements of GCM_FullCovarianceMatrix class 


Description: Covariance matrix containing the values for all matrix cells, for a symmetric matrix. For this 
Full Covariance Matrix, one “result” attribute using the GCM_PositionedCellValues class 
shall be included for each matrix row. Each “result” attribute shall contain the value of one 
diagonal matrix cell, followed by the values of all other cells to the right in that matrix row 
(and down in that matrix column). Each sequence shall end when several sequential zero cell 
values are reached or the right edge of this matrix is reached. 


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GCM_NormalCovarianceMatrix 
Association roles: (inherited from GCM_CovarianceMatrix) 
Public attributes:  Ten attributes inherited from GCM_NormalCovarianceMatrix 


 
Table 32 — Defining elements of GCM_SparseCovarianceMatrix class 


Description: Covariance matrix containing only or mostly the values of non-zero matrix cells, for a 
symmetric matrix. For this Sparse Covariance Matrix, each “result” attribute shall contain the 
value of one non-zero matrix cell, followed by the values of other cells to the right in that 
matrix row. Each sequence shall end when several sequential zero cell values are reached or 
the right edge of this matrix is reached. The “result” attribute using the 
GCM_PositionedCellValues class shall contain a list of the values of this sequence of 
(mostly non-zero) matrix cells. 


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GCM_NormalCovarianceMatrix 
Association roles: (inherited from GCM_CovarianceMatrix) 
Public attributes:  Ten attributes inherited from GCM_NormalCovarianceMatrix 


 
Table 33 — Defining elements of GCM_BandedCovarianceMatrix class 


Description: Covariance matrix containing the values of all non-zero matrix cells, for a symmetric matrix 
with only zero values in the top-right and bottom-left corners. For this Banded Covariance 
Matrix, one “result” attribute using the GCM_PositionedCellValues class shall be included 
for each matrix row. Each “result” attribute shall contain the value of one diagonal matrix 
cell, followed by the values of other cells to the right in that matrix row (and down in that 
matrix column). Each sequence shall end when there are no more non-zero cell values in that 
row or the right edge of this matrix is reached. 


Stereotype: Type 
Class attribute: Concrete 
Inheritance from: GCM_NormalCovarianceMatrix 
Association roles: (inherited from GCM_CovarianceMatrix) 
Public attributes:  Ten attributes inherited from GCM_NormalCovarianceMatrix 


 
11.3 XML encoding 


The GCM_CovarianceMatrix UML package is encoded in the igmCovarianceMatrix.xsd 
XML Schema Document, which imports the TBD XML Schema Document from ISO 
19139. The ISO 19115 classes used in the UML model are encoded by the ISO 19139 







OGC 06-055r1 


42 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


XML elements as listed in Table 3. The contents of the igmCovarianceMatrix.xsd XML 
Schema Document shall be as specified in the attached file. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 43
 


Annex A 
(normative) 


 
Abstract test suite 


An abstract test suite is not provided in this draft version of this Implementation 
Specification, but should be included in version 1.0.0. 







OGC 06-055r1 


44 Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved.
 


Annex B 
(normative) 


 
XML Schema Documents 


In addition to this document, this specification includes several normative XML Schema 
Documents. These XML Schema Documents are bundled in a zip file with the present 
document. After OGC acceptance of a Version 1.0.0 of this specification, these XML 
Schema Documents will also be posted online at the URL 
http://schemas.opengeospatial.net/igs/1.0.0. In the event of a discrepancy between the 
bundled and online versions of the XML Schema Documents, the online files shall be 
considered authoritative. 


The image geopositioning metadata application schema specified in this document use 
five specified XML Schema Documents included in the zip file with this document. 
These XML Schema Documents roughly match the five UML packages described in 
Clauses 7 through 11, and are named: 


igmSensorModel.xsd 


igmImageGeometry.xsd 


igmSensorCalibration.xsd 


igmObjectPoint.xsd 


igmCovarianceMatrix.xsd 


These XML Schema Documents import and build upon parts of many of the GML 3.2 
XML Schema Documents specified in [OGC 05-105]. 


All these XML Schema Documents contain documentation of the meaning of each 
element and attribute, and this documentation shall be considered normative as specified 
in Subclause 11.6.3 of [OGC 05-008]. 







OGC 06-055r1 


Copyright © 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 45
 


Bibliography 


[1] ASPRS 2004, Manual of Photogrammetry, Fifth Edition, American Society for 
Photogrammetry and Remote Sensing, 2004 


[2] ISO 19130 draft n1772, Geographic information - Sensor data model for imagery 
and gridded data 


[3] ISO/TS 19138 draft n2027, Geographic information — Data quality measures 


[4] OGC 00-115, OGC Abstract Specification Topic 15: Image Exploitation Services 


[5] OGC 00-116, OGC Abstract Specification Topic 16: Image Coordinate 
Transformation Services 


[6] OGC 05-095r1, GML 3.1.1 common CRSs profile 


[7] OGC 05-096r1, GML 3.1.1 grid CRSs profile 


[8] OGC 05-TBD, Transducer Markup Language (TML) 


[9] OGC 05-TBD, Sensor Markup Language (SensorML) 


[10] USIGS Glossary 


 





		Scope

		Compliance

		Normative references

		Terms and definitions

		Conventions

		Abbreviated terms

		UML notation



		Image geopositioning metadata overview

		Image geopositioning metadata

		UML model packages

		GML application schema



		Sensor model

		Introduction

		UML model

		XML encoding



		Image geometry

		Introduction

		UML model

		XML encoding



		Sensor calibration

		Introduction

		UML model

		XML encoding



		Object point

		Introduction

		UML model

		XML encoding



		Covariance matrix

		Introduction

		UML model

		XML encoding







06-055r1 Geopositioning Metadata AS Folder/gml/basicTypes.xsd
 
	 
		 basicTypes.xsd
		 See ISO/DIS 19136 8.2.
W3C XML Schema provides a set of built-in “simple” types which define methods for representing values as literals without internal markup.  These are described in W3C XML Schema Part 2:2001.  Because GML is an XML encoding in which instances are described using XML Schema, these simple types shall be used as far as possible and practical for the representation of data types.  W3C XML Schema also provides methods for defining 
-	new simple types by restriction and combination of the built-in types, and 
-	complex types, with simple content, but which also have XML attributes.  
In many places where a suitable built-in simple type is not available, simple content types derived using the XML Schema mechanisms are used for the representation of data types in GML.  
A set of these simple content types that are required by several GML components are defined in the basicTypes schema, as well as some elements based on them. These are primarily based around components needed to record amounts, counts, flags and terms, together with support for exceptions or null values.
	
	 
		 
			 gml:NilReasonType defines a content model that allows recording of an explanation for a void value or other exception.
gml:NilReasonType is a union of the following enumerated values:
-	inapplicable there is no value
-	missing the correct value is not readily available to the sender of this data. Furthermore, a correct value may not exist
-	template the value will be available later
-	unknown the correct value is not known to, and not computable by, the sender of this data. However, a correct value probably exists
-	withheld the value is not divulged
-	other:text other brief explanation, where text is a string of two or more characters with no included spaces
and
-	anyURI which should refer to a resource which describes the reason for the exception
A particular community may choose to assign more detailed semantics to the standard values provided. Alternatively, the URI method enables a specific or more complete explanation for the absence of a value to be provided elsewhere and indicated by-reference in an instance document.
gml:NilReasonType is used as a member of a union in a number of simple content types where it is necessary to permit a value from the NilReasonType union as an alternative to the primary type.
		
		 
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
			 
				 
					 
				
			
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:SignType is a convenience type with values “+” (plus) and “-“ (minus).
		
		 
			 
			 
		
	
	 
		 
			 Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.
		
		 
	
	 
		 
			 Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.
		
		 
	
	 
		 
			 Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.
		
		 
	
	 
		 
			 Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.
		
		 
	
	 
		 
			 Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.
		
		 
	
	 
		 
			 gml:CodeType is a generalized type to be used for a term, keyword or name.
It adds a XML attribute codeSpace to a term, where the value of the codeSpace attribute (if present) shall indicate a dictionary, thesaurus, classification scheme, authority, or pattern for the term.
		
		 
			 
				 
			
		
	
	 
		 
			 gml:CodeWithAuthorityType requires that the codeSpace attribute is provided in an instance.
		
		 
			 
				 
			
		
	
	 
		 
			 gml:MeasureType supports recording an amount encoded as a value of XML Schema double, together with a units of measure indicated by an attribute uom, short for “units Of measure”. The value of the uom attribute identifies a reference system for the amount, usually a ratio or interval scale.
		
		 
			 
				 
			
		
	
	 
		 
			 The simple type gml:UomIdentifer defines the syntax and value space of the unit of measure identifier.
		
		 
	
	 
		 
			 This type specifies a character string of length at least one, and restricted such that it must not contain any of the following characters: “:” (colon), “ “ (space), (newline), (carriage return), (tab). This allows values corresponding to familiar abbreviations, such as “kg”, “m/s”, etc. 
It is recommended that the symbol be an identifier for a unit of measure as specified in the “Unified Code of Units of Measure" (UCUM) (http://aurora.regenstrief.org/UCUM). This provides a set of symbols and a grammar for constructing identifiers for units of measure that are unique, and may be easily entered with a keyboard supporting the limited character set known as 7-bit ASCII. ISO 2955 formerly provided a specification with this scope, but was withdrawn in 2001. UCUM largely follows ISO 2955 with modifications to remove ambiguities and other problems.
		
		 
			 
		
	
	 
		 
			 This type specifies a URI, restricted such that it must start with one of the following sequences: “#”, “./”, “../”, or a string of characters followed by a “:”. These patterns ensure that the most common URI forms are supported, including absolute and relative URIs and URIs that are simple fragment identifiers, but prohibits certain forms of relative URI that could be mistaken for unit of measure symbol . 
NOTE	It is possible to re-write such a relative URI to conform to the restriction (e.g. “./m/s”).
In an instance document, on elements of type gml:MeasureType the mandatory uom attribute shall carry a value corresponding to either 
-	a conventional unit of measure symbol,
-	a link to a definition of a unit of measure that does not have a conventional symbol, or when it is desired to indicate a precise or variant definition.
		
		 
			 
		
	
	 
		 
			 This type is deprecated for tuples with ordinate values that are numbers.
CoordinatesType is a text string, intended to be used to record an array of tuples or coordinates. 
While it is not possible to enforce the internal structure of the string through schema validation, some optional attributes have been provided in previous versions of GML to support a description of the internal structure. These attributes are deprecated. The attributes were intended to be used as follows:
Decimal	symbol used for a decimal point (default=”.” a stop or period)
cs        	symbol used to separate components within a tuple or coordinate string (default=”,” a comma)
ts        	symbol used to separate tuples or coordinate strings (default=” “ a space)
Since it is based on the XML Schema string type, CoordinatesType may be used in the construction of tables of tuples or arrays of tuples, including ones that contain mixed text and numeric values.
		
		 
			 
				 
				 
				 
			
		
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 A type for a list of values of the respective simple type.
		
		 
	
	 
		 
			 gml:CodeListType provides for lists of terms. The values in an instance element shall all be valid according to the rules of the dictionary, classification scheme, or authority identified by the value of its codeSpace attribute.
		
		 
			 
				 
			
		
	
	 
		 
			 gml:CodeOrNilReasonListType provides for lists of terms. The values in an instance element shall all be valid according to the rules of the dictionary, classification scheme, or authority identified by the value of its codeSpace attribute. An instance element may also include embedded values from NilReasonType. It is intended to be used in situations where a term or classification is expected, but the value may be absent for some reason.
		
		 
			 
				 
			
		
	
	 
		 
			 gml:MeasureListType provides for a list of quantities.
		
		 
			 
				 
			
		
	
	 
		 
			 gml:MeasureOrNilReasonListType provides for a list of quantities. An instance element may also include embedded values from NilReasonType. It is intended to be used in situations where a value is expected, but the value may be absent for some reason.
		
		 
			 
				 
			
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/coordinateOperations.xsd
 
	 
		 coordinateOperations.xsd
		 See ISO/DIS 19136 13.6.
The spatial or temporal coordinate operations schema components can be divided into five logical parts, which define elements and types for XML encoding of the definitions of:
-	Multiple abstract coordinate operations
-	Multiple concrete types of coordinate operations, including Transformations and Conversions
-	Abstract and concrete parameter values and groups
-	Operation methods
-	Abstract and concrete operation parameters and groups
These schema component encodes the Coordinate Operation package of the UML Model for ISO 19111 Clause 11.
	
	
	 
	 
	 
	
	 
		 
			 gml:AbstractCoordinateOperation is a mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values shall be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.
The optional coordinateOperationAccuracy property elements provide estimates of the impact of this coordinate operation on point position accuracy.
		
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
		 
			 gml:operationVersion is the version of the coordinate transformation (i.e., instantiation due to the stochastic nature of the parameters). Mandatory when describing a transformation, and should not be supplied for a conversion.
		
	
	
	 
		 
			 gml:coordinateOperationAccuracy is an association role to a DQ_PositionalAccuracy object as encoded in ISO/TS 19139, either referencing or containing the definition of that positional accuracy. That object contains an estimate of the impact of this coordinate operation on point accuracy. That is, it gives position error estimates for the target coordinates of this coordinate operation, assuming no errors in the source coordinates.
		
		 
			 
				 
			
			 
		
	
	
	 
		 
			 gml:sourceCRS is an association role to the source CRS (coordinate reference system) of this coordinate operation.
		
	
	
	 
		 
			 gml:targetCRS is an association role to the target CRS (coordinate reference system) of this coordinate operation.
		
	
	
	 
		 
			 gml:CoordinateOperationPropertyType is a property type for association roles to a coordinate operation, either referencing or containing the definition of that coordinate operation.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:AbstractSingleOperation is a single (not concatenated) coordinate operation.
		
	
	
	 
		 
			 gml:SingleOperationPropertyType is a property type for association roles to a single operation, either referencing or containing the definition of that single operation.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 deprecated
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gm:AbstractGeneralConversion is an abstract operation on coordinates that does not include any change of datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters. The operationVersion, sourceCRS, and targetCRS elements are omitted in a coordinate conversion.
This abstract complex type is expected to be extended for well-known operation methods with many Conversion instances, in GML Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.
		
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
				 
			
		
	
	
	 
		 
			 gml:GeneralConversionPropertyType is a property type for association roles to a general conversion, either referencing or containing the definition of that conversion.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:AbstractGeneralTransformation is an abstract operation on coordinates that usually includes a change of Datum. The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation. The operationVersion, sourceCRS, and targetCRS proeprty elements are mandatory in a coordinate transformation.
This abstract complex type is expected to be extended for well-known operation methods with many Transformation instances, in Application Schemas that define operation-method-specialized value element names and contents. This transformation uses an operation method with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references one "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include one or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.
		
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
				 
			
		
	
	
	 
		 
			 gml:GeneralTransformationPropertyType is a property type for association roles to a general transformation, either referencing or containing the definition of that transformation.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
	 
		 
			 gml:ConcatenatedOperation is an ordered sequence of two or more coordinate operations. This sequence of operations is constrained by the requirement that the source coordinate reference system of step (n+1) must be the same as the target coordinate reference system of step (n). The source coordinate reference system of the first step and the target coordinate reference system of the last step are the source and target coordinate reference system associated with the concatenated operation. Instead of a forward operation, an inverse operation may be used for one or more of the operation steps mentioned above, if the inverse operation is uniquely defined by the forward operation.
The gml:coordOperation property elements are an ordered sequence of associations to the two or more operations used by this concatenated operation. The AggregationAttributeGroup should be used to specify that the coordOperation associations are ordered.
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
		 
			 gml:coordOperation is an association role to a coordinate operation.
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:ConcatenatedOperationPropertyType is a property type for association roles to a concatenated operation, either referencing or containing the definition of that concatenated operation.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:PassThroughOperation is a pass-through operation specifies that a subset of a coordinate tuple is subject to a specific coordinate operation.
The modifiedCoordinate property elements are an ordered sequence of positive integers defining the positions in a coordinate tuple of the coordinates affected by this pass-through operation. The AggregationAttributeGroup should be used to specify that the modifiedCoordinate elements are ordered.
		
	
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 gml:modifiedCoordinate is a positive integer defining a position in a coordinate tuple.
		
	
	
	 
		 
			 gml:usesOperation is deprecated, gml:coordOperation shall be used instead.
		
	
	
	 
		 
			 gml:PassThroughOperationPropertyType is a property type for association roles to a pass through operation, either referencing or containing the definition of that pass through operation.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:Conversion is a concrete operation on coordinates that does not include any change of Datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.
This concrete complex type can be used without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Conversion instance.
The usesValue property elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.
		
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 gml:method is an association role to the operation method used by a coordinate operation.
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:ConversionPropertyType is a property type for association roles to a concrete general-purpose conversion, either referencing or containing the definition of that conversion.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:Transformation is a concrete object element derived from gml:GeneralTransformation (13.6.2.13).
This concrete object can be used for all operation methods, without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Transformation instance.
The parameterValue elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.
		
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 gml:TransformationPropertyType is a property type for association roles to a transformation, either referencing or containing the definition of that transformation.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:AbstractGeneralParameterValue is an abstract parameter value or group of parameter values.
This abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "operationParameter" property element that references one element substitutable for the "OperationParameter" object element.
		
	
	
	 
		 
	
	
	 
		 
			 gml:AbstractGeneralParameterValuePropertyType is a  property type for inline association roles to a parameter value or group of parameter values, always containing the values.
		
		 
			 
		
	
	
	
	 
		 
			 gml:ParameterValue is a parameter value, an ordered sequence of values, or a reference to a file of parameter values. This concrete complex type may be used for operation methods without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one instance. This complex type may be used, extended, or restricted for well-known operation methods, especially for methods with many instances.
		
	
	
	 
		 
			 
				 
					 
						 
						 
						 
						 
						 
						 
						 
						 
					
					 
				
			
		
	
	
	 
		 
			 gml:value is a numeric value of an operation parameter, with its associated unit of measure.
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:stringValue is a character string value of an operation parameter. A string value does not have an associated unit of measure.
		
	
	
	 
		 
			 gml:integerValue is a positive integer value of an operation parameter, usually used for a count. An integer value does not have an associated unit of measure.
		
	
	
	 
		 
			 gml:booleanValue is a boolean value of an operation parameter. A Boolean value does not have an associated unit of measure.
		
	
	
	 
		 
			 gml:valueList is an ordered sequence of two or more numeric values of an operation parameter list, where each value has the same associated unit of measure. An element of this type contains a space-separated sequence of double values.
		
	
	
	 
		 
			 gml:integerValueList is an ordered sequence of two or more integer values of an operation parameter list, usually used for counts. These integer values do not have an associated unit of measure. An element of this type contains a space-separated sequence of integer values.
		
	
	
	 
		 
			 gml:valueFile is a reference to a file or a part of a file containing one or more parameter values, each numeric value with its associated unit of measure. When referencing a part of a file, that file shall contain multiple identified parts, such as an XML encoded document. Furthermore, the referenced file or part of a file may reference another part of the same or different files, as allowed in XML documents.
		
	
	
	 
		 
			 gml:operationParameter is an association role to the operation parameter of which this is a value.
		
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:ParameterValueGroup is a group of related parameter values. The same group can be repeated more than once in a Conversion, Transformation, or higher level ParameterValueGroup, if those instances contain different values of one or more parameterValues which suitably distinquish among those groups. This concrete complex type can be used for operation methods without using an Application Schema that defines operation-method-specialized element names and contents. This complex type may be used, extended, or restricted for well-known operation methods, especially for methods with only one instance.
The parameterValue elements are an unordered set of composition association roles to the parameter values and groups of values included in this group.
		
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:group is an association role to the operation parameter group for which this element provides parameter values.
		
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:OperationMethod is a method (algorithm or procedure) used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters.
The generalOperationParameter elements are an unordered list of associations to the set of operation parameters and parameter groups used by this operation method.
		
	
	
	 
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
		 
			 gml:formula specifies a formula or procedure used by this operation method. The value may be a reference to a publication. Note that the operation method may not be analytic, in which case this element references or contains the procedure, not an analytic formula.
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:sourceDimensions is the number of dimensions in the source CRS of this operation method.
		
	
	
	 
		 
			 gml:targetDimensions is the number of dimensions in the target CRS of this operation method.
		
	
	
	 
		 
			 gml:generalOperationParameter is an association to an operation parameter or parameter group.
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:OperationMethodPropertyType is a property type for association roles to a concrete general-purpose operation method, either referencing or containing the definition of that method.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:GeneralOperationParameter is the abstract definition of a parameter or group of parameters used by an operation method.
		
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 gml:minimumOccurs is the minimum number of times that values for this parameter group or parameter are required. If this attribute is omitted, the minimum number shall be one.
		
	
	
	 
		 
			 gml:AbstractGeneralOperationParameterPropertyType is a property type for association roles to an operation parameter or group, either referencing or containing the definition of that parameter or group.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:OperationParameter is the definition of a parameter used by an operation method. Most parameter values are numeric, but other types of parameter values are possible. This complex type is expected to be used or extended for all operation methods, without defining operation-method-specialized element names.
		
	
	
	 
		 
			 
				 
			
		
	
	
	 
		 
			 gml:OperationParameterPropertyType is a property type for association roles to an operation parameter, either referencing or containing the definition of that parameter.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	
	
	 
		 
			 gml:OperationParameterGroup is the definition of a group of parameters used by an operation method. This complex type is expected to be used or extended for all applicable operation methods, without defining operation-method-specialized element names.
The generalOperationParameter elements are an unordered list of associations to the set of operation parameters that are members of this group.
		
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 gml:maximumOccurs is the maximum number of times that values for this parameter group may be included. If this attribute is omitted, the maximum number shall be one.
		
	
	
	 
		 
			 deprecated
		
	
	
	 
		 
			 gml:OperationParameterPropertyType is a property type for association roles to an operation parameter group, either referencing or containing the definition of that parameter group.
		
		 
			 
		
		 
	
	
	 
		 
			 deprecated
		
	
	




06-055r1 Geopositioning Metadata AS Folder/gml/coordinateReferenceSystems.xsd
 
	 
		 coordinateReferenceSystems.xsd
		 See ISO/DIS 19136 13.3.
The spatial-temporal coordinate reference systems schema components are divided into two logical parts. One part defines elements and types for XML encoding of abstract coordinate reference systems definitions. The larger part defines specialized constructs for XML encoding of definitions of the multiple concrete types of spatial-temporal coordinate reference systems.
These schema components encode the Coordinate Reference System packages of the UML Models of ISO 19111 Clause 8 and ISO/DIS 19136 D.3.10, with the exception of the abstract "SC_CRS" class.
	
	 
	 
	 
	 
		 
			 gml:AbstractSingleCRS implements a coordinate reference system consisting of one coordinate system and one datum (as opposed to a Compound CRS).
		
	
	 
		 
			 gml:SingleCRSPropertyType is a property type for association roles to a single coordinate reference system, either referencing or containing the definition of that coordinate reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:AbstractGeneralDerivedCRS is a coordinate reference system that is defined by its coordinate conversion from another coordinate reference system. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:conversion is an association role to the coordinate conversion used to define the derived CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:CompundCRS is a coordinate reference system describing the position of points through two or more independent coordinate reference systems. It is associated with a non-repeating sequence of two or more instances of SingleCRS.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 The gml:componentReferenceSystem elements are an ordered sequence of associations to all the component coordinate reference systems included in this compound coordinate reference system. The gml:AggregationAttributeGroup should be used to specify that the gml:componentReferenceSystem properties are ordered.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:CompoundCRSPropertyType is a property type for association roles to a compound coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
	 
		 
			 gml:GeodeticCRS is a coordinate reference system based on a geodetic datum.
		
		 
			 
				 
					 
						 
						 
						 
					
					 
				
			
		
	
	 
		 
			 gml:ellipsoidalCS is an association role to the ellipsoidal coordinate system used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:sphericalCS is an association role to the spherical coordinate system used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:geodeticDatum is an association role to the geodetic datum used by this CRS.

		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:GeodeticCRSPropertyType is a property type for association roles to a geodetic coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 gml:VerticalCRS is a 1D coordinate reference system used for recording heights or depths. Vertical CRSs make use of the direction of gravity to define the concept of height or depth, but the relationship with gravity may not be straightforward. By implication, ellipsoidal heights (h) cannot be captured in a vertical coordinate reference system. Ellipsoidal heights cannot exist independently, but only as an inseparable part of a 3D coordinate tuple defined in a geographic 3D coordinate reference system.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 gml:verticalCS is an association role to the vertical coordinate system used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:verticalDatum is an association role to the vertical datum used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:VerticalCRSPropertyType is a property type for association roles to a vertical coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:ProjectedCRS is a 2D coordinate reference system used to approximate the shape of the earth on a planar surface, but in such a way that the distortion that is inherent to the approximation is carefully controlled and known. Distortion correction is commonly applied to calculated bearings and distances to produce values that are a close match to actual field values.
		
	
	 
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	 
		 
			 gml:baseGeodeticCRS is an association role to the geodetic coordinate reference system used by this projected CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:ProjectedCRSPropertyType is a property type for association roles to a projected coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:DerivedCRS is a single coordinate reference system that is defined by its coordinate conversion from another single coordinate reference system known as the base CRS. The base CRS can be a projected coordinate reference system, if this DerivedCRS is used for a georectified grid coverage as described in ISO 19123, Clause 8.
		
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	 
		 
			 gml:baseCRS is an association role to the coordinate reference system used by this derived CRS.
		
	
	 
		 
			 The gml:derivedCRSType property describes the type of a derived coordinate reference system. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.
		
	
	 
		 
			 An association role to the coordinate system used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:DerivedCRSPropertyType is a property type for association roles to a non-projected derived coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:EngineeringCRS is a contextually local coordinate reference system which can be divided into two broad categories:
-	earth-fixed systems applied to engineering activities on or near the surface of the earth;
-	CRSs on moving platforms such as road vehicles, vessels, aircraft, or spacecraft, see ISO 19111 8.3.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 gml:engineeringDatum is an association role to the engineering datum used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:EngineeringCRSPropertyType is a property type for association roles to an engineering coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:ImageCRS is an engineering coordinate reference system applied to locations in images. Image coordinate reference systems are treated as a separate sub-type because the definition of the associated image datum contains two attributes not relevant to other engineering datums.
		
	
	 
		 
			 
				 
					 
						 
						 
						 
					
					 
				
			
		
	
	 
		 
			 gml:affineCS is an association role to the affine coordinate system used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:imageDatum is an association role to the image datum used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:ImageCRSPropertyType is a property type for association roles to an image coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:TemporalCRS is a 1D coordinate reference system used for the recording of time.
		
	
	 
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	 
		 
			 gml:timeCS is an association role to the time coordinate system used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:temporalDatum is an association role to the temporal datum used by this CRS.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:TemporalCRSPropertyType is a property type for association roles to a temporal coordinate reference system, either referencing or containing the definition of that reference system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 deprecated
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	 
		 
			 deprecated
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/coordinateSystems.xsd
 
	 
		 coordinateSystems.xsd
		 See ISO/DIS 19136 13.4.
The coordinate systems schema components can be divded into  three logical parts, which define elements and types for XML encoding of the definitions of:
-	Coordinate system axes
-	Abstract coordinate system
-	Multiple concrete types of spatial-temporal coordinate systems
These schema components encode the Coordinate System packages of the UML Models of ISO 19111 Clause 9 and ISO/DIS 19136 D.3.10.
	
	 
	 
		 
			 gml:CoordinateSystemAxis is a definition of a coordinate system axis.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
				 
			
		
	
	 
		 
			 gml:axisAbbrev is the abbreviation used for this coordinate system axis; this abbreviation is also used to identify the coordinates in the coordinate tuple. The codeSpace attribute may reference a source of more information on a set of standardized abbreviations, or on this abbreviation.
		
	
	 
		 
			 gml:axisDirection is the direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin).
Within any set of coordinate system axes, only one of each pair of terms may be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction.
The codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.
		
	
	 
		 
			 The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.
		
	
	 
		 
			 The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.
		
	
	 
		 
			 gml:rangeMeaning describes the meaning of axis value range specified by gml:minimumValue and gml:maximumValue. This element shall be omitted when both gml:minimumValue and gml:maximumValue are omitted. This element should be included when gml:minimumValue and/or gml:maximumValue are included. If this element is omitted when the gml:minimumValue and/or gml:maximumValue are included, the meaning is unspecified. The codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.
		
	
	 
		 
			 The uom attribute provides an identifier of the unit of measure used for this coordinate system axis. The value of this coordinate in a coordinate tuple shall be recorded using this unit of measure, whenever those coordinates use a coordinate reference system that uses a coordinate system that uses this axis.
		
	
	 
		 
			 gml:CoordinateSystemAxisPropertyType is a property type for association roles to a coordinate system axis, either referencing or containing the definition of that axis.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-repeating sequence of coordinate system axes that spans a given coordinate space. A CS is derived from a set of mathematical rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded. This abstract complex type shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 The gml:axis property is an association role (ordered sequence) to the coordinate system axes included in this coordinate system. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. The gml:AggregationAttributeGroup should be used to specify that the axis objects are ordered.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:CoordinateSystemPropertyType is a property type for association roles to a coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:EllipsoidalCS is a two- or three-dimensional coordinate system in which position is specified by geodetic latitude, geodetic longitude, and (in the three-dimensional case) ellipsoidal height. An EllipsoidalCS shall have two or three gml:axis property elements; the number of associations shall equal the dimension of the CS.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:EllipsoidalCSPropertyType is a property type for association roles to an ellipsoidal coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:CartesianCS is a 1-, 2-, or 3-dimensional coordinate system. In the 1-dimensional case, it contains a single straight coordinate axis. In the 2- and 3-dimensional cases gives the position of points relative to orthogonal straight axes. In the multi-dimensional case, all axes shall have the same length unit of measure. A CartesianCS shall have one, two, or three gml:axis property elements.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:CartesianCSPropertyType is a property type for association roles to a Cartesian coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:VerticalCS is a one-dimensional coordinate system used to record the heights or depths of points. Such a coordinate system is usually dependent on the Earth's gravity field, perhaps loosely as when atmospheric pressure is the basis for the vertical coordinate system axis. A VerticalCS shall have one gml:axis property element.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:VerticalCSPropertyType is a property type for association roles to a vertical coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:TimeCS is a one-dimensional coordinate system containing a time axis, used to describe the temporal position of a point in the specified time units from a specified time origin. A TimeCS shall have one gml:axis property element.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:TimeCSPropertyType is a property type for association roles to a time coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
		
	
	 
		 
			 deprecated
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:LinearCS is a one-dimensional coordinate system that consists of the points that lie on the single axis described. The associated coordinate is the distance – with or without offset – from the specified datum to the point along the axis. A LinearCS shall have one gml:axis property element.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:LinearCSPropertyType is a property type for association roles to a linear coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:UserDefinedCS is a two- or three-dimensional coordinate system that consists of any combination of coordinate axes not covered by any other coordinate system type. A UserDefinedCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:UserDefinedCSPropertyType is a property type for association roles to a user-defined coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:SphericalCS is a three-dimensional coordinate system with one distance measured from the origin and two angular coordinates. A SphericalCS shall have three gml:axis property elements.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:SphericalCSPropertyType is property type for association roles to a spherical coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:PolarCS ia s two-dimensional coordinate system in which position is specified by the distance from the origin and the angle between the line from the origin to a point and a reference direction. A PolarCS shall have two gml:axis property elements.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:PolarCSPropertyType is a property type for association roles to a polar coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:CylindricalCS is a three-dimensional coordinate system consisting of a polar coordinate system extended by a straight coordinate axis perpendicular to the plane spanned by the polar coordinate system. A CylindricalCS shall have three gml:axis property elements.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:CylindricalCSPropertyType is a property type for association roles to a cylindrical coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:AffineCS is a two- or three-dimensional coordinate system with straight axes that are not necessarily orthogonal. An AffineCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:AffineCSPropertyType is a property type for association roles to an affine coordinate system, either referencing or containing the definition of that coordinate system.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
		
	
	 
		 
			 deprecated
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/coverage.xsd
 
	 
		 coverage.xsd
		 See ISO/DIS 19136 20.3.
A coverage incorporates a mapping from a spatiotemporal domain to a range set, the latter providing the set in which the attribute values live.  The range set may be an arbitrary set including discrete lists, integer or floating point ranges, and multi-dimensional vector spaces.
A coverage can be viewed as the graph of the coverage function f:A à B, that is as the set of ordered pairs {(x, f(x)) | where x is in A}. This view is especially applicable to the GML encoding of a coverage.  In the case of a discrete coverage, the domain set A is partitioned into a collection of subsets (typically a disjoint collection) A = UAi and the function f is constant on each Ai. For a spatial domain, the Ai are geometry elements, hence the coverage can be viewed as a collection of (geometry,value) pairs, where the value is an element of the range set.  If the spatial domain A is a topological space then the coverage can be viewed as a collection of (topology,value) pairs, where the topology element in the pair is a topological n-chain (in GML terms this is a gml:TopoPoint, gml:TopoCurve, gml:TopoSurface or gml:TopoSolid). 
A coverage is implemented as a GML feature. We can thus speak of a “temperature distribution feature”, or a “remotely sensed image feature”, or a “soil distribution feature”.
As is the case for any GML object, a coverage object may also be the value of a property of a feature.  

	
	 
	 
	 
	 
	 
		 
			 The base type for coverages is gml:AbstractCoverageType. The basic elements of a coverage can be seen in this content model: the coverage contains gml:domainSet and gml:rangeSet properties. The gml:domainSet property describes the domain of the coverage and the gml:rangeSet property describes the range of the coverage.
		
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 This element serves as the head of a substitution group which may contain any coverage whose type is derived from gml:AbstractCoverageType.  It may act as a variable in the definition of content models where it is required to permit any coverage to be valid.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 A discrete coverage consists of a domain set, range set and optionally a coverage function. The domain set consists of either spatial or temporal geometry objects, finite in number. The range set is comprised of a finite number of attribute values each of which is associated to every direct position within any single spatiotemporal object in the domain. In other words, the range values are constant on each spatiotemporal object in the domain. This coverage function maps each element from the coverage domain to an element in its range. The coverageFunction element describes the mapping function.
This element serves as the head of a substitution group which may contain any discrete coverage whose type is derived from gml:AbstractDiscreteCoverageType.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 A continuous coverage as defined in ISO 19123 is a coverage that can return different values for the same feature attribute at different direct positions within a single spatiotemporal object in its spatiotemporal domain. The base type for continuous coverages is AbstractContinuousCoverageType.
The coverageFunction element describes the mapping function. 
The abstract element gml:AbstractContinuousCoverage serves as the head of a substitution group which may contain any continuous coverage whose type is derived from gml:AbstractContinuousCoverageType.
		
	
	 
		 
			 The gml:domainSet property element describes the spatio-temporal region of interest, within which the coverage is defined. Its content model is given by gml:DomainSetType.
The value of the domain is thus a choice between a gml:AbstractGeometry and a gml:AbstractTimeObject.  In the instance these abstract elements will normally be substituted by a geometry complex or temporal complex, to represent spatial coverages and time-series, respectively.  
The presence of the gml:AssociationAttributeGroup means that domainSet follows the usual GML property model and may use the xlink:href attribute to point to the domain, as an alternative to describing the domain inline. Ownership semantics may be provided using the gml:OwnershipAttributeGroup.

		
	
	 
		 
			 
				 
				 
			
		
		 
		 
	
	 
		 
			 The gml:rangeSet property element contains the values of the coverage (sometimes called the attribute values).  Its content model is given by gml:RangeSetType.
This content model supports a structural description of the range.  The semantic information describing the range set is embedded using a uniform method, as part of the explicit values, or as a template value accompanying the representation using gml:DataBlock and gml:File.
The values from each component (or “band”) in the range may be encoded within a gml:ValueArray element or a concrete member of the gml:AbstractScalarValueList substitution group . Use of these elements satisfies the value-type homogeneity requirement.
		
	
	 
		 
			 
			 
			 
			 
		
	
	 
		 
			 gml:DataBlock describes the Range as a block of text encoded values similar to a Common Separated Value (CSV) representation.
The range set parameterization is described by the property gml:rangeParameters.
		
	
	 
		 
			 
			 
				 
				 
			
		
	
	 
	 
		 
			 gml:RangeParameterType is a framework for the description of the range parameters each of which is a gml:AbstractValue.  Specific range parameters are defined through the creation of a GML Application Schema that provides elements that are substitutable for gml:AbstractValue.
		
		 
			 
		
		 
		 
	
	 
		 
			 gml:CoordinatesType consists of a list of coordinate tuples, with each coordinate tuple separated by the ts or tuple separator (whitespace), and each coordinate in the tuple by the cs or coordinate separator (comma).
The gml:tupleList encoding is effectively “band-interleaved”.
		
	
	 
		 
			 gml:doubleOrNilReasonList consists of a list of gml:doubleOrNilReason values, each separated by a whitespace. The gml:doubleOrNilReason values are grouped into tuples where the dimension of each tuple in the list is equal to the number of range parameters.
		
	
	 
		 
			 for efficiency reasons, GML also provides a means of encoding the range set in an arbitrary external encoding, such as a binary file.  This encoding may be “well-known” but this is not required. This mode uses the gml:File element.
The values of the coverage (attribute values in the range set) are transmitted in a external file that is referenced from the XML structure described by gml:FileType.  The external file is referenced by the gml:fileReference property that is an anyURI (the gml:fileName property has been deprecated).  This means that the external file may be located remotely from the referencing GML instance. 
The gml:compression property points to a definition of a compression algorithm through an anyURI.  This may be a retrievable, computable definition or simply a reference to an unambiguous name for the compression method.
The gml:mimeType property points to a definition of the file mime type.
The gml:fileStructure property is defined by the gml:FileValueModelType.  This is simple enumerated type restriction on string.  The only value supported in GML is “Record Interleaved”.  Additional values may be supported in future releases of GML.  Note further that all values shall be enclosed in a single file. Multi-file structures for values are not supported in GML.
The semantics of the range set is described as above using the gml:rangeParameters property.
Note that if any compression algorithm is applied, the structure above applies only to the pre-compression or post-decompression structure of the file.
Note that the fields within a record match the gml:valueComponents of the gml:CompositeValue in document order.
		
	
	 
		 
			 
			 
				 
				 
			
			 
			 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 The gml:coverageFunction property describes the mapping function from the domain to the range of the coverage.
The value of the CoverageFunction is one of gml:CoverageMappingRule and gml:GridFunction.
If the gml:coverageFunction property is omitted for a gridded coverage (including rectified gridded coverages) the gml:startPoint is assumed to be the value of the gml:low property in the gml:Grid geometry, and the gml:sequenceRule is assumed to be linear and the gml:axisOrder property is assumed to be “+1 +2”.
		
	
	 
		 
			 
			 
			 
		
	
	 
		 
			 gml:CoverageMappingRule provides a formal or informal description of the coverage function.
The mapping rule may be defined as an in-line string (gml:ruleDefinition) or via a remote reference through xlink:href (gml:ruleReference).  
If no rule name is specified, the default is ‘Linear’ with respect to members of the domain in document order.
		
	
	 
		 
			 
			 
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:GridFunction provides an explicit mapping rule for grid geometries, i.e. the domain shall be a geometry of type grid.  It describes the mapping of grid posts (discrete point grid coverage) or grid cells (discrete surface coverage) to the values in the range set.
The gml:startPoint is the index position of a point in the grid that is mapped to the first point in the range set (this is also the index position of the first grid post).  If the gml:startPoint property is omitted the gml:startPoint is assumed to be equal to the value of gml:low in the gml:Grid geometry. Subsequent points in the mapping are determined by the value of the gml:sequenceRule.
		
	
	 
		 
			 
			 
		
	
	 
		 
			 The gml:SequenceRuleType is derived from the gml:SequenceRuleEnumeration through the addition of an axisOrder attribute.  The gml:SequenceRuleEnumeration is an enumerated type. The rule names are defined in ISO 19123. If no rule name is specified the default is “Linear”.
		
		 
			 
				 
					 
						 deprecated
					
				
				 
			
		
	
	 
		 
			 
			 
			 
			 
			 
			 
		
	
	 
		 
			 The different values in a gml:AxisDirectionList indicate the incrementation order to be used on all axes of the grid. Each axis shall be mentioned once and only once.
		
		 
	
	 
		 
			 The value of a gml:AxisDirection indicates the incrementation order to be used on an axis of the grid.
		
		 
			 
		
	
	 
		 
			 deprecated
		
		 
			 
			 
			 
			 
		
	
	 
		 
			 In a gml:MultiPointCoverage the domain set is a gml:MultiPoint, that is a collection of arbitrarily distributed geometric points.
The content model is derived by restriction from gml:AbstractDiscreteCoverageType. Note that the restriction replaces the generic gml:domainSet by the specific gml:multiPointDomain whose value is a gml:MultiPoint.
In a gml:MultiPointCoverage the mapping from the domain to the range is straightforward.
-	For gml:DataBlock encodings the points of the gml:MultiPoint are mapped in document order to the tuples of the data block.
-	For gml:CompositeValue encodings the points of the gml:MultiPoint are mapped to the members of the composite value in document order.
-	For gml:File encodings the points of the gml:MultiPoint are mapped to the records of the file in sequential order.

		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 In a gml:MultiCurveCoverage the domain is partioned into a collection of curves comprising a gml:MultiCurve.  The coverage function then maps each curve in the collection to a value in the range set.
The content model is derived by restriction from gml:AbstractDiscreteCoverageType. Note that the restriction replaces the generic gml:domainSet by the specific gml:multiCurveDomain whose value is a gml:MultiCurve.
In a gml:MultiCurveCoverage the mapping from the domain to the range is straightforward.
-	For gml:DataBlock encodings the curves of the gml:MultiCurve are mapped in document order to the tuples of the data block.
-	For gml:CompositeValue encodings the curves of the gml:MultiCurve are mapped to the members of the composite value in document order.
-	For gml:File encodings the curves of the gml:MultiCurve are mapped to the records of the file in sequential order.

		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 In a gml:MultiSurfaceCoverage the domain is partioned into a collection of surfaces comprising a gml:MultiSurface.  The coverage function than maps each surface in the collection to a value in the range set.
The content model is derived by restriction from gml:AbstractDiscreteCoverageType. Note that the restriction replaces the generic gml:domainSet by the specific gml:multiSurfaceDomain whose value is a gml:MultiSurface.
In a gml:MultiSurfaceCoverage the mapping from the domain to the range is straightforward.
-	For gml:DataBlock encodings the surfaces of the gml:MultiSurface are mapped in document order to the tuples of the data block.
-	For gml:CompositeValue encodings the surfaces of the gml:MultiSurface are mapped to the members of the composite value in document order.
-	For gml:File encodings the surfaces of the gml:MultiSurface are mapped to the records of the file in sequential order.

		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 In a gml:MultiSolidCoverage the domain is partioned into a collection of solids comprising a gml:MultiSolid.  The coverage function than maps each solid in the collection to a value in the range set.
The content model is derived by restriction from gml:AbstractDiscreteCoverageType. Note that the restriction replaces the generic gml:domainSet by the specific gml:multiSolidDomain whose value is a gml:MultiSolid.
In a gml:MultiSolidCoverage the mapping from the domain to the range is straightforward.
-	For gml:DataBlock encodings the solids of the gml:MultiSolid are mapped in document order to the tuples of the data block.
-	For gml:CompositeValue encodings the solids of the gml:MultiSolid are mapped to the members of the composite value in document order.
-	For gml:File encodings the solids of the gml:MultiSolid are mapped to the records of the file in sequential order.

		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 A gml:GriddedCoverage is a discrete point coverage in which the domain set is a geometric grid of points.
Note that this is the same as the gml:MultiPointCoverage except that we have a gml:gridDomain property to describe the domain.
The simple gridded coverage is not geometrically referenced and hence no geometric positions are assignable to the points in the grid. Such geometric positioning is introduced in the gml:RectifiedGridCoverage.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
						 
							 
						
						 
					
				
				 
				 
			
		
	
	 
		 
			 The gml:RectifiedGridCoverage is a discrete point coverage based on a rectified grid. It is similar to the grid coverage except that the points of the grid are geometrically referenced. The rectified grid coverage has a domain that is a gml:RectifiedGrid geometry.
The coverage domain is described by gml:rectifiedGridDomain.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
				
				 
				 
			
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/datums.xsd
 
	 
		 datums.xsd
		 See ISO/DIS 19136 13.5
The datums schema components can be divided into three logical parts, which define elements and types for XML encoding of the definitions of:
-	Abstract datum
-	Geodetic datums, including ellipsoid and prime meridian
-	Multiple other concrete types of spatial or temporal datums
These schema components encode the Datum packages of the UML Models of ISO 19111 Clause 10 and ISO/DIS 19136 D.3.10.
	
	 
	 
	 
		 
			 A gml:AbstractDatum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype may be associated with only specific types of coordinate systems. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	 
		 
			 gml:anchorDefinition is a description, possibly including coordinates, of the definition used to anchor the datum to the Earth. Also known as the "origin", especially for engineering and image datums. The codeSpace attribute may be used to reference a source of more detailed on this point or surface, or on a set of such descriptions.
-	For a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.
-	For an engineering datum, the anchor definition may be a physical point, or it may be a point with defined coordinates in another CRS.may
-	For an image datum, the anchor definition is usually either the centre of the image or the corner of the image.
-	For a temporal datum, this attribute is not defined. Instead of the anchor definition, a temporal datum carries a separate time origin of type DateTime.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:realizationEpoch is the time after which this datum definition is valid. See ISO 19111 Table 32 for details.
		
	
	 
		 
			 gml:DatumPropertyType is a property type for association roles to a datum, either referencing or containing the definition of that datum.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:GeodeticDatum is a geodetic datum defines the precise location and orientation in 3-dimensional space of a defined ellipsoid (or sphere), or of a Cartesian coordinate system centered in this ellipsoid (or sphere).
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 gml:primeMeridian is an association role to the prime meridian used by this geodetic datum.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:ellipsoid is an association role to the ellipsoid used by this geodetic datum.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:GeodeticDatumPropertyType is a property type for association roles to a geodetic datum, either referencing or containing the definition of that datum.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 A gml:Ellipsoid is a geometric figure that may be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 gml:semiMajorAxis specifies the length of the semi-major axis of the ellipsoid, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet.
		
	
	 
		 
			 gml:secondDefiningParameter is a property containing the definition of the second parameter that defines the shape of an ellipsoid. An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.
The inverseFlattening element contains the inverse flattening value of the ellipsoid. This value is a scale factor (or ratio). It uses gml:LengthType with the restriction that the unit of measure referenced by the uom attribute must be suitable for a scale factor, such as percent, permil, or parts-per-million.
The semiMinorAxis element contains the length of the semi-minor axis of the ellipsoid. When the isSphere element is included, the ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere.
		
		 
			 
				 
			
		
	
	 
		 
			 
				 
				 
				 
					 
						 
							 
						
					
				
			
		
	
	 
		 
			 gml:EllipsoidPropertyType is a property type for association roles to an ellipsoid, either referencing or containing the definition of that ellipsoid.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 A gml:PrimeMeridian defines the origin from which longitude values are determined. The default value for the prime meridian gml:identifier value is "Greenwich".
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:greenwichLongitude is the longitude of the prime meridian measured from the Greenwich meridian, positive eastward. If the value of the prime meridian “name” is "Greenwich" then the value of greenwichLongitude shall be 0 degrees.
		
	
	 
		 
			 gml:PrimeMeridianPropertyType is a property type for association roles to a prime meridian, either referencing or containing the definition of that meridian.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:EngineeringDatum defines the origin of an engineering coordinate reference system, and is used in a region around that origin. This origin may be fixed with respect to the earth (such as a defined point at a construction site), or be a defined point on a moving vehicle (such as on a ship or satellite).
		
	
	 
		 
			 
		
	
	 
		 
			 gml:EngineeringDatumPropertyType is a property type for association roles to an engineering datum, either referencing or containing the definition of that datum.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:ImageDatum defines the origin of an image coordinate reference system, and is used in a local context only. For an image datum, the anchor definition is usually either the centre of the image or the corner of the image. For more information, see ISO 19111 B.3.5.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:pixelInCell is a specification of the way an image grid is associated with the image data attributes. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.
		
	
	 
		 
			 gml:ImageDatumPropertyType is a property type for association roles to an image datum, either referencing or containing the definition of that datum.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:VerticalDatum is a textual description and/or a set of parameters identifying a particular reference level surface used as a zero-height surface, including its position with respect to the Earth for any of the height types recognized by this International Standard.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:VerticalDatumPropertyType is property type for association roles to a vertical datum, either referencing or containing the definition of that datum.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 A gml:TemporalDatum defines the origin of a Temporal Reference System. This type omits the "anchorDefinition" and "realizationEpoch" elements and adds the "origin" element with the dateTime type.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 The TemporalDatumBaseType partially defines the origin of a temporal coordinate reference system. This type restricts the AbstractDatumType to remove the "anchorDefinition" and "realizationEpoch" elements.
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
				
				 
			
		
	
	 
		 
			 gml:origin is the date and time origin of this temporal datum.
		
	
	 
		 
			 gml:TemporalDatumPropertyType is a property type for association roles to a temporal datum, either referencing or containing the definition of that datum.
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/dictionary.xsd
 
	 
		 dictionary.xsd
		 See ISO/DIS 19136 Clause 16.
Many applications require definitions of terms which are used within instance documents as the values of certain properties or as reference information to tie properties to standard information values in some way.  Units of measure and descriptions of measurable phenomena are two particular examples. 
It will often be convenient to use definitions provided by external authorities. These may already be packaged for delivery in various ways, both online and offline. In order that they may be referred to from GML documents it is generally necessary that a URI be available for each definition. Where this is the case then it is usually preferable to refer to these directly. 
Alternatively, it may be convenient or necessary to capture definitions in XML, either embedded within an instance document containing features or as a separate document. The definitions may be transcriptions from an external source, or may be new definitions for a local purpose. In order to support this case, some simple components are provided in GML in the form of 
-	a generic gml:Definition, which may serve as the basis for more specialized definitions
-	a generic gml:Dictionary, which allows a set of definitions or references to definitions to be collected 
These components may be used directly, but also serve as the basis for more specialised definition elements in GML, in particular: coordinate operations, coordinate reference systems, datums, temporal reference systems, and units of measure.  
Note that the GML definition and dictionary components implement a simple nested hierarchy of definitions with identifiers. The latter provide handles which may be used in the description of more complex relationships between terms. However, the GML dictionary components are not intended to provide direct support for complex taxonomies, ontologies or thesauri.  Specialised XML tools are available to satisfy the more sophisticated requirements. 
	
	 
	 
		 
			 The basic gml:Definition element specifies a definition, which can be included in or referenced by a dictionary. 
The content model for a generic definition is a derivation from gml:AbstractGMLType.  
The gml:description property element shall hold the definition if this can be captured in a simple text string, or the gml:descriptionReference property element may carry a link to a description elsewhere.
The gml:identifier element shall provide one identifier identifying this definition. The identifier shall be unique within the dictionaries using this definition. 
The gml:name elements shall provide zero or more terms and synonyms for which this is the definition.
The gml:remarks element shall be used to hold additional textual information that is not conceptually part of the definition but is useful in understanding the definition.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
				 
			
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
	 
		 
			 Sets of definitions may be collected into dictionaries or collections.
A gml:Dictionary is a non-abstract collection of definitions.
The gml:Dictionary content model adds a list of gml:dictionaryEntry properties that contain or reference gml:Definition objects.  A database handle (gml:id attribute) is required, in order that this collection may be referred to. The standard gml:identifier, gml:description, gml:descriptionReference and gml:name properties are available to reference or contain more information about this dictionary. The gml:description and gml:descriptionReference property elements may be used for a description of this dictionary. The derived gml:name element may be used for the name(s) of this dictionary. for remote definiton references gml:dictionaryEntry shall be used. If a Definition object contained within a Dictionary uses the descriptionReference property to refer to a remote definition, then this enables the inclusion of a remote definition in a local dictionary, giving a handle and identifier in the context of the local dictionary.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	 
		 
			 This property element contains or refers to the definitions which are members of a dictionary. 
The content model follows the standard GML property pattern, so a gml:dictionaryEntry may either contain or refer to a single gml:Definition. Since gml:Dictionary is substitutable for gml:Definition, the content of an entry may itself be a lower level dictionary. 
Note that if the value is provided by reference, this definition does not carry a handle (gml:id) in this context, so does not allow external references to this specific definition in this context.  When used in this way the referenced definition will usually be in a dictionary in the same XML document.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
				
			
		
	
	 
		 
			 deprecated
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/direction.xsd
 
	 
		 direction.xsd
		 See ISO/DIS 19136 Clause 18.
The direction schema components provide the GML Application Schema developer with a standard property element to describe direction, and associated objects that may be used to express orientation, direction, heading, bearing or other directional aspects of geographic features. 
	
	 
	 
		 
			 The property gml:direction is intended as a pre-defined property expressing a direction to be assigned to features defined in a GML application schema.
		
	
	 
		 
			 
				 
				 
				 
				 
				 
			
		
		 
		 
	
	 
		 
			 Direction vectors are specified by providing components of a vector.
		
		 
			 
			 
				 
					 deprecated
				
				 
				 
			
		
	
	 
		 
			 direction descriptions are specified by a compass point code, a keyword, a textual description or a reference to a description.
A gml:compassPoint is specified by a simple enumeration.  	
In addition, thre elements to contain text-based descriptions of direction are provided.  
If the direction is specified using a term from a list, gml:keyword should be used, and the list indicated using the value of the codeSpace attribute. 
if the direction is decribed in prose, gml:direction or gml:reference should be used, allowing the value to be included inline or by reference.
		
		 
			 
			 
			 
			 
		
	
	 
		 
			 These directions are necessarily approximate, giving direction with a precision of 22.5°. It is thus generally unnecessary to specify the reference frame, though this may be detailed in the definition of a GML application language.
		
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/dynamicFeature.xsd
 
	 
		 dynamicFeature.xsd
		 See ISO/DIS 19136 15.6.
A number of types and relationships are defined to represent the time-varying properties of geographic features. 
In a comprehensive treatment of spatiotemporal modeling, Langran (see Bibliography) distinguished three principal temporal entities: states, events, and evidence; the schema specified in the following Subclauses incorporates elements for each.
	
	 
	 
	 
		 
			 Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.
		
	
	 
		 
			 Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data.
		
	
	 
		 
			 A convenience group. This allows an application schema developer to include dynamic properties in a content model in a standard fashion.
		
		 
			 
			 
			 
			 
		
	
	 
		 
			 States are captured by time-stamped instances of a feature. The content model extends the standard gml:AbstractFeatureType with the gml:dynamicProperties model group.
Each time-stamped instance represents a ‘snapshot’ of a feature. The dynamic feature classes will normally be extended to suit particular applications.  A dynamic feature bears either a time stamp or a history.
		
	
	 
		 
			 
				 
			
		
	
	 
		 
			 A gml:DynamicFeatureCollection is a feature collection that has a gml:validTime property (i.e. is a snapshot of the feature collection) or which has a gml:history property that contains one or more gml:AbstractTimeSlices each of which contain values of the time varying properties of the feature collection.  Note that the gml:DynamicFeatureCollection may be one of the following:
1.	A feature collection which consists of static feature members (members do not change in time) but which has properties of the collection object as a whole that do change in time .  
2.	A feature collection which consists of dynamic feature members (the members are gml:DynamicFeatures) but which also has properties of the collection as a whole that vary in time.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 To describe an event — an action that occurs at an instant or over an interval of time — GML provides the gml:AbtractTimeSlice element. A timeslice encapsulates the time-varying properties of a dynamic feature -- it shall be extended to represent a time stamped projection of a specific feature. The gml:dataSource property describes how the temporal data was acquired.
A gml:AbstractTimeSlice instance is a GML object that encapsulates updates of the dynamic—or volatile—properties that reflect some change event; it thus includes only those feature properties that have actually changed due to some process.
gml:AbstractTimeSlice basically provides a facility for attribute-level time stamping, in contrast to the object-level time stamping of dynamic feature instances. 
The time slice can thus be viewed as event or process-oriented, whereas a snapshot is more state or structure-oriented. A timeslice has richer causality, whereas a snapshot merely portrays the status of the whole. 

		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 gml:MovingObjectStatus is one example of how gml:AbstractTimeSlice may be extended. This element provides a standard method to capture a record of the status of a moving object.
A gml:MovingObjectStatus element allows the user to describe the present location, along with the speed, bearing, acceleration and elevation of an object in a particular time slice.  
Additional information about the current status of the object may be recorded in the gml:status or gml:statusReference property elements.
		
	
	 
		 
			 
				 
					 
						 
						 
						 
						 
						 
					
					 
					 
					 
					 
					 
					 
				
			
		
	
	 
		 
			 The remote link attributes of the gml:status element have been deprecated along with its current type.
		
	
	 
	 
		 
			 A generic sequence of events constitute a gml:history of an object.
The gml:history element contains a set of elements in the substitution group headed by the abstract element gml:AbstractTimeSlice, representing the time-varying properties of interest. The history property of a dynamic feature associates a feature instance with a sequence of time slices (i.e. change events) that encapsulate the evolution of the feature.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/exampleHydrographySchema.xsd
 

    
       
          0
      
   

    

    

   
   
   
    
       
          
      
   
    
       
          
             
             
             
         
      
    

   
   
   
    
       
          
      
   
    
       
          
             
             
                
                   
                      
                         
                     
                  
               
            
             
         
      
   

   
   
   
    
       
          
      
   
    
       
          
             
             
             
             
             
         
      
   

   
   
   
    
       
          
      
   
    
       
          
             
             
             
             
                
                   
                      
                         
                     
                  
               
            
             
         
      
   

   
   
   
    
       
          
      
   
    
       
          
             
             
         
      
   

   
   
   
    
       
          
      
   
    
       
          
             
         
      
   

   
   
   
    
       
          
      
   
    
       
          
             
             
             
                
                   
                      
                         
                     
                  
               
            
             
         
      
   

    
       
          
      
   
    
       
          
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
         
      
   

   
   
   
    
    
       
          
             
                
                
                   
                      hyd:HydroComplex/@gml:id
                      hyd:HydroElement/@gml:id
                  
               
            
         
      
   

   
   
   
    
    
       
          
             
                
                
                
                
                
                
                
                
               
                
                   
                      
                         
                            
                        
                     
                  
               
                
                   
                      hyd:HydroElement/@gml:id
                  
               
            
         
      
   

   
   
   
    
    
       
          
             
                
                
                
                
                
                
                
                
               
                
                   
                      
                         
                            
                        
                     
                  
               
                
                   
                      
                         
                            
                        
                     
                  
               
                
                
                   
                      
                         
                            
                        
                     
                  
               
               
                
            
         
      
   
                           
   
   
   
    
    
       
          
             
                
                   
                      hyd:HydroFeature/@gml:id
                  
               
                
                   
                      hyd:HydroFeature/@gml:id
                  
               
                
                   
                      
                         
                            
                        
                     
                  
               
                
            
        
      
   

   
   
   
    
    
       
          
             
                
                
                   
 hyd:Identifier/@gml:id
                  
               
                
                
                
                   
                      
                         
                            
                        
                     
                  
               
                
                   
                      
                         
                            
                        
                     
                  
               
                
                
                
                
            
         
      
   

   
   
   
    
    
       
          
             
                
                   
                      hyd:Event/@gml:id
                  
               
                
            
         
      
   

   
   
   
    
    
       
          
             
                
                   
                      hyd:Event/@gml:id
                  
               
                
                
                
                
            
         
      
   

   
   
   
    
    
       
          
             
                
                   
                      hyd:HydroFeature/@gml:id
                  
               
                
                   
                      hyd:Event/@gml:id
                  
               
            
         
      
   




06-055r1 Geopositioning Metadata AS Folder/gml/exampleRoads_BtsSchema.xsd
 

    
       
          0
      
   

    

    

    
    
       
          
             
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                     
                  
               
                
                   
                      
                         
                         
                     
                  
               
                
            
         
      
   




06-055r1 Geopositioning Metadata AS Folder/gml/feature.xsd
 
	 
		 feature.xsd
		 See ISO/DIS 19136 Clause 9.
A GML feature is a (representation of a) identifiable real-world object in a selected domain of discourse. The feature schema provides a framework for the creation of GML features and feature collections.
	
	 
	 
	 
		 
			 The basic feature model is given by the gml:AbstractFeatureType.
The content model for gml:AbstractFeatureType adds two specific properties suitable for geographic features to the content model defined in gml:AbstractGMLType. 
The value of the gml:boundedBy property describes an envelope that encloses the entire feature instance, and is primarily useful for supporting rapid searching for features that occur in a particular location. 
The value of the gml:location property describes the extent, position or relative location of the feature.
		
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  
gml:AbstractFeature may be thought of as “anything that is a GML feature” and may be used to define variables or templates in which the value of a GML property is “any feature”. This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.
		
	
	 
		 
			 This property describes the minimum bounding box or rectangle that encloses the entire feature.
		
	
	 
		 
			 
				 
				 
			
		
		 
	
	 
		 
			 gml:EnvelopeWithTimePeriod is provided for envelopes that include a temporal extent. It adds two time position properties, gml:beginPosition and gml:endPosition, which describe the extent of a time-envelope.  
Since gml:EnvelopeWithTimePeriod is assigned to the substitution group headed by gml:Envelope, it may be used whenever gml:Envelope is valid.
		
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
				 
				 
				 
			
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 The gml:locationName property element is a convenience property where the text value describes the location of the feature. If the location names are selected from a controlled list, then the list shall be identified in the codeSpace attribute.
		
	
	 
		 
			 The gml:locationReference property element is a convenience property where the text value referenced by the xlink:href attribute describes the location of the feature.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
			
		
	
	 
		 
			 deprecated
		
		 
			 
		
		 
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
		
	
	 
		 
			 deprecated
		
	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
		 
			 deprecated
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	 
		 
			 To create a collection of GML features, a property type shall be derived by extension from gml:AbstractFeatureMemberType.
By default, this abstract property type does not imply any ownership of the features in the collection. The owns attribute of gml:OwnershipAttributeGroup may be used on a property element instance to assert ownership of a feature in the collection. A collection shall not own a feature already owned by another object.
		
		 
		 
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/geometryAggregates.xsd
 
	 
		 geometryAggregates.xsd
		 See ISO/DIS 19136 12.3.
Geometric aggregates (i.e. instances of a subtype of gml:AbstractGeometricAggregateType) are arbitrary aggregations of geometry elements. They are not assumed to have any additional internal structure and are used to "collect" pieces of geometry of a specified type. Application schemas may use aggregates for features that use multiple geometric objects in their representations.
	
	 
	 
		 
			 
				 
			
		
	
	 
		 
			 gml:AbstractGeometricAggregate is the abstract head of the substitution group for all geometric aggregates.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 gml:MultiGeometry is a collection of one or more GML geometry objects of arbitrary type. 
The members of the geometric aggregate may be specified either using the "standard" property (gml:geometryMember) or the array property (gml:geometryMembers). It is also valid to use both the "standard" and the array properties in the same collection.
		
	
	 
		 
			 This property element either references a geometry element via the XLink-attributes or contains the geometry element.
		
	
	 
		 
			 This property element contains a list of geometry elements. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 A property that has a geometric aggregate as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a geometric aggregate via the XLink-attributes or contains the "multi geometry" element. multiGeometryProperty is the predefined property, which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractGeometricAggregate.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 A gml:MultiPoint consists of one or more gml:Points.
The members of the geometric aggregate may be specified either using the "standard" property (gml:pointMember) or the array property (gml:pointMembers). It is also valid to use both the "standard" and the array properties in the same collection.
		
	
	 
		 
			 This property element either references a Point via the XLink-attributes or contains the Point element.
		
	
	 
		 
			 This property element contains a list of points. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 A property that has a collection of points as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a point aggregate via the XLink-attributes or contains the "multi point" element. multiPointProperty is the predefined property, which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for MultiPoint.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 A gml:MultiCurve is defined by one or more gml:AbstractCurves.
The members of the geometric aggregate may be specified either using the "standard" property (gml:curveMember) or the array property (gml:curveMembers). It is also valid to use both the "standard" and the array properties in the same collection.
		
	
	 
		 
			 This property element contains a list of curves. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 A property that has a collection of curves as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a curve aggregate via the XLink-attributes or contains the "multi curve" element. multiCurveProperty is the predefined property, which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for MultiCurve.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 A gml:MultiSurface is defined by one or more gml:AbstractSurfaces.
The members of the geometric aggregate may be specified either using the "standard" property (gml:surfaceMember) or the array property (gml:surfaceMembers). It is also valid to use both the "standard" and the array properties in the same collection.
		
	
	 
		 
			 This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 A property that has a collection of surfaces as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a surface aggregate via the XLink-attributes or contains the "multi surface" element. multiSurfaceProperty is the predefined property, which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for MultiSurface.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 A gml:MultiSolid is defined by one or more gml:AbstractSolids.
The members of the geometric aggregate may be specified either using the "standard" property (gml:solidMember) or the array property (gml:solidMembers). It is also valid to use both the "standard" and the array properties in the same collection.
		
	
	 
		 
			 This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element, which is substitutable for gml:AbstractSolid.
		
	
	 
		 
			 This property element contains a list of solids. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 A property that has a collection of solids as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a solid aggregate via the XLink-attributes or contains the "multi solid" element. multiSolidProperty is the predefined property, which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for MultiSolid.
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/geometryBasic0d1d.xsd
 
	 
		 geometryBasic0d1d.xsd
		 See ISO/DIS 19136 Clause 10.
Any geometry element that inherits the semantics of AbstractGeometryType may be viewed as a set of direct positions. 
All of the classes derived from AbstractGeometryType inherit an optional association to a coordinate reference system. All direct positions shall directly or indirectly be associated with a coordinate reference system. When geometry elements are aggregated in another geometry element (such as a MultiGeometry or GeometricComplex), which already has a coordinate reference system specified, then these elements are assumed to be in that same coordinate reference system unless otherwise specified.
The geometry model distinguishes geometric primitives, aggregates and complexes. 
Geometric primitives, i.e. instances of a subtype of AbstractGeometricPrimitiveType, will be open, that is, they will not contain their boundary points; curves will not contain their end points, surfaces will not contain their boundary curves, and solids will not contain their bounding surfaces.
	
	 
	 
		 
			 All geometry elements are derived directly or indirectly from this abstract supertype. A geometry element may have an identifying attribute (gml:id), one or more names (elements identifier and name) and a description (elements description and descriptionReference) . It may be associated with a spatial reference system (attribute group gml:SRSReferenceGroup).
The following rules shall be adhered to:
-	Every geometry type shall derive from this abstract type.
-	Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the substitution group of AbstractGeometry.
		
		 
			 
				 
			
		
	
	 
		 
			 The attribute group SRSReferenceGroup is an optional reference to the CRS used by this geometry, with optional additional information to simplify the processing of the coordinates when a more complete definition of the CRS is not needed.
In general the attribute srsName points to a CRS instance of gml:AbstractCoordinateReferenceSystem. For well-known references it is not required that the CRS description exists at the location the URI points to. 
If no srsName attribute is given, the CRS shall be specified as part of the larger context this geometry element is part of.
		
		 
		 
		 
	
	 
		 
			 The attributes uomLabels and axisLabels, defined in the SRSInformationGroup attribute group, are optional additional and redundant information for a CRS to simplify the processing of the coordinate values when a more complete definition of the CRS is not needed. This information shall be the same as included in the complete definition of the CRS, referenced by the srsName attribute. When the srsName attribute is included, either both or neither of the axisLabels and uomLabels attributes shall be included. When the srsName attribute is omitted, both of these attributes shall be omitted.
The attribute axisLabels is an ordered list of labels for all the axes of this CRS. The gml:axisAbbrev value should be used for these axis labels, after spaces and forbidden characters are removed. When the srsName attribute is included, this attribute is optional. When the srsName attribute is omitted, this attribute shall also be omitted.
The attribute uomLabels is an ordered list of unit of measure (uom) labels for all the axes of this CRS. The value of the string in the gml:catalogSymbol should be used for this uom labels, after spaces and forbidden characters are removed. When the axisLabels attribute is included, this attribute shall also be included. When the axisLabels attribute is omitted, this attribute shall also be omitted.
		
		 
		 
	
	 
		 
			 The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.
		
	
	 
		 
			 A geometric property may either be any geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same or another document). Note that either the reference or the contained element shall be given, but not both or none.
If a feature has a property that takes a geometry element as its value, this is called a geometry property. A generic type for such a geometry property is GeometryPropertyType.
		
		 
			 
		
		 
		 
	
	 
		 
			 If a feature has a property which takes an array of geometry elements as its value, this is called a geometry array property. A generic type for such a geometry property is GeometryArrayPropertyType. 
The elements are always contained inline in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
		
		 
			 
		
		 
	
	 
		 
			 Direct position instances hold the coordinates for a position within some coordinate reference system (CRS). Since direct positions, as data types, will often be included in larger objects (such as geometry elements) that have references to CRS, the srsName attribute will in general be missing, if this particular direct position is included in a larger element with such a reference to a CRS. In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.
if no srsName attribute is given, the CRS shall be specified as part of the larger context this geometry element is part of, typically a geometric object like a point, curve, etc.
		
		 
			 
				 
			
		
	
	 
		 
			 
				 
					 
						 The presence of a dimension attribute implies the presence of the srsName attribute.
						 The presence of an axisLabels attribute implies the presence of the srsName attribute.
						 The presence of an uomLabels attribute implies the presence of the srsName attribute.
						 The presence of an uomLabels attribute implies the presence of the axisLabels attribute and vice versa.
					
				
			
		
	
	 
		 
			 posList instances (and other instances with the content model specified by DirectPositionListType) hold the coordinates for a sequence of direct positions within the same coordinate reference system (CRS).
if no srsName attribute is given, the CRS shall be specified as part of the larger context this geometry element is part of, typically a geometric object like a point, curve, etc. 
The optional attribute count specifies the number of direct positions in the list. If the attribute count is present then the attribute srsDimension shall be present, too.
The number of entries in the list is equal to the product of the dimensionality of the coordinate reference system (i.e. it is a derived value of the coordinate reference system definition) and the number of direct positions.
		
		 
			 
				 
				 
			
		
	
	 
	 
		 
			 GML supports two different ways to specify a geometric position: either by a direct position (a data type) or a point (a geometric object).
pos elements are positions that are “owned” by the geometric primitive encapsulating this geometric position.
pointProperty elements contain a point that may be referenced from other geometry elements or reference another point defined elsewhere (reuse of existing points).
		
		 
			 
			 
		
	
	 
		 
			 GML supports two different ways to specify a list of geometric positions: either by a sequence of geometric positions (by reusing the group definition) or a sequence of direct positions (element posList). 
The posList element allows for a compact way to specify the coordinates of the positions, if all positions are represented in the same coordinate reference system.
		
		 
			 
			 
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 For some applications the components of the position may be adjusted to yield a unit vector.
		
		 
			 
		
	
	 
	 
		 
			 
				 
				 
			
			 
				 
					 deprecated
				
			
			 
		
		 
	
	 
		 
			 Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the envelope).
The use of the properties “coordinates” and “pos” has been deprecated. The explicitly named properties “lowerCorner” and “upperCorner” shall be used instead.
		
	
	 
		 
			 gml:AbstractGeometricPrimitiveType is the abstract root type of the geometric primitives. A geometric primitive is a geometric object that is not decomposed further into other primitives in the system. All primitives are oriented in the direction implied by the sequence of their coordinate tuples.
		
		 
			 
		
	
	 
		 
			 The AbstractGeometricPrimitive element is the abstract head of the substitution group for all (pre- and user-defined) geometric primitives.
		
	
	 
		 
			 A property that has a geometric primitive as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 
				 
					 
						 
						 
					
				
			
		
	
	 
		 
			 A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.
		
	
	 
		 
			 A property that has a point as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 gml:PointArrayPropertyType is a container for an array of points. The elements are always contained inline in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
		
		 
			 
		
		 
	
	 
		 
			 This property element contains a list of point elements. pointArrayProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for a list of points.
		
	
	 
		 
			 gml:AbstractCurveType is an abstraction of a curve to support the different levels of complexity. The curve may always be viewed as a geometric primitive, i.e. is continuous.
		
		 
			 
		
	
	 
		 
			 The AbstractCurve element is the abstract head of the substitution group for all (continuous) curve elements.
		
	
	 
		 
			 A property that has a curve as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractCurve.
		
	
	 
		 
			 A container for an array of curves. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
		
		 
			 
		
		 
	
	 
		 
			 This property element contains a list of curve elements. curveArrayProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for a list of curves.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
				
			
		
	
	 
		 
			 A LineString is a special curve that consists of a single segment with linear interpolation. It is defined by two or more coordinate tuples, with linear interpolation between them. The number of direct positions in the list shall be at least two.
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/geometryBasic2d.xsd
 
	 
		 geometryBasic2d.xsd
		 See ISO/DIS 19136 Clause 10.
	
	 
	 
		 
			 gml:AbstractSurfaceType is an abstraction of a surface to support the different levels of complexity. A surface is always a continuous region of a plane.
		
		 
			 
		
	
	 
		 
			 The AbstractSurface element is the abstract head of the substitution group for all (continuous) surface elements.
		
	
	 
		 
			 A property that has a surface as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSurface.
		
	
	 
		 
			 gml:SurfaceArrayPropertyType is a container for an array of surfaces. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
		
		 
			 
		
		 
	
	 
		 
			 This property element contains a list of surface elements. surfaceArrayProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for a list of AbstractSurfaces.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 A Polygon is a special surface that is defined by a single surface patch (see D.3.6). The boundary of this patch is coplanar and the polygon uses planar interpolation in its interior. 
The elements exterior and interior describe the surface boundary of the polygon.
		
	
	 
		 
			 A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.
		
	
	 
		 
			 A boundary of a surface consists of a number of rings. The "interior" rings separate the surface / surface patch from the area enclosed by the rings.
		
	
	 
		 
	
	 
		 
			 An abstraction of a ring to support surface boundaries of different complexity.
The AbstractRing element is the abstract head of the substituition group for all closed boundaries of a surface patch.
		
	
	 
		 
			 A property with the content model of gml:AbstractRingPropertyType encapsulates a ring to represent the surface boundary property of a surface.
		
		 
			 
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
				
			
		
	
	 
		 
			 A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates shall be coincident. The number of direct positions in the list shall be at least four.
		
	
	 
		 
			 A property with the content model of gml:LinearRingPropertyType encapsulates a linear ring to represent a component of a surface boundary.
		
		 
			 
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/geometryComplexes.xsd
 
	 
		 geometryComplexes.xsd
		 See ISO/DIS 19136 12.2.
Geometric complexes (i.e. instances of gml:GeometricComplexType) are closed collections of geometric primitives, i.e. they will contain their boundaries. 
A geometric complex (gml:GeometricComplex) is defined by ISO 19107:2003, 6.6.1 as “a set of primitive geometric objects (in a common coordinate system) whose interiors are disjoint. Further, if a primitive is in a geometric complex, then there exists a set of primitives in that complex whose point-wise union is the boundary of this first primitive.”
A geometric composite (gml:CompositeCurve, gml:CompositeSurface and gml:CompositeSolid) represents a geometric complex with an underlying core geometry that is isomorphic to a primitive, i.e. it can be viewed as a primitive and as a complex. See ISO 19107:2003, 6.1 and 6.6.3 for more details on the nature of composite geometries.
Geometric complexes and composites are intended to be used in application schemas where the sharing of geometry is important.
	
	 
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
	 
		 
			 A property that has a geometric complex as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
				 
				 
				 
				 
			
		
		 
		 
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 A gml:CompositeCurve is represented by a sequence of (orientable) curves such that each curve in the sequence terminates at the start point of the subsequent curve in the list. 
curveMember references or contains inline one curve in the composite curve. 
The curves are contiguous, the collection of curves is ordered. Therefore, if provided, the aggregationType attribute shall have the value “sequence”.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 A gml:CompositeSurface is represented by a set of orientable surfaces. It is geometry type with all the geometric properties of a (primitive) surface. Essentially, a composite surface is a collection of surfaces that join in pairs on common boundary curves and which, when considered as a whole, form a single surface.
surfaceMember references or contains inline one surface in the composite surface. 
The surfaces are contiguous.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 gml:CompositeSolid implements ISO 19107 GM_CompositeSolid (see ISO 19107:2003, 6.6.7) as specified in D.2.3.6. 
A gml:CompositeSolid is represented by a set of orientable surfaces. It is a geometry type with all the geometric properties of a (primitive) solid. Essentially, a composite solid is a collection of solids that join in pairs on common boundary surfaces and which, when considered as a whole, form a single solid. 
solidMember references or contains one solid in the composite solid. The solids are contiguous.
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/geometryPrimitives.xsd
 
	 
		 geometryPrimitives.xsd
		 See ISO/DIS 19136 Clause 11.
Beside the “simple” geometric primitives specified in the previous Clause, this Clause specifies additional primitives to describe real world situations which require a more expressive geometry model.

	
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 A curve is a 1-dimensional primitive. Curves are continuous, connected, and have a measurable length in terms of the coordinate system. 
A curve is composed of one or more curve segments. Each curve segment within a curve may be defined using a different interpolation method. The curve segments are connected to one another, with the end point of each segment except the last being the start point of the next segment in the segment list.
The orientation of the curve is positive.
The element segments encapsulates the segments of the curve.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 The property baseCurve references or contains the base curve, i.e. it either references the base curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for AbstractCurve. The base curve has positive orientation.
		
	
	 
		 
			 OrientableCurve consists of a curve and an orientation. If the orientation is "+", then the OrientableCurve is identical to the baseCurve. If the orientation is "-", then the OrientableCurve is related to another AbstractCurve with a parameterization that reverses the sense of the curve traversal.
		
	
	 
		 
		 
		 
	
	 
		 
			 A curve segment defines a homogeneous segment of a curve.
The attributes numDerivativesAtStart, numDerivativesAtEnd and numDerivativesInterior specify the type of continuity as specified in ISO 19107:2003, 6.4.9.3.
The AbstractCurveSegment element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.
All curve segments shall have an attribute interpolation with type gml:CurveInterpolationType specifying the curve interpolation mechanism used for this segment. This mechanism uses the control points and control parameters to determine the position of this curve segment.
		
	
	 
		 
			 gml:CurveSegmentArrayPropertyType is a container for an array of curve segments.
		
		 
			 
		
	
	 
		 
			 This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 gml:CurveInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an application schema.
		
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
				
				 
			
		
	
	 
		 
			 A LineStringSegment is a curve segment that is defined by two or more control points including the start and end point, with linear interpolation between them.
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
				
				 
				 
			
		
	
	 
		 
			 An ArcString is a curve segment that uses three-point circular arc interpolation (“circularArc3Points”). The number of arcs in the arc string may be explicitly stated in the attribute numArc. The number of control points in the arc string shall be 2 * numArc + 1.
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
				
				 
			
		
	
	 
		 
			 An Arc is an arc string with only one arc unit, i.e. three control points including the start and end point. As arc is an arc string consisting of a single arc, the attribute “numArc” is fixed to "1".
		
	
	 
		 
			 
		
	
	 
		 
			 A Circle is an arc whose ends coincide to form a simple closed loop. The three control points shall be distinct non-co-linear points for the circle to be unambiguously defined. The arc is simply extended past the third control point until the first control point is encountered.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
					 
					 
				
				 
				 
			
		
	
	 
		 
			 This variant of the arc computes the mid points of the arcs instead of storing the coordinates directly. The control point sequence consists of the start and end points of each arc plus the bulge (see ISO 19107:2003, 6.4.17.2). The normal is a vector normal (perpendicular) to the chord of the arc (see ISO 19107:2003, 6.4.17.4).
The interpolation is fixed as "circularArc2PointWithBulge".
The number of arcs in the arc string may be explicitly stated in the attribute numArc. The number of control points in the arc string shall be numArc + 1.
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
					 
					 
				
				 
			
		
	
	 
		 
			 An ArcByBulge is an arc string with only one arc unit, i.e. two control points, one bulge and one normal vector.
As arc is an arc string consisting of a single arc, the attribute “numArc” is fixed to "1".
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
					 
					 
					 
				
				 
				 
			
		
	
	 
		 
			 This variant of the arc requires that the points on the arc shall be computed instead of storing the coordinates directly. The single control point is the center point of the arc plus the radius and the bearing at start and end. This representation can be used only in 2D.
The element radius specifies the radius of the arc.
The element startAngle specifies the bearing of the arc at the start.
The element endAngle specifies the bearing of the arc at the end.
The interpolation is fixed as "circularArcCenterPointWithRadius".
Since this type describes always a single arc, the attribute “numArc” is fixed to "1".
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
					 
				
			
		
	
	 
		 
			 A gml:CircleByCenterPoint is an gml:ArcByCenterPoint with identical start and end angle to form a full circle. Again, this representation can be used only in 2D.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
					 
					 
				
				 
				 
			
		
	
	 
		 
			 The number of control points shall be at least three.
vectorAtStart is the unit tangent vector at the start point of the spline. vectorAtEnd is the unit tangent vector at the end point of the spline. Only the direction of the vectors shall be used to determine the shape of the cubic spline, not their length.
interpolation is fixed as "cubicSpline".
degree shall be the degree of the polynomial used for the interpolation in this spline. Therefore the degree for a cubic spline is fixed to "3".
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
					 
					 
				
				 
				 
				 
			
		
	
	 
		 
			 A B-Spline is a piecewise parametric polynomial or rational curve described in terms of control points and basis functions as specified in ISO 19107:2003, 6.4.30. Therefore, interpolation may be either "polynomialSpline" or "rationalSpline" depending on the interpolation type; default is "polynomialSpline".
degree shall be the degree of the polynomial used for interpolation in this spline.
knot shall be the sequence of distinct knots used to define the spline basis functions (see ISO 19107:2003, 6.4.26.2).
The attribute isPolynomial shall be set to “true” if this is a polynomial spline (see ISO 19107:2003, 6.4.30.5).
The attribute knotType shall provide the type of knot distribution used in defining this spline (see ISO 19107:2003, 6.4.30.4).
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
			 
			 
		
	
	 
		 
			 gml:KnotPropertyType encapsulates a knot to use it in a geometric type.
		
		 
			 
				 
					 A knot is a breakpoint on a piecewise spline curve.
value is the value of the parameter at the knot of the spline (see ISO 19107:2003, 6.4.24.2).
multiplicity is the multiplicity of this knot used in the definition of the spline (with the same weight).
weight is the value of the averaging weight used for this knot of the spline.
				
			
		
	
	 
		 
			 This enumeration type specifies values for the knots’ type (see ISO 19107:2003, 6.4.25).
		
		 
			 
			 
			 
		
	
	 
		 
			 
				 
					 
						 
							 
							 
							 
						
						 
						 
					
					 
					 
				
				 
				 
				 
			
		
	
	 
		 
			 Bezier curves are polynomial splines that use Bezier or Bernstein polynomials for interpolation purposes. It is a special case of the B-Spline curve with two knots.
degree shall be the degree of the polynomial used for interpolation in this spline.
knot shall be the sequence of distinct knots used to define the spline basis functions.
interpolation is fixed as "polynomialSpline".
isPolynomial is fixed as “true”.
knotType is not relevant for Bezier curve segments.

		
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	 
		 
			 An offset curve is a curve at a constant distance from the basis curve. offsetBase is the base curve from which this curve is defined as an offset. distance and refDirection have the same meaning as specified in ISO 19107:2003, 6.4.23.
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
			 
			 
			 
		
	
	 
		 
			 location, refDirection, inDimension and outDimension have the same meaning as specified in ISO 19107:2003, 6.4.21.
		
	
	 
		 
			 
				 
					 
						 
							 
								 
							
						
					
					 
					 
					 
				
				 
			
		
	
	 
		 
			 A clothoid, or Cornu's spiral, is plane curve whose curvature is a fixed function of its length.
refLocation, startParameter, endParameter and scaleFactor have the same meaning as specified in ISO 19107:2003, 6.4.22.
interpolation is fixed as "clothoid".
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	 
		 
			 A sequence of geodesic segments. 
The number of control points shall be at least two.
interpolation is fixed as "geodesic".
The content model follows the general pattern for the encoding of curve segments.
		
	
	 
		 
			 
		
	
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 A Surface is a 2-dimensional primitive and is composed of one or more surface patches as specified in ISO 19107:2003, 6.3.17.1. The surface patches are connected to one another.
patches encapsulates the patches of the surface.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 The property baseSurface references or contains the base surface. The property baseSurface either references the base surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for gml:AbstractSurface. The base surface has positive orientation.
		
	
	 
		 
			 OrientableSurface consists of a surface and an orientation. If the orientation is "+", then the OrientableSurface is identical to the baseSurface. If the orientation is "-", then the OrientableSurface is a reference to a gml:AbstractSurface with an up-normal that reverses the direction for this OrientableSurface, the sense of "the top of the surface".
		
	
	 
	 
		 
			 A surface patch defines a homogenuous portion of a surface. 
The AbstractSurfacePatch element is the abstract head of the substituition group for all surface patch elements describing a continuous portion of a surface.
All surface patches shall have an attribute interpolation (declared in the types derived from gml:AbstractSurfacePatchType) specifying the interpolation mechanism used for the patch using gml:SurfaceInterpolationType.
		
	
	 
		 
			 gml:SurfacePatchArrayPropertyType is a container for a sequence of surface patches.
		
		 
			 
		
	
	 
		 
			 The patches property element contains the sequence of surface patches. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 gml:SurfaceInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an application schema.
		
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	 
		 
			 A gml:PolygonPatch is a surface patch that is defined by a set of boundary curves and an underlying surface to which these curves adhere. The curves shall be coplanar and the polygon uses planar interpolation in its interior. 
interpolation is fixed to "planar", i.e. an interpolation shall return points on a single plane. The boundary of the patch shall be contained within that plane.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 gml:Triangle represents a triangle as a surface patch with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring shall be four.
The ring (element exterior) shall be a gml:LinearRing and shall form a triangle, the first and the last position shall be coincident.
interpolation is fixed to "planar", i.e. an interpolation shall return points on a single plane. The boundary of the patch shall be contained within that plane.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 gml:Rectangle represents a rectangle as a surface patch with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring shall be five.
The ring (element exterior) shall be a gml:LinearRing and shall form a rectangle; the first and the last position shall be coincident.
interpolation is fixed to "planar", i.e. an interpolation shall return points on a single plane. The boundary of the patch shall be contained within that plane.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 A ring is used to represent a single connected component of a surface boundary as specified in ISO 19107:2003, 6.3.6.
Every gml:curveMember references or contains one curve, i.e. any element which is substitutable for gml:AbstractCurve. In the context of a ring, the curves describe the boundary of the surface. The sequence of curves shall be contiguous and connected in a cycle.
If provided, the aggregationType attribute shall have the value “sequence”.
		
	
	 
	 
		 
			 A property with the content model of gml:RingPropertyType encapsulates a ring to represent a component of a surface boundary.
		
		 
			 
		
	
	 
		 
			 A gml:PointGrid group contains or references points or positions which are organised into sequences or grids. All rows shall have the same number of positions (columns).
		
		 
			 
				 
					 
						 
							 
								 
							
						
					
				
			
		
	
	 
		 
			 
				 
			
		
	
	 
		 
			 The element provides a substitution group head for the surface patches based on parametric curves. All properties are specified in the derived subtypes. All derived subtypes shall conform to the constraints specified in ISO 19107:2003, 6.4.40.
If provided, the aggregationType attribute shall have the value “set”.
		
	
	 
		 
			 
				 
					 
				
				 
				 
			
		
	
	 
		 
			 if provided, rows gives the number of rows, columns the number of columns in the parameter grid. The parameter grid is represented by an instance of the gml:PointGrid group.
The element provides a substitution group head for the surface patches based on a grid. All derived subtypes shall conform to the constraints specified in ISO 19107:2003, 6.4.41.
		
	
	 
		 
			 
				 
				 
			
		
	
	 
	 
		 
			 
				 
				 
			
		
	
	 
	 
		 
			 
				 
				 
			
		
	
	 
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
	 
		 
			 A polyhedral surface is a surface composed of polygon patches connected along their common boundary curves. This differs from the surface type only in the restriction on the types of surface patches acceptable.
polygonPatches encapsulates the polygon patches of the polyhedral surface.
		
	
	 
		 
			 gml:PolygonPatchArrayPropertyType provides a container for an array of polygon patches.
		
		 
			 
				 
					 
				
			
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
	 
		 
			 A triangulated surface is a polyhedral surface that is composed only of triangles. There is no restriction on how the triangulation is derived.
trianglePatches encapsulates the triangles of the triangulated surface.
		
	
	 
		 
			 gml:TrianglePatchArrayPropertyType provides a container for an array of triangle patches.
		
		 
			 
				 
					 
				
			
		
	
	 
		 
			 
				 
					 
					 
					 
					 
						 
							 
								 
								 
							
						
					
				
			
		
	
	 
		 
			 A tin is a triangulated surface that uses the Delauny algorithm or a similar algorithm complemented with consideration of stoplines (stopLines), breaklines (breakLines), and maximum length of triangle sides (maxLength). controlPoint shall contain a set of the positions (three or more) used as posts for this TIN (corners of the triangles in the TIN). See ISO 19107:2003, 6.4.39 for details.
		
	
	 
		 
			 gml:LineStringSegmentArrayPropertyType provides a container for line strings.
		
		 
			 
		
	
	 
		 
			 gml:AbstractSolidType is an abstraction of a solid to support the different levels of complexity. The solid may always be viewed as a geometric primitive, i.e. is contiguous.
		
		 
			 
		
	
	 
		 
			 The AbstractSolid element is the abstract head of the substituition group for all (continuous) solid elements.
		
	
	 
		 
			 A property that has a solid as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
		
		 
			 
		
		 
		 
	
	 
		 
			 This property element either references a solid via the XLink-attributes or contains the solid element. solidProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSolid.
		
	
	 
		 
			 gml:SolidArrayPropertyType is a container for an array of solids. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.
		
		 
			 
		
		 
	
	 
		 
			 This property element contains a list of solid elements. solidArrayProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for a list of AbstractSolid.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 A solid is the basis for 3-dimensional geometry. The extent of a solid is defined by the boundary surfaces as specified in ISO 19107:2003, 6.3.18. exterior specifies the outer boundary, interior the inner boundary of the solid.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 A shell is used to represent a single connected component of a solid boundary as specified in ISO 19107:2003, 6.3.8.
Every gml:surfaceMember references or contains one surface, i.e. any element which is substitutable for gml:AbstractSurface. In the context of a shell, the surfaces describe the boundary of the solid. 
If provided, the aggregationType attribute shall have the value “set”.

		
	
	 
		 
			 This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.
		
	
	 
		 
			 A property with the content model of gml:ShellPropertyType encapsulates a shell to represent a component of a solid boundary.
		
		 
			 
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/gml.xsd
 
	 
		 gml.xsd
	
	
	 
	 
	 
	 
	 
	 
	




06-055r1 Geopositioning Metadata AS Folder/gml/gmlBase.xsd
 
	 
		 gmlBase.xsd
		 
			 Schematron validation
			 
			 
			 
				 
					 Property element may not carry both a reference to an object and contain an object.
					 Property element must either carry a reference to an object or contain an object.
				
			
		
		 See ISO/DIS 19136 7.2.
The gmlBase schema components establish the GML model and syntax, in particular
-	a root XML type from which XML types for all GML objects should be derived,
-	a pattern and components for GML properties,
-	patterns for collections and arrays, and components for generic collections and arrays,
-	components for associating metadata with GML objects,
-	components for constructing definitions and dictionaries.
	
	 
	 
	 
		 
			 This element has no type defined, and is therefore implicitly (according to the rules of W3C XML Schema) an XML Schema anyType. It is used as the head of an XML Schema substitution group which unifies complex content and certain simple content elements used for datatypes in GML, including the gml:AbstractGML substitution group.
		
	
	 
		 
			 The abstract element gml:AbstractGML is “any GML object having identity”.   It acts as the head of an XML Schema substitution group, which may include any element which is a GML feature, or other object, with identity.  This is used as a variable in content models in GML core and application schemas.  It is effectively an abstract superclass for all GML objects.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 
			 
			 
			 
			 
		
	
	 
		 
			 XLink components are the standard method to support hypertext referencing in XML. An XML Schema attribute group, gml:AssociationAttributeGroup, is provided to support the use of Xlinks as the method for indicating the value of a property by reference in a uniform manner in GML.
		
		 
		 
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 Applying this pattern shall restrict the multiplicity of objects in a property element using this content model to exactly one. An instance of this type shall contain an element representing an object, or serve as a pointer to a remote object.
Applying the pattern to define an application schema specific property type allows to restrict
-	the inline object to specified object types, 
-	the encoding to „by-reference only“ (see 7.2.3.7),
-	the encoding to „inline only“ (see 7.2.3.8).
		
	
	 
		 
			 
		
		 
		 
	
	 
		 
			 Encoding a GML property inline vs. by-reference shall not imply anything about the “ownership” of the contained or referenced GML Object, i.e. the encoding style shall not imply any “deep-copy” or “deep-delete” semantics. To express ownership over the contained or referenced GML Object, the gml:OwnershipAttributeGroup attribute group may be added to object-valued property elements. If the attribute group is not part of the content model of such a property element, then the value may not be “owned”.
When the value of the owns attribute is "true", the existence of inline or referenced object(s) depends upon the existence of the parent object.
		
		 
	
	 
		 
			 This element shows how an element 
	declaration may include a Schematron constraint to limit the property to act 
	in either inline or by-reference mode, but not both.
			 
				 
					 
						 
					
				
			
		
	
	 
		 
			 gml:abstractReference may be used as the head of a subtitution group of more specific elements providing a value by-reference.
		
	
	 
		 
			 gml:ReferenceType is intended to be used in application schemas directly, if a property element shall use a “by-reference only” encoding.
		
		 
		 
		 
	
	 
		 
			 gml:abstractInlineProperty may be used as the head of a subtitution group of more specific elements providing a value inline.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 If the value of an object property is another object and that object contains also a property for the association between the two objects, then this name of the reverse property may be encoded in a gml:reversePropertyName element in an appinfo annotation of the property element to document the constraint between the two properties. The value of the element shall contain the qualified name of the property element.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
		
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
			
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 The value of this property is a text description of the object. gml:description uses gml:StringOrRefType as its content model, so it may contain a simple text string content, or carry a reference to an external description. The use of gml:description to reference an external description has been deprecated and replaced by the gml:descriptionReference property.
		
	
	 
		 
			 The value of this property is a remote text description of the object. The xlink:href attribute of the gml:descriptionReference property references the external description.
		
	
	 
		 
			 The gml:name property provides a label or identifier for the object, commonly a descriptive name. An object may have several names, typically assigned by different authorities. gml:name uses the gml:CodeType content model.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace.  In common usage there will be one name per authority, so a processing application may select the name from its preferred codeSpace.
		
	
	 
		 
			 Often, a special identifier is assigned to an object by the maintaining authority with the intention that it is used in references to the object For such cases, the codeSpace shall be provided. That identifier is usually unique either globally or within an application domain. gml:identifier is a pre-defined property for such identifiers.
		
	
	 
		 
			 The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.
		
	
	 
		 
			 To create a collection of GML Objects that are not all features, a property type shall be derived by extension from gml:AbstractMemberType.
This abstract property type is intended to be used only in object types where software shall be able to identify that an instance of such an object type is to be interpreted as a collection of objects.
By default, this abstract property type does not imply any ownership of the objects in the collection. The owns attribute of gml:OwnershipAttributeGroup may be used on a property element instance to assert ownership of an object in the collection. A collection shall not own an object already owned by another object.

		
		 
		 
	
	 
		 
			 A GML Object Collection is any GML Object with a property element in its content model whose content model is derived by extension from gml:AbstractMemberType.
In addition, the complex type describing the content model of the GML Object Collection may also include a reference to the attribute group gml:AggregationAttributeGroup to provide additional information about the semantics of the object collection.  This information may be used by applications to group GML objects, and optionally to order and index them.
The allowed values for the aggregationType attribute are defined by gml:AggregationType. See 8.4 of ISO/IEC 11404:1996 for the meaning of the values in the enumeration.
		
		 
	
	 
		 
			 
			 
			 
			 
			 
			 
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
				
			
		
	
	 
		 
			 To associate metadata described by any XML Schema with a GML object, a property element shall be defined whose content model is derived by extension from gml:AbstractMetadataPropertyType. 
The value of such a property shall be metadata. The content model of such a property type, i.e. the metadata application schema shall be specified by the GML Application Schema.
By default, this abstract property type does not imply any ownership of the metadata. The owns attribute of gml:OwnershipAttributeGroup may be used on a metadata property element instance to assert ownership of the metadata. 
If metadata following the conceptual model of ISO 19115 is to be encoded in a GML document, the corresponding Implementation Specification specified in ISO/TS 19139 shall be used to encode the metadata information.

		
		 
		 
	
	 
		 
			 deprecated
		
		 
			 
		
		 
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
		 
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
				
			
		
	
	 
	 
	 




06-055r1 Geopositioning Metadata AS Folder/gml/grids.xsd
 
	 
		 grids.xsd
		 See ISO/DIS 19136 20.2.
An implicit description of geometry is one in which the items of the geometry do not explicitly appear in the encoding.  Instead, a compact notation records a set of parameters, and a set of objects may be generated using a rule with these parameters.  This Clause provides grid geometries that are used in the description of gridded coverages and other applications.
In GML two grid structures are defined, namely gml:Grid and gml:RectifiedGrid.
	
	 
	 
		 
			 The gml:Grid implicitly defines an unrectified grid, which is a network composed of two or more sets of curves in which the members of each set intersect the members of the other sets in an algorithmic way.  The region of interest within the grid is given in terms of its gml:limits, being the grid coordinates of  diagonally opposed corners of a rectangular region.  gml:axisLabels is provided with a list of labels of the axes of the grid (gml:axisName has been deprecated). gml:dimension specifies the dimension of the grid.  
The gml:limits element contains a single gml:GridEnvelope. The gml:low and gml:high property elements of the envelope are each integerLists, which are coordinate tuples, the coordinates being measured as offsets from the origin of the grid along each axis, of the diagonally opposing corners of a “rectangular” region of interest.
		
	
	 
	 
		 
			 
				 
					 
					 
						 
						 
					
				
				 
			
		
	
	 
		 
			 
		
	
	 
		 
			 
			 
		
	
	 
		 
			 A rectified grid is a grid for which there is an affine transformation between the grid coordinates and the coordinates of an external coordinate reference system. It is defined by specifying the position (in some geometric space) of the grid “origin” and of the vectors that specify the post locations.
Note that the grid limits (post indexes) and axis name properties are inherited from gml:GridType and that gml:RectifiedGrid adds a gml:origin property (contains or references a gml:Point) and a set of gml:offsetVector properties.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/measures.xsd
 
	 
		 measures.xsd
		 See ISO/DIS 19136 17.3.
gml:MeasureType is defined in the basicTypes schema.  The measure types defined here correspond with a set of convenience measure types described in ISO/TS 19103.  The XML implementation is based on the XML Schema simple type “double” which supports both decimal and scientific notation, and includes an XML attribute “uom” which refers to the units of measure for the value.  Note that, there is no requirement to store values using any particular format, and applications receiving elements of this type may choose to coerce the data to any other type as convenient. 

	
	 
	 
		 
			 The value of a physical quantity, together with its unit.
		
	
	 
		 
			 This is a prototypical definition for a specific measure type defined as a vacuous extension (i.e. aliases) of gml:MeasureType. In this case, the content model supports the description of a length (or distance) quantity, with its units. The unit of measure referenced by uom shall be suitable for a length, such as metres or feet.
		
		 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 
		
	
	 
		 
			 The gml:angle property element is used to record the value of an angle quantity as a single number, with its units.
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
			 
				 
				 
					 
					 
				
			
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
				 
					 
						 
							 
							 
							 
							 
							 
							 
						
					
				
			
		
	
	 
		 
			 deprecated
		
		 
			 
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
			 
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
		
	
	 
		 
			 deprecated
		
	
	 
		 
			 deprecated
		
		 
			 
			 
		
	
	 
		 
			 deprecated
		
		 
			 
			 
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/observation.xsd
 
	 
		 observation.xsd
		 See ISO/DIS 19136 Clause 19.
A GML observation models the act of observing, often with a camera, a person or some form of instrument.  An observation feature describes the “metadata” associated with an information capture event, together with a value for the result of the observation.  This covers a broad range of cases, from a tourist photo (not the photo but the act of taking the photo), to images acquired by space borne sensors or the measurement of a temperature 5 meters below the surfaces of a lake.
The basic structures introduced in this schema are intended to serve as the foundation for more comprehensive schemas for scientific, technical and engineering measurement schemas.

	
	 
	 
	 
	 
		 
			 The content model is a straightforward extension of gml:AbstractFeatureType; it automatically has the gml:identifier, gml:description, gml:descriptionReference, gml:name, and gml:boundedBy properties. 
The gml:validTime element describes the time of the observation. Note that this may be a time instant or a time period.
The gml:using property contains or references a description of a sensor, instrument or procedure used for the observation.
The gml:target property contains or references the specimen, region or station which is the object of the observation. This property is particularly useful for remote observations, such as photographs, where a generic location property might apply to the location of the camera or the location of the field of view, and thus may be ambiguous.  
The gml:subject element is provided as a convenient synonym for gml:target. This is the term commonly used in phtotography.  
The gml:resultOf property indicates the result of the observation.  The value may be inline, or a reference to a value elsewhere. If the value is inline, it shall be a member of the gml:AbstractObject substitution group.

		
	
	 
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	 
	 
		 
			 
		
		 
		 
	
	 
	 
	 
		 
			 
			 
		
		 
		 
	
	 
	 
		 
			 
		
		 
		 
	
	 
		 
			 A gml:DirectedObservation is the same as an observation except that it adds an additional gml:direction property. This is the direction in which the observation was acquired. Clearly this applies only to certain types of observations such as visual observations by people, or observations obtained from terrestrial cameras.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:DirectedObservationAtDistance adds an additional distance property. This is the distance from the observer to the subject of the observation. Clearly this applies only to certain types of observations such as visual observations by people, or observations obtained from terrestrial cameras.
		
	
	 
		 
			 
				 
					 
				
			
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/referenceSystems.xsd
 
	 
		 referenceSystems.xsd
		 See ISO/DIS 19136 13.2.
The reference systems schema components have two logical parts, which define elements and types for XML encoding of the definitions of:
-	Identified Object, inherited by the ten types of GML objects used for coordinate reference systems and coordinate operations
-	High-level part of the definitions of coordinate reference systems
This schema encodes the Identified Object and Reference System packages of the UML Model for ISO 19111.
	
	 
	 
	 
		 
			 gml:IdentifiedObjectType provides identification properties of a CRS-related object. In gml:DefinitionType, the gml:identifier element shall be the primary name by which this object is identified, encoding the "name" attribute in the UML model.
Zero or more of the gml:name elements can be an unordered set of "identifiers", encoding the "identifier" attribute in the UML model. Each of these gml:name elements can reference elsewhere the object's defining information or be an identifier by which this object can be referenced.
Zero or more other gml:name elements can be an unordered set of "alias" alternative names by which this CRS related object is identified, encoding the "alias" attributes in the UML model. An object may have several aliases, typically used in different contexts. The context for an alias is indicated by the value of its (optional) codeSpace attribute.
Any needed version information shall be included in the codeSpace attribute of a gml:identifier and gml:name elements. In this use, the gml:remarks element in the gml:DefinitionType shall contain comments on or information about this object, including data source information.
		
		 
			 
		
	
	 
		 
			 gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.
		
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.
		
		 
			 
				 
			
			 
		
	
	 
		 
			 The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".
		
	
	 
		 
			 gml:CRSPropertyType is a property type for association roles to a CRS abstract coordinate reference system, either referencing or containing the definition of that CRS.
		
		 
			 
		
		 
	
	 
		 
			 gml:crsRef is an association role either referencing or containing the definition of a CRS. This property element has been deprecated.
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/temporal.xsd
 
	 
		 temporal.xsd
		 See ISO/DIS 19136 15.2.
The GML temporal schemas include components for describing temporal geometry and topology, temporal reference systems, and the temporal characteristics of geographic data. The model underlying the representation constitutes a profile of the conceptual schema described in ISO 19108. The underlying spatiotemporal model strives to accommodate both feature-level and attribute-level time stamping; basic support for tracking moving objects is also included. 
Time is measured on two types of scales: interval and ordinal.  An interval scale offers a basis for measuring duration, an ordinal scale provides information only about relative position in time.
Two other ISO standards are relevant to describing temporal objects:  ISO 8601 describes encodings for time instants and time periods, as text strings with particular structure and punctuation; ISO 11404 provides a detailed description of time intervals as part of a general discussion of language independent datatypes.  
The temporal schemas cover two interrelated topics and provide basic schema components for representing temporal instants and periods, temporal topology, and reference systems; more specialized schema components defines components used for dynamic features. Instances of temporal geometric types are used as values for the temporal properties of geographic features. 
	
	 
	 
		 
			 gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:AbstractTimePrimitive acts as the head of a substitution group for geometric and topological temporal primitives.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:TimePrimitivePropertyType provides a standard content model for associations between an arbitrary member of the substitution group whose head is gml:AbstractTimePrimitive and another object.
		
		 
			 
		
		 
		 
	
	 
		 
			 gml:validTime is a convenience property element.
		
	
	 
		 
			 gml:RelatedTimeType provides a content model for indicating the relative position of an arbitrary member of the substitution group whose head is gml:AbstractTimePrimitive. It extends the generic gml:TimePrimitivePropertyType with an XML attribute relativePosition, whose value is selected from the set of 13 temporal relationships identified by Allen (1983)
		
		 
			 
				 
					 
						 
							 
							 
							 
							 
							 
							 
							 
							 
							 
							 
							 
							 
							 
						
					
				
			
		
	
	 
		 
			 gml:AbstractTimeComplex is an aggregation of temporal primitives and acts as the head of a substitution group for temporal complexes.
		
	
	 
		 
			 
		
	
	 
		 
			 gml:TimeGeometricPrimitive acts as the head of a substitution group for geometric temporal primitives.
A temporal geometry shall be associated with a temporal reference system through the frame attribute that provides a URI reference that identifies a description of the reference system. Following ISO 19108, the Gregorian calendar with UTC is the default reference system, but others may also be used. The GPS calendar is an alternative reference systems in common use.
The two geometric primitives in the temporal dimension are the instant and the period. GML components are defined to support these as follows.
		
	
	 
		 
			 
				 
			
		
	
	 
		 
			 gml:TimeInstant acts as a zero-dimensional geometric primitive that represents an identifiable position in time.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:TimeInstantPropertyType provides for associating a gml:TimeInstant with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 gml:TimePeriod acts as a one-dimensional geometric primitive that represents an identifiable extent in time.
The location in of a gml:TimePeriod is described by the temporal positions of the instants at which it begins and ends. The length of the period is equal to the temporal distance between the two bounding temporal positions. 
Both beginning and end may be described in terms of their direct position using gml:TimePositionType which is an XML Schema simple content type, or by reference to an indentifiable time instant using gml:TimeInstantPropertyType.
Alternatively a limit of a gml:TimePeriod may use the conventional GML property model to make a reference to a time instant described elsewhere, or a limit may be indicated as a direct position.
		
	
	 
		 
			 
				 
					 
						 
						 
					
					 
						 
						 
					
					 
				
			
		
	
	 
		 
			 gml:TimePeriodPropertyType provides for associating a gml:TimePeriod with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 The method for identifying a temporal position is specific to each temporal reference system.  gml:TimePositionType supports the description of temporal position according to the subtypes described in ISO 19108.
Values based on calendars and clocks use lexical formats that are based on ISO 8601, as described in XML Schema Part 2:2001. A decimal value may be used with coordinate systems such as GPS time or UNIX time. A URI may be used to provide a reference to some era in an ordinal reference system . 
In common with many of the components modelled as data types in the ISO 19100 series of International Standards, the corresponding GML component has simple content. However, the content model gml:TimePositionType is defined in several steps.
Three XML attributes appear on gml:TimePositionType:
A time value shall be associated with a temporal reference system through the frame attribute that provides a URI reference that identifies a description of the reference system. Following ISO 19108, the Gregorian calendar with UTC is the default reference system, but others may also be used. Components for describing temporal reference systems are described in 14.4, but it is not required that the reference system be described in this, as the reference may refer to anything that may be indentified with a URI.  
For time values using a calendar containing more than one era, the (optional) calendarEraName attribute provides the name of the calendar era.  
Inexact temporal positions may be expressed using the optional indeterminatePosition attribute.  This takes a value from an enumeration.
		
		 
			 
				 
				 
				 
			
		
	
	 
		 
			 These values are interpreted as follows: 
-	“unknown” indicates that no specific value for temporal position is provided.
-	“now” indicates that the specified value shall be replaced with the current temporal position whenever the value is accessed.
-	“before” indicates that the actual temporal position is unknown, but it is known to be before the specified value.
-	“after” indicates that the actual temporal position is unknown, but it is known to be after the specified value.
A value for indeterminatePosition may 
-	be used either alone, or 
-	qualify a specific value for temporal position.
		
		 
			 
			 
			 
			 
		
	
	 
		 
			 The simple type gml:TimePositionUnion is a union of XML Schema simple types which instantiate the subtypes for temporal position described in ISO 19108.
 An ordinal era may be referenced via URI.  A decimal value may be used to indicate the distance from the scale origin .  time is used for a position that recurs daily (see ISO 19108:2002 5.4.4.2).
 Finally, calendar and clock forms that support the representation of time in systems based on years, months, days, hours, minutes and seconds, in a notation following ISO 8601, are assembled by gml:CalDate
		
		 
	
	 
		 
	
	 
		 
			 This element is used directly as a property of gml:TimeInstant (see 15.2.2.3), and may also be used in application schemas.
		
	
	 
		 
			 The length of a time period.
		
		 
			 
			 
		
	
	 
		 
			 gml:duration conforms to the ISO 8601 syntax for temporal length as implemented by the XML Schema duration type.
		
	
	 
		 
			  gml:timeInterval conforms to ISO 11404 which is based on floating point values for temporal length.
ISO 11404 syntax specifies the use of a positiveInteger together with appropriate values for radix and factor. The resolution of the time interval is to one radix ^(-factor) of the specified time unit.
The value of the unit is either selected from the units for time intervals from ISO 31-1:1992, or is another suitable unit.  The encoding is defined for GML in gml:TimeUnitType. The second component of this union type provides a method for indicating time units other than the six standard units given in the enumeration.
		
	
	 
		 
			 
				 
				 
				 
			
		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
			 
				 
					 
				
			
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/temporalReferenceSystems.xsd
 
	 
		 temporalReferenceSystems.xsd
		 See ISO/DIS 19136 15.5.
A value in the time domain is measured relative to a temporal reference system. Common types of reference systems include calendars, ordinal temporal reference systems, and temporal coordinate systems (time elapsed since some epoch).  The primary temporal reference system for use with geographic information is the Gregorian Calendar and 24 hour local or Coordinated Universal Time (UTC), but special applications may entail the use of alternative reference systems.  The Julian day numbering system is a temporal coordinate system that has an origin earlier than any known calendar, at noon on 1 January 4713 BC in the Julian proleptic calendar, and is useful in transformations between dates in different calendars.    
In GML seven concrete elements are used to describe temporal reference systems: gml:TimeReferenceSystem, gml:TimeCoordinateSystem, gml:TimeCalendar, gml:TimeCalendarEra, gml:TimeClock, gml:TimeOrdinalReferenceSystem, and gml:TimeOrdinalEra.
	
	 
	 
	 
		 
			 A reference system is characterized in terms of its domain of validity: the spatial and temporal extent over which it is applicable. The basic GML element for temporal reference systems is gml:TimeReferenceSystem.  Its content model extends gml:DefinitionType with one additional property, gml:domainOfValidity.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 A temporal coordinate system shall be based on a continuous interval scale defined in terms of a single time interval.
The differences to ISO 19108 TM_CoordinateSystem are:
-	the origin is specified either using the property gml:originPosition whose value is a direct time position, or using the property gml:origin whose model is gml:TimeInstantPropertyType; this permits more flexibility in representation and also supports referring to a value fixed elsewhere;
-	the interval uses gml:TimeIntervalLengthType.

		
	
	 
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	 
		 
			 A calendar is a discrete temporal reference system that provides a basis for defining temporal position to a resolution of one day.
gml:TimeCalendar adds one property to those inherited from gml:TimeReferenceSystem. A gml:referenceFrame provides a link to a gml:TimeCalendarEra that it uses. A  gml:TimeCalendar may reference more than one calendar era. 
The referenceFrame element follows the standard GML property model, allowing the association to be instantiated either using an inline description using the gml:TimeCalendarEra element, or a link to a gml:TimeCalendarEra which is explicit elsewhere.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:TimeCalendarEra inherits basic properties from gml:DefinitionType and has the following additional properties:
-	gml:referenceEvent is the name or description of a mythical or historic event which fixes the position of the base scale of the calendar era.  This is given as text or using a link to description held elsewhere.
-	gml:referenceDate specifies the date of the referenceEvent expressed as a date in the given calendar.  In most calendars, this date is the origin (i.e., the first day) of the scale, but this is not always true.
-	gml:julianReference specifies the Julian date that corresponds to the reference date.  The Julian day number is an integer value; the Julian date is a decimal value that allows greater resolution.  Transforming calendar dates to and from Julian dates provides a relatively simple basis for transforming dates from one calendar to another.
-	gml:epochOfUse is the period for which the calendar era was used as a basis for dating.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	 
		 
			 gml:TimeCalendarPropertyType provides for associating a gml:TimeCalendar with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 gml:TimeCalendarEraPropertyType provides for associating a gml:TimeCalendarEra with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 A clock provides a basis for defining temporal position within a day. A clock shall be used with a calendar in order to provide a complete description of a temporal position within a specific day.
gml:TimeClock adds the following properties to those inherited from gml:TimeReferenceSystemType:
-	gml:referenceEvent is the name or description of an event, such as solar noon or sunrise, which fixes the position of the base scale of the clock.
-	gml:referenceTime specifies the time of day associated with the reference event expressed as a time of day in the given clock. The reference time is usually the origin of the clock scale. 
-	gml:utcReference specifies the 24 hour local or UTC time that corresponds to the reference time.
-	gml:dateBasis contains or references the calendars that use this clock.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	 
		 
			 gml:TimeClockPropertyType provides for associating a gml:TimeClock with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 In some applications of geographic information — such as geology and archaeology — relative position in time is known more precisely than absolute time or duration. The order of events in time can be well established, but the magnitude of the intervals between them cannot be accurately determined; in such cases, the use of an ordinal temporal reference system is appropriate. An ordinal temporal reference system is composed of a sequence of named coterminous eras, which may in turn be composed of sequences of member eras at a finer scale, giving the whole a hierarchical structure of eras of verying resolution. 
An ordinal temporal reference system whose component eras are not further subdivided is effectively a temporal topological complex constrained to be a linear graph. An ordinal temporal reference system some or all of whose component eras are subdivided is effectively a temporal topological complex with the constraint that parallel branches may only be constructed in pairs where one is a single temporal ordinal era and the other is a sequence of temporal ordinal eras that are called "members" of the "group". This constraint means that within a single temporal ordinal reference system, the relative position of all temporal ordinal eras is unambiguous.  
The positions of the beginning and end of a given era may calibrate the relative time scale.
gml:TimeOrdinalReferenceSystem adds one or more gml:component properties to the generic temporal reference system model.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 Its content model follows the pattern of gml:TimeEdge, inheriting standard properties from gml:DefinitionType, and adding gml:start, gml:end and gml:extent properties, a set of gml:member properties which indicate ordered gml:TimeOrdinalEra elements, and a gml:group property which points to the parent era.
The recursive inclusion of gml:TimeOrdinalEra elements allow the construction of an arbitrary depth hierarchical ordinal reference schema, such that an ordinal era at a given level of the hierarchy includes a sequence of shorter, coterminous ordinal eras.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	 
		 
			 gml:TimeOrdinalEraPropertyType provides for associating a gml:TimeOrdinalEra with an object.
		
		 
			 
		
		 
		 
	




06-055r1 Geopositioning Metadata AS Folder/gml/temporalTopology.xsd
 
	 
		 temporalTopology.xsd
		 See ISO/DIS 19136 15.3.
Temporal topology is described in terms of time complexes, nodes, and edges, and the connectivity between these. Temporal topology does not directly provide information about temporal position. It is used in the case of describing a lineage or a history (e.g. a family tree expressing evolution of species, an ecological cycle, a lineage of lands or buildings, or a history of separation and merger of administrative boundaries). The following Subclauses specifies the temporal topology as temporal characteristics of features in compliance with ISO 19108.
	
	 
	 
		 
			 gml:TimeTopologyPrimitive acts as the head of a substitution group for topological temporal primitives.
Temporal topology primitives shall imply the ordering information between features or feature properties. The temporal connection of features can be examined if they have temporal topology primitives as values of their properties. Usually, an instantaneous feature associates with a time node, and a static feature associates with a time edge.  A feature with both modes associates with the temporal topology primitive: a supertype of time nodes and time edges.
A topological primitive is always connected to one or more other topological primitives, and is, therefore, always a member of a topological complex. In a GML instance, this will often be indicated by the primitives being described by elements that are descendents of an element describing a complex. However, in order to support the case where a temporal topological primitive is described in another context, the optional complex property is provided, which carries a reference to the parent temporal topological complex.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:TimeTopologyPrimitivePropertyType provides for associating a gml:AbstractTimeTopologyPrimitive with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 A temporal topology complex shall be the connected acyclic directed graph composed of temporal topological primitives, i.e. time nodes and time edges. Because a time edge may not exist without two time nodes on its boundaries, static features have time edges from a temporal topology complex as the values of their temporal properties, regardless of explicit declarations.
A temporal topology complex expresses a linear or a non-linear graph. A temporal linear graph, composed of a sequence of time edges, provides a lineage described only by “substitution” of feature instances or feature element values. A time node as the start or the end of the graph connects with at least one time edge. A time node other than the start and the end shall connect to at least two time edges: one of starting from the node, and another ending at the node.
A temporal topological complex is a set of connected temporal topological primitives. The member primtives are indicated, either by reference or by value, using the primitive property.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 gml:TimeTopologyComplexPropertyType provides for associating a gml:TimeTopologyComplex with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 A time node is a zero-dimensional topological primitive that represents an identifiable node in time (it is equivalent to a point in space). A node may act as the termination or initiation of any number of time edges. A time node may be realised as a geometry, its position, whose value is a time instant.
		
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	 
		 
			 gml:TimeNodePropertyType provides for associating a gml:TimeNode with an object
		
		 
			 
		
		 
		 
	
	 
		 
			 A time edge is a one-dimensional topological primitive. It is an open interval that starts and ends at a node. The edge may be realised as a geometry whose value is a time period.
		
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	 
		 
			 gml:TimeEdgePropertyType provides for associating a gml:TimeEdge with an object.
		
		 
			 
		
		 
		 
	
	 
		 
			 deprecated
		
		 
			 
			 
			 
			 
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/topology.xsd
 
	 
		 topology.xsd
		 See ISO/DIS 19136 Clause 14.
Topology is the branch of mathematics describing the properties of objects which are invariant under continuous deformation. For example, a circle is topologically equivalent to an ellipse because one can be transformed into the other by stretching. In geographic modelling, the foremost use of topology is in accelerating computational geometry. The constructs of topology allow characterisation of the spatial relationships between objects using simple combinatorial or algebraic algorithms. Topology, realised by the appropriate geometry, also allows a compact and unambiguous mechanism for expressing shared geometry among geographic features.
There are four instantiable classes of primitive topology objects, one for each dimension up to 3D. In addition, topological complexes are supported, too. 
There is strong symmetry in the (topological boundary and coboundary) relationships between topology primitives of adjacent dimensions. Topology primitives are bounded by directed primitives of one lower dimension. The coboundary of each topology primitive is formed from directed topology primitives of one higher dimension.
	
	 
	 
		 
			 This abstract type supplies the root or base type for all topological elements including primitives and complexes. It inherits AbstractGMLType and hence can be identified using the gml:id attribute.
		
		 
			 
		
	
	 
	 
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 gml:AbstractTopoPrimitive acts as the base type for all topological primitives. Topology primitives are the atomic (smallest possible) units of a topology complex. 
Each topology primitive may contain references to other topology primitives of codimension 2 or more (gml:isolated). Conversely, nodes may have faces as containers and nodes and edges may have solids as containers (gml:container).
		
	
	 
		 
			 The gml:isolated property element implements the role of the same name of the ISO 19107 “Isolated In” association (see ISO 19107:2003, 7.3.10.4).
		
	
	 
		 
			 
				 
				 
			
		
		 
		 
	
	 
		 
			 The gml:container property element implements the role of the same name of the ISO 19107 “Isolated In” association (see ISO 19107:2003, 7.3.10.4).
		
	
	 
		 
			 
				 
				 
			
		
		 
		 
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	 
		 
			 gml:Node represents the 0-dimensional primitive.
The optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. 
If provided, the aggregationType attribute shall have the value “sequence”.
A node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).
		
	
	 
		 
			 A gml:directedNode property element describes the boundary of topology edges and is used in the support of topological point features via the gml:TopoPoint expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included node is used: start (“-“) or end (“+”) node.
		
	
	 
		 
			 
		
		 
		 
		 
	
	 
		 
			 
				 
					 
					 
					 
				
				 
			
		
	
	 
		 
			 gml:Edge represents the 1-dimensional primitive.
The topological boundary of an Edge (gml:directedNode) consists of a negatively directed start Node and a positively directed end Node.   
The optional coboundary of an edge (gml:directedFace) is a circular sequence of directed faces which are incident on this edge in document order. In the 2D case, the orientation of the face on the left of the edge is "+"; the orientation of the face on the right on its right is "-". 
If provided, the aggregationType attribute shall have the value “sequence”.
An edge may optionally be realised by a 1-dimensional geometric primitive (gml:curveProperty).
		
	
	 
		 
			 A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.
		
	
	 
		 
			 
		
		 
		 
		 
	
	 
		 
			 
				 
					 
					 
					 
				
				 
			
		
	
	 
		 
			 gml:Face represents the 2-dimensional topology primitive.
The topological boundary of a face (gml:directedEdge) consists of a sequence of directed edges. If provided, the aggregationType attribute shall have the value “sequence”.
The optional coboundary of a face (gml:directedTopoSolid) is a pair of directed solids which are bounded by this face. A positively directed solid corresponds to a solid which lies in the direction of the negatively directed normal to the face in any geometric realisation. 
A face may optionally be realised by a 2-dimensional geometric primitive (gml:surfaceProperty).
		
	
	 
		 
			 The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.
		
	
	 
		 
			 
		
		 
		 
		 
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	 
		 
			 gml:TopoSolid represents the 3-dimensional topology primitive. 
The topological boundary of a solid (gml:directedFace) consists of a set of directed faces.
A solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).
		
	
	 
		 
			 The gml:directedSolid property element describes the coBoundary of topology faces and is used in the support of volume features via the gml:TopoVolume expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included solid appears in the face coboundary. In the context of a gml:TopoVolume the orientation attribute has no meaning.
		
	
	 
		 
			 
		
		 
		 
		 
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 The intended use of gml:TopoPoint is to appear within a point feature to express the structural and possibly geometric relationships of this feature to other features via shared node definitions.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 The gml:topoPointProperty property element may be used in features to express their relationship to the referenced topology node.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 gml:TopoCurve represents a homogeneous topological expression, a sequence of directed edges, which if realised are isomorphic to a geometric curve primitive. The intended use of gml:TopoCurve is to appear within a line feature to express the structural and geometric relationships of this feature to other features via the shared edge definitions.
If provided, the aggregationType attribute shall have the value “sequence”.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 The gml:topoCurveProperty property element may be used in features to express their relationship to the referenced topology edges.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 gml:TopoSurface represents a homogeneous topological expression, a set of directed faces, which if realised are isomorphic to a geometric surface primitive. The intended use of gml:TopoSurface is to appear within a surface feature to express the structural and possibly geometric relationships of this surface feature to other features via the shared face definitions.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 The gml:topoSurfaceProperty property element may be used in features to express their relationship to the referenced topology faces.
		
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	 
		 
			 gml:TopoVolume represents a homogeneous topological expression, a set of directed topologic solids, which if realised are isomorphic to a geometric solid primitive. The intended use of gml:TopoVolume is to appear within a solid feature to express the structural and geometric relationships of this solid feature to other features via the shared solid definitions.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 The gml:topoVolumeProperty element may be used in features to express their relationship to the referenced topology volume.
		
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
				 
				 
			
		
	
	 
		 
			 gml:TopoComplex is a collection of topological primitives.
Each complex holds a reference to its maximal complex (gml:maximalComplex) and optionally to sub- or super-complexes (gml:subComplex, gml:superComplex). 
A topology complex contains its primitive and sub-complex members.

		
	
	 
		 
			 The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.
		
	
	 
		 
			 The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.
		
	
	 
		 
			 The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.
		
	
	 
		 
			 The gml:topoPrimitiveMember property element encodes for the relationship between a topology complex and a single topology primitive.
		
	
	 
		 
			 
		
		 
		 
	
	 
		 
			 The gml:topoPrimitiveMembers property element encodes the relationship between a topology complex and an arbitrary number of topology primitives.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 
		
		 
	
	 
		 
			 The gml:topoComplexProperty property element encodes the relationship between a GML object and a topological complex.
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/units.xsd
 
	 
		 units.xsd
		 See ISO/DIS 17.2.
Several GML Schema components concern or require a reference scale or units of measure.  Units are required for quantities that may occur as values of properties of feature types, as the results of observations, in the range parameters of a coverage, and for measures used in Coordinate Reference System definitions. 
The basic unit definition is an extension of the general gml:Definition element defined in 16.2.1.  Three specialized elements for unit definition are further derived from this. 
This model is based on the SI system of units [ISO 1000], which distinguishes between Base Units and Derived Units.  
-	Base Units are the preferred units for a set of orthogonal fundamental quantities which define the particular system of units, which may not be derived by combination of other base units.  
-	Derived Units are the preferred units for other quantities in the system, which may be defined by algebraic combination of the base units.  
In some application areas Conventional units are used, which may be converted to the preferred units using a scaling factor or a formula which defines a re-scaling and offset.  The set of preferred units for all physical quantity types in a particular system of units is composed of the union of its base units and derived units.  
Unit definitions are substitutable for the gml:Definition element declared as part of the dictionary model.  A dictionary that contains only unit definitions and references to unit definitions is a units dictionary.  
	
	 
	 
		 
			 The element gml:unitOfMeasure is a property element to refer to a unit of measure. This is an empty element which carries a reference to a unit of measure definition.
		
	
	 
		 
		 
	
	 
		 
			 A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.
The content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  
The gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.
		
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	 
		 
			 The gml:quantityType property indicates the phenomenon to which the units apply. This element contains an informal description of the phenomenon or type of physical quantity that is measured or observed. When the physical quantity is the result of an observation or measurement, this term is known as observable type or measurand.
The use of gml:quantityType for references to remote values is deprecated.
		
	
	 
		 
			 The gml:quantityTypeReference property indicates the phenomenon to which the units apply. The content is a reference to a remote value.
		
	
	 
		 
			 The catalogSymbol is the preferred lexical symbol used for this unit of measure.
The codeSpace attribute in gml:CodeType identifies a namespace for the catalog symbol value, and might reference the external catalog. The string value in gml:CodeType contains the value of a symbol that should be unique within this catalog namespace. This symbol often appears explicitly in the catalog, but it could be a combination of symbols using a specified algebra of units.
		
	
	 
		 
			 A base unit is a unit of measure that cannot be derived by combination of other base units within a particular system of units.  For example, in the SI system of units, the base units are metre, kilogram, second, Ampere, Kelvin, mole, and candela, for the physical quantity types length, mass, time interval, electric current, thermodynamic temperature, amount of substance and luminous intensity, respectively.
gml:BaseUnit extends generic gml:UnitDefinition with the property gml:unitsSystem, which carries a reference to the units system to which this base unit is asserted to belong.  
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 Derived units are defined by combination of other units.  Derived units are used for quantities other than those corresponding to the base units, such as hertz (s-1) for frequency, Newton (kg.m/s2) for force.  Derived units based directly on base units are usually preferred for quantities other than the fundamental quantities within a system. If a derived unit is not the preferred unit, the gml:ConventionalUnit element should be used instead.
The gml:DerivedUnit extends gml:UnitDefinition with the property gml:derivationUnitTerms.
		
	
	 
		 
			 
				 
					 
				
			
		
	
	 
		 
			 A set of gml:derivationUnitTerm elements describes a derived unit of measure.  Each element carries an integer exponent.  The terms are combined by raising each referenced unit to the power of its exponent and forming the product.
This unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent may be positive or negative, but not zero.
		
	
	 
		 
			 
				 
			
		
	
	 
		 
			 Conventional units that are neither base units nor defined by direct combination of base units are used in many application domains.  For example electronVolt for energy, feet and nautical miles for length.  In most cases there is a known, usually linear, conversion to a preferred unit which is either a base unit or derived by direct combination of base units.
The gml:ConventionalUnit extends gml:UnitDefinition with a property that describes a conversion to a preferred unit for this physical quantity.  When the conversion is exact, the element gml:conversionToPreferredUnit should be used, or when the conversion is not exact the element gml:roughConversionToPreferredUnit is available. Both of these elements have the same content model.  The gml:derivationUnitTerm property defined above is included to allow a user to optionally record how this unit may be derived from other (“more primitive”) units.
		
	
	 
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	 
		 
			 The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.
		
	
	 
		 
			 The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.
		
	
	 
		 
			 The inherited attribute uom references the preferred unit that this conversion applies to. The conversion of a unit to the preferred unit for this physical quantity type is specified by an arithmetic conversion (scaling and/or offset). The content model extends gml:UnitOfMeasureType, which has a mandatory attribute uom which identifies the preferred unit for the physical quantity type that this conversion applies to. The conversion is specified by a choice of 
-	gml:factor, which defines the scale factor, or
-	gml:formula, which defines a formula 
by which a value using the conventional unit of measure can be converted to obtain the corresponding value using the preferred unit of measure.  
The formula defines the parameters of a simple formula by which a value using the conventional unit of measure can be converted to the corresponding value using the preferred unit of measure. The formula element contains elements a, b, c and d, whose values use the XML Schema type double. These values are used in the formula y = (a + bx) / (c + dx), where x is a value using this unit, and y is the corresponding value using the base unit. The elements a and d are optional, and if values are not provided, those parameters are considered to be zero. If values are not provided for both a and d, the formula is equivalent to a fraction with numerator and denominator parameters.
		
		 
			 
				 
					 
					 
				
			
		
	
	 
		 
			 
			 
			 
			 
		
	




06-055r1 Geopositioning Metadata AS Folder/gml/valueObjects.xsd
 
	 
		 valueObjects.xsd
		 See ISO/DIS 19136 17.5.
The elements declared in this Clause build on other GML schema components, in particular gml:AbstractTimeObject, gml:AbstractGeometry, and the following types:  gml:MeasureType, gml:MeasureListType, gml:CodeType, gml:CodeOrNilReasonListType, gml:BooleanOrNilReasonListType, gml:IntegerOrNilReasonList.  
Of particular interest are elements that are the heads of substitution groups, and one named choice group. These are the primary reasons for the value objects schema, since they may act as variables in the definition of content models, such as Observations, when it is desired to permit alternative value types to occur some of which may have complex content such as arrays, geometry and time objects, and where it is useful not to prescribe the actual value type in advance. The members of the groups include quantities, category classifications, boolean, count, temporal and spatial values, and aggregates of these.  
The value objects are defined in a hierarchy. The following relationships are defined:
-	Concrete elements gml:Quantity, gml:Category, gml:Count and gml:Boolean are substitutable for the abstract element gml:AbstractScalarValue.  
-	Concrete elements gml:QuantityList, gml:CategoryList, gml:CountList and gml:BooleanList are substitutable for the abstract element gml:AbstractScalarValueList.  
-	Concrete element gml:ValueArray is substitutable for the concrete element gml:CompositeValue.  
-	Abstract elements gml:AbstractScalarValue and gml:AbstractScalarValueList, and concrete elements gml:CompositeValue, gml:ValueExtent, gml:CategoryExtent, gml:CountExtent and gml:QuantityExtent are substitutable for abstract element gml:AbstractValue.  
-	Abstract elements gml:AbstractValue, gml:AbstractTimeObject and gml:AbstractGeometry are all in a choice group named gml:Value, which is used for compositing in gml:CompositeValue and gml:ValueExtent.  
-	Schemas which need values may use the abstract element gml:AbstractValue in a content model in order to permit any of the gml:AbstractScalarValues, gml:AbstractScalarValueLists, gml:CompositeValue or gml:ValueExtent to occur in an instance, or the named group gml:Value to also permit gml:AbstractTimeObjects, gml:AbstractGeometrys.  
	
	 
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
	 
		 
			 A gml:Category has an optional XML attribute codeSpace, whose value is a URI which identifies a dictionary, codelist or authority for the term.
		
		 
			 
				 
					 
				
			
		
	
	 
	 
		 
			 
				 
					 
				
			
		
	
	 
	 
		 
			 An XML attribute uom (“unit of measure”) is required, whose value is a URI which identifies the definition of a ratio scale or units by which the numeric value shall be multiplied, or an interval or position scale on which the value occurs.
		
		 
			 
				 
					 
				
			
		
	
	 
	 
		 
			 gml:AbstractValue is an abstract element which acts as the head of a substitution group which contains gml:AbstractScalarValue, gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and (transitively) the elements in their substitution groups.
These elements may be used in an application schema as variables, so that in an XML instance document any member of its substitution group may occur.
		
	
	 
		 
			 gml:AbstractScalarValue is an abstract element which acts as the head of a substitution group which contains gml:Boolean, gml:Category, gml:Count and gml:Quantity, and (transitively) the elements in their substitution groups.
		
	
	 
		 
			 gml:AbstractScalarValueList is an abstract element which acts as the head of a substitution group which contains gml:BooleanList, gml:CategoryList, gml:CountList and gml:QuantityList, and (transitively) the elements in their substitution groups.
		
	
	 
		 
			 This is a convenience choice group which unifies generic values defined in this Clause with spatial and temporal objects and the measures described above, so that any of these may be used within aggregate values.
		
		 
			 
			 
			 
			 
		
	
	 
		 
			 Property that refers to, or contains, a Value. Convenience element for general use.
		
	
	 
		 
			 Property that refers to, or contains, a Value.
		
	
	 
		 
			 
		
		 
		 
	
	 
		 
			 Property that contains Values.
		
	
	 
		 
			 
		
		 
	
	 
		 
			 gml:CompositeValue is an aggregate value built from other values . It contains zero or an arbitrary number of gml:valueComponent elements, and zero or one gml:valueComponents property elements.  It may be used for strongly coupled aggregates (vectors, tensors) or for arbitrary collections of values.
		
	
	 
		 
			 
				 
					 
					 
				
				 
			
		
	
	 
		 
			 A Value Array is used for homogeneous arrays of primitive and aggregate values.  
The member values may be scalars, composites, arrays or lists.
ValueArray has the same content model as CompositeValue, but the member values shall be homogeneous.  The element declaration contains a Schematron constraint which expresses this restriction precisely.  Since the members are homogeneous, the gml:referenceSystem (uom, codeSpace) may be specified on the gml:ValueArray itself and inherited by all the members if desired.
			 
				 
					 
						 ValueArray may not carry both a reference to a codeSpace and a uom
					
				
				 
					 
						 All components of   shall be of the same type
						 All components of   shall be of the same type
					
				
			
		
	
	 
		 
			 
				 
			
		
	
	 
		 
		 
	
	 
	 
		 
			 
				 
			
		
	
	 
	 
		 
			 
		
	
	 
	 
		 
			 
				 
			
		
	
	 
		 
			 
		
		 
	
	 
		 
			 
		
		 
	
	 
		 
			 
		
		 
	
	 
		 
			 
		
		 
	




06-055r1 Geopositioning Metadata AS Folder/igm/0.0.0/igmCovarianceMatrix.xsd
 
	 
		 igmCovarianceMatrix.xsd 2006-06-04
		 This XML Schema Document encodes the CovarianceMatrix package of the "GML 3.2 image geopositioning metadata application schema", as an application schema of ISO 19139. This XML Schema Document is also uses GML 3.2.
		Copyright (c) 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 
	
	
	 
	 
	 
		 
			 This import statement imports gmlBase.xsd from GML 3.2.0. 
		
	
	
	 
		 
			 Ordered sequence of values for adjacent covariance matrix cells. 
			 This element extends AbstractDQ_Result to produce the needed restriction of DQ_QuantitativeResult_Type, since the definition of DQ_QuantitativeResult_Type cannot be validly restricted. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Value unit for reporting a data quality result. In this CellValues element, these units shall be an ordered list of the units for each covariance matrix row, with the same units for each column, and with the unit for each matrix cell being the product of the corresponding row and column units. 
						
					
					 
						 
							 Statistical method used to determine the value. In this CellValues element, this element is allowed but is not expected to be included. 
						
					
					 
						 
							 Ordered list of one or more covariance matrix cell values. 
						
					
				
			
		
	
	
	 
		 
			 Association to a CellValues object, always encoded in-line. 
		
		 
			 
		
	
	
	
	 
		 
			 Ordered sequence of values for adjacent covariance matrix cells with starting cell position. 
		
	
	
	 
		 
			 
				 
					 
						 
						 Index of row in covariance matrix of first cell value included. 
						
					
					 
						 
							 Index of column in covariance matrix of first cell value included. 
						
					
				
			
		
	
	
	 
		 
			 Association to a PositionedCellValues object, always encoded in-line. 
		
		 
			 
		
	
	
	
	 
		 
			 Generic covariance matrix error estimates, usually for statistically-correlated sets of parameters, containing ordered list of parameter names for matrix rows and columns. 
			 This element extends AbstractObject_Type to produce the needed restriction of AbstractDQ_PositionalAccuracy_Type, since the definition of AbstractDQ_PositionalAccuracy_Type cannot be validly restricted. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Name of the test applied to the data. In a covariance matrix element, this element is allowed but is not expected to be included. 
						
					
					 
						 
							 Description of the measure. In a covariance matrix element, this element is allowed but is not expected to be included. 
						
					
					 
						 
							 Description of the evaluation method. In a covariance matrix element, this element is allowed but is not expected to be included. 
						
					
					 
						 
							 Number of rows and columns in this covariance matrix. 
						
					
					 
						 
							 Ordered list of names of adjusted parameters included in this covariance matrix. 
						
					
				
			
		
	
	
	 
		 
			 Association to a CovarianceMatrix object, normally by reference. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Covariance matrix containing non-zero values for only the matrix diagonal cells. (Such a matrix is for a statistically-uncorrelated set of parameters). For this DiagonalCovarianceMatrix, the "value" element shall contain an ordered list of the values of only the cells on the matrix diagonal. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Ordered sequence of values for adjacent covariance matrix cells. 
						
					
				
			
		
	
	
	 
		 
			 Generic covariance matrix error estimates, for statistically-correlated sets of parameters. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Unordered list of one or more ordered sequences of values for adjacent covariance matrix cells. 
						
					
				
			
		
	
	
	 
		 
			 Covariance matrix containing the values for all matrix cells, for a symmetric matrix. For this Full Covariance Matrix, one "result" element containing a PositionedCellValues element shall be included for each matrix row. Each “result” element shall contain the value of one diagonal matrix cell, followed by the values of all other cells to the right in that matrix row (and down in that matrix column). Each sequence shall end when the right edge of this matrix is reached. 
		
	
	
	 
		 
			 Covariance matrix containing only or mostly the values of non-zero matrix cells, for a symmetric matrix. For this Sparse Covariance Matrix, each “result” element containing a PositionedCellValues element shall contain the value of one non-zero matrix cell, followed by the values of other cells to the right in that matrix row. Each sequence shall end when several sequential zero cell values are reached or the right edge of this matrix is reached. Each “result” element shall contain a list of the values of this sequence of (mostly non-zero) matrix cells. 
		
	
	
	 
		 
			 Covariance matrix containing the values of all non-zero matrix cells, for a symmetric matrix with only zero values in the top-right and bottom-left corners. For this Banded Covariance Matrix, one “result” element containing a PositionedCellValues element shall be included for each matrix row. Each “result” element shall contain the value of one diagonal matrix cell, followed by the values of other cells to the right in that matrix row (and down in that matrix column). Each sequence shall end when there are no more non-zero cell values in that row or the right edge of this matrix is reached. 
		
	
	




06-055r1 Geopositioning Metadata AS Folder/igm/0.0.0/igmImageGeometry.xsd
 
	 
		 igmImageGeometry.xsd 2006-06-04
		 This XML Schema Document encodes the ImageGeometry package of the "GML 3.2 image geopositioning metadata application schema". 
		Copyright (c) 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 
	
	
	 
		 
			 This import statement imports coordinateOperations.xsd from GML 3.2.0. 
		
	
	 
		 
			 This import statement imports geometryBasic2d.xsd from GML 3.2.0. 
		
	
	 
	 
	 
	
	 
		 
			 Orientation metadata for one image. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Reference to pixels of this image. 
						
					
					 
						 
							 Association to group of parameter values determined for this image. 
						
					
				
			
		
	
	
	 
		 
			 Association to image orientation, normally by reference. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Definition of a group of one or more images that were or will be adjusted as a group. A group of images can be either: 1) a strip of overlapping images collected in one pass, 2) a block of images covering a roughly rectangular area, 3) a group of blocks of images, or 4) a single image (being adjusted to control points). 
		
	
	
	 
		 
			 
				 
					 
					 
						 
							 Time when this group adjustment was performed or last changed. 
						
					
					 
						 
							 Unordered list of one or more associations to image parameter values determined by this adjustment group. 
						
					
					 
						 
							 Unordered list of zero or more associations to object positions determined by this adjustment group. 
						
					
					 
						 
							 Unordered list of zero or more associations to group of sensor parameters determined by this adjustment group. 
						
					
					 
						 
							 Association to error estimates for all the image parameter values and object postion coordinates from this adjustment. 
						
					
					 
						 
							 Association to approximate footprint of this adjustment group. Should be included when applicable. 
						
					
					 
						 
							 Unordered list of one or more associations to unordered lists of equal parameters for this adjusted group. Shall be included whenever applicable. 
						
					
					 
						 
							 Association to summary of this adjustment of this adjusted group. Shall be included after adjustment performed. 
						
					
				
			
		
	
	
	 
		 
			 Status of this adjustment of this group of images. 
		
	
	
	 
		 
			 Association to a polygon, always encoded inline. Each of these Polygon objects shall reference the geodetic coordinate reference system of these polygons. 
		
		 
			 
		
	
	
	 
		 
			 Association to adjustment group, normally by reference. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Group of parameter values for one adjustment of one image, including most exterior orientation parameters. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Association to the definition of the operation parameter group for which this element provides parameter values. 
						
					
					 
						 
							 Association to the image orientation using this group of image parameter values. 
						
					
					 
						 
							 Association to the adjustment group that produced this group of image parameter values. 
						
					
					 
					 
						 
							 Association to calibrated sensor parameter values used by this image parameter adjustment. 
						
					
					 
						 
							 Association to approximate footprint of this image using this group of image parameter values. Should be included when applicable. 
						
					
					 
						 
							 Association to the list of the adjustable parameters in this group of image parameter values. 
						
					
					 
						 
							 Summary of positional accuracy of this image using this group of parameter values. 
						
					
				
			
		
	
	
	 
		 
			 Status of this group of image parameter values. 
		
	
	
	 
		 
			 Association to group of image parameter values, either encoded inline or referenced. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Group of image parameter values for one image collected by a sensor which was stationary during image collection. A concrete subclass of this abstract class must be specified for each specific stationary image geometry (sensor) mathematical model, in an extension of this GML image geopositioning metadata application schema. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Association to sensor position coordinates at the collection time. 
						
					
					 
						 
							 Association to sensor attitude at the collection time. This geopositioning metadata structure assumes that GM_Point is interpreted to allow recording of the four quantities used to specify the attitude of an imaging sensor, in place of the three coordinates of an imaging sensor position. 
						
					
				
			
		
	
	
	 
		 
			 Association to a point, usually encoded inline. Each of these Point objects shall reference the geodetic coordinate reference system for these positions and attitudes. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Group of image parameter values for one image collected by a sensor which moved during image collection. A concrete subclass of this abstract class must be specified for each specific moving image geometry (sensor) mathematical model, in an extension of this GML image geopositioning metadata application schema. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Association to sensor path position coordinates during the collection period. 
						
					
					 
						 
							 Association to sensor attitude “history” during the collection period. This geopositioning metadata structure assumes that GM_Curve is interpreted to allow recording of the four quantities used to specify the attitude of an imaging sensor, in place of the three coordinates of an imaging sensor position. 
						
					
				
			
		
	
	
	 
		 
			 Association to a curve, either encoded inline or referenced. Each of these Curve objects shall reference the geodetic coordinate reference system for these positions and attitudes. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 List of the adjustable parameters in a group of image parameter values, for the adjustment group that includes these parameter values. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Unordered list of one or more names of adjustable parameters in group of image parameter values. 
						
					
				
			
		
	
	
	 
		 
			 Association to list of adjustable parameters in this group of image parameters, normally by reference. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 List of adjustable parameters in an adjustment group that are constrained to have equal values. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Unordered list of two or more names of adjustable parameters that are constrained to have the same value as all others in this list. 
						
					
				
			
		
	
	
	 
		 
			 Association to list of equal parameters, either encoded inline or referenced. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Summary of the estimated positional accuracies of positions extracted using this image with this group of parameter values. 
		
	
	
	 
		 
			 
				 
					 Estimated absolute (external) horizontal error in object positions extracted using this image. 
				
			
			 
				 
					 Estimated absolute (external) elevation error in object positions extracted using this image with its stereo mate image in this adjusted group. Shall be included when at least one stereo mate image is included in this adjusted group. 
				
			
			 
				 
					 Estimated (relative internal) horizontal difference between object positions extracted using this image and overlapping image(s) in this adjusted group. Shall be included when at one or more overlapping images, excluding any stereo mate image(s), are included in this adjusted group. 
				
			
			 
				 
					 Estimated (relative internal) elevation difference between object positions extracted using this image and overlapping image(s) in this adjusted group. Shall be included when one or more overlapping stereo pairs images included in this adjusted group. 
				
			
		
	
	
	 
		 
			 Association to summary of the estimated positional accuracies, always encoded inline . 
		
		 
			 
		
	
	
	
	 
		 
			 Summary of the results of this adjustment. 
		
	
	
	 
		 
			 
				 
					 Number of adjustment computation iterations executed. 
				
			
			 
				 
					 Number of images whose image parameters were adjusted. 
				
			
			 
				 
					 Number of tie points whose image position coordinates were used, and object positions estimated. 
				
			
			 
				 
					 Number of control points whose object and image position coordinates were used, and object positions estimated. 
				
			
			 
				 
					 Number of check points whose object positions were estimated using image position coordinates with final image parameters (but were not used in adjustment). 
				
			
			 
				 
					 Adjustment results passed all required tests (or checks). 
				
			
			 
				 
					 Adjustment results passed this identified test. Shall be included for each identified test that was passed by adjustment results. 
				
			
			 
				 
					 Adjustment results failed this identified test. Shall be included for each identified test that was failed by adjustment results. 
				
			
		
	
	
	 
		 
			 Association to summary of results of this adjustment, always encoded inline . 
		
		 
			 
		
	
	




06-055r1 Geopositioning Metadata AS Folder/igm/0.0.0/igmObjectPoint.xsd
 
	 
		 igmObjectPoint.xsd 2006-06-04
		 This XML Schema Document encodes the ObjectPoint package of the "GML 3.2 image geopositioning metadata application schema". 
		Copyright (c) 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 
	
	
	 
		 
			 This import statement imports coordinateReferenceSystems.xsd from GML 3.2.0. 
		
	
	 
	 
	
	 
		 
			 Description of one object point, including its identification. 
		
	
	
	 
		 
			 
				 
					 
					 
						 
							 Unordered list of zero or more associations to image positions for this object point. 
						
					
					 
						 
							 Unordered list of zero or more associations to object positions for this object point. 
						
					
					 
						 
							 Unordered list of zero or more associations to identification images for this object point. 
						
					
				
			
		
	
	
	 
		 
			 Type of this object point. 
		
	
	
	 
		 
			 Association to a ObjectPoint, normally by reference. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Measured image position for an object point. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Association to image in which this image position was measured. 
						
					
					 
					 
						 
							 Association to measured image position coordinates. This Point object shall reference the ImageCRS of the image in which this position was measured. 
						
					
					 
						 
							 Association to absolute position error estimates for this image position. 
						
					
				
			
		
	
	
	 
		 
			 Status of this image position. 
		
	
	
	 
		 
			 Association to an ImagePosition, either encoded inline or referenced. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Object position for an object point. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Association to description (including identification) of this object point. 
						
					
					 
					 
						 
							 Number of object position coordinates that are known. 
						
					
					 
						 
							 Association to object position coordinates. This Point object shall reference the geodetic CRS in which this position was determined. 
						
					
					 
						 
							 Association to position error estimates for this object position, including absolute errors of this object position and errors relative to other object positions. 
						
					
				
			
		
	
	
	 
		 
			 Status of this object position. 
		
	
	
	 
		 
			 Association to a ObjectPosition, normally by reference. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Image patch identifying one object point, located at the center of this patch. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Image pixels in identification image patch. 
						
					
					 
						 
							 Association to the grid CRS for this image patch. 
						
					
				
			
		
	
	
	 
		 
			 Association to an IdentificationImage, normally by reference. 
		
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/igm/0.0.0/igmSensorCalibration.xsd
 
	 
		 igmSensorCalibration.xsd 2006-06-03
		 This XML Schema Document encodes the SensorCalibration package of the "GML 3.2 image geopositioning metadata application schema". 
		Copyright (c) 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 
	
	
	 
		 
			 This import statement imports coordinateOperations.xsd from GML 3.2.0. 
		
	
	
	 
		 
			 Calibration (interior orientation) data for one imaging sensor. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Unordered list of associations to group of parameter values determined for this sensor. 
						
					
				
			
		
	
	
	 
		 
			 Association to ImageSensor, normally by reference. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 Generic set of calibrated parameter values for one imaging sensor and sensor configuration, including most interior orientation parameters. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Association to image sensor using this group of sensor parameter values. 
						
					
					 
				
			
		
	
	
	 
		 
			 Status of this group of sensor parameter values. 
		
	
	
	 
		 
			 Association to SensorParameterValues, normally by reference. 
		
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/igm/0.0.0/igmSensorModel.xsd
 
	 
		 igmSensorModel.xsd 2006-06-03
		 This XML Schema Document encodes the SensorModel package of the "GML 3.2 image geopositioning metadata application schema". 
		Copyright (c) 2006 Open Geospatial Consortium, Inc. All Rights Reserved. 
	
	
	 
		 
			 This import statement imports coordinateOperations.xsd from GML 3.2.0. 
		
	
	 
	
	 
		 
			 Definition of one object-to-image coordinate transformation, using one group of (adjusted) image parameter values, which contains one group of (calibrated) sensor parameter values. 
		
	
	
	 
		 
			 
				 
					 
						 
							 Association to the operation method used by this coordinate operation.
						
					
					 
						 
							 Association to the group of parameter values used by this coordinate operation. 
						
					
				
			
		
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gco/basicTypes.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:00:05 ====== 
	
	
	 
	 
	 
	
	
	
	
	 
		 
			 A TypeName is a LocalName that references either a recordType or object type in some form of schema. The stored value "aName" is the returned value for the "aName()" operation. This is the types name.  - For parsing from types (or objects) the parsible name normally uses a "." navigation separator, so that it is of the form  [class].[member].[memberOfMember]. ...)
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 A MemberName is a LocalName that references either an attribute slot in a record or  recordType or an attribute, operation, or association role in an object instance or  type description in some form of schema. The stored value "aName" is the returned value for the "aName()" operation.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Use to represent the possible cardinality of a relation. Represented by a set of simple multiplicity ranges.
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 A component of a multiplicity, consisting of an non-negative lower bound, and a potentially infinite upper bound.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	 
		 
	
	
	 
	
	 
		 
			 
			 
		
		 
	
	
	
	
	 
		 
			 
			 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gco/gco.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:00:06 ====== 
	
	
	 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gco/gcoBase.xsd
 
	
	 
		 This schema provides:
		1.  tools to handle specific objects like "code lists" and "record";
		2. Some XML types representing that do not follow the general encoding rules.
	
	
	 
	 
	
	
	
	
	
	 
		 
		 
	
	
	 
	
	
	
	 
		 
		 
	
	
	 
	
	 
		 
		 
		 
	
	
	
	 
		 
		 
	
	
	
	
	
	 
		 
			 
				 
				 
				 
			
		
	
	
	
	 		
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/applicationSchema.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:03 ====== 
	
	
	 
	 
	
	
	
	 
		 
			 Information about the application schema used to build the dataset
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/citation.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:04 ====== 
	
	
	 
	 
	
	
	
	 
		 
			 Identification of, and means of communication with, person(s) and organisations associated with the dataset
		
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Standardized resource reference
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Location of the responsible individual or organisation
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information about online sources from which the dataset, specification, or community profile name and extended metadata elements can be obtained.
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information required enabling contact with the  responsible person and/or organisation
		
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Telephone numbers for contacting the responsible individual or organisation
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/constraints.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:01 ====== 
	
	
	 
	
	
	
	 
		 
			 Restrictions on the access and use of a dataset or metadata
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Restrictions and legal prerequisites for accessing and using the dataset.
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Handling restrictions imposed on the dataset because of national security, privacy, or other concerns
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/content.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:03 ====== 
	
	
	 
	 
	
	
	
	 
		 
			 Information identifing the feature catalogue
		
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information about the domain of the raster cell
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information about an image's suitability for use
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Set of adjacent wavelengths in the electro-magnetic spectrum with a common characteristic, such as the visible band
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/dataQuality.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:01 ====== 
	
	
	 
	 
	
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 quantitative_result from Quality Procedures -  - renamed to remove implied use limitiation.
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Quantitative_conformance_measure from Quality Procedures.  -  - Renamed to remove implied use limitation -  - OCL - -- result is type specified by valueDomain - result.tupleType = valueDomain
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/distribution.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:03 ====== 
	
	
	 
	 
	
	
	
	 
		 
			 Information about the media on which the data can be distributed
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Technical means and media by which a dataset is obtained from the distributor
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Common ways in which the dataset may be obtained or received, and related instructions and fee information
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information about the distributor
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information about the distributor of and options for obtaining the dataset
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Description of the form of the data to be distributed
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/extent.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:04 ====== 
	
	
	 
	 
	 
	 
	 
	
	
	
	 
		 
			 Time period covered by the content of the dataset
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Vertical domain of dataset
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Boundary enclosing the dataset expressed as the closed set of (x,y) coordinates of the polygon (last point replicates first point)
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information about spatial, vertical, and temporal extent
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Geographic area of the dataset
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Geographic area of the entire dataset referenced to WGS 84
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Extent with respect to date and time
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/freeText.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 03-17-2005 17:21:53 ====== Informative package (concepts are not implementable) - pragmatic approach for encoding
	
	
	 
	 
	
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
				 
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/gmd.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:04 ====== 
	
	
	 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/identification.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:05 ====== 
	
	
	 
	 
	 
	 
	
	
	
	 
		 
			 Basic information about data
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Graphic that provides an illustration of the dataset (should include a legend for the graphic)
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 See 19119 for further info
		
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Brief description of ways in which the dataset is currently used.
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Keywords, their type and reference source
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Encapsulates the dataset aggregation information
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	 
		 
			 High-level geospatial data thematic classification to assist in the grouping and search of available geospatial datasets
		
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/maintenance.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:04 ====== Status of the dataset or progress of a review
	
	
	 
	 
	 
	
	
	
	 
		 
			 Information about the scope and frequency of updating
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Description of the class of information covered by the information
		
		 
			 
			 
			 
			 
			 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/metadataApplication.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:05 ====== 
	
	
	 
	 
	
	
	
	 
		 
			 Identifiable collection of datasets
		
		 
			 
				 
					 
					 
					 
					
					 
					
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Identifiable collection of data
		
		 
			 
				 
					 
					
					 
					
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/metadataEntity.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:00 ====== 
	
	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	
	
	
	 
		 
			 Information about the metadata
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/metadataExtension.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:03 ====== Method used to represent geographic information in the dataset
	
	
	 
	 
	
	
	
	 
		 
			 New metadata element, not found in ISO 19115, which is required to describe geographic data
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information describing metadata extensions.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
			 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/portrayalCatalogue.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:03 ====== 
	
	
	 
	 
	
	
	
	 
		 
			 Information identifing the portrayal catalogue used
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/referenceSystem.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:04 ====== 
	
	
	 
	 
	 
	
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Description of the spatial and temporal reference systems used in the dataset
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmd/spatialRepresentation.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:40:02 ====== Frequency with which modifications and deletations are made to the data after it is first produced
	
	
	 
	 
	 
	
	
	
	 
		 
			 Types and numbers of raster spatial objects in the dataset
		
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Information about the vector spatial objects in the dataset
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Digital mechanism used to represent spatial information
		
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
			 
			 
			 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmx/catalogues.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 04-27-2005 17:16:11 ====== Handcrafted
	
	
	 
	 
	 
	 
	 
	
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmx/codelistItem.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 03-15-2005 09:14:50 ====== 
	
	
	 
	 
	 
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Constraints: - 1) metadataProperty.card = 0 - 2) dictionaryEntry.card = 0
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 Constraint: codeEntry.type = ML_CodeListDefinition
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmx/crsItem.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 03-15-2005 09:15:11 ====== 
	
	
	 
	 
	 
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmx/extendedTypes.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 03-14-2005 12:00:20 ====== Handcrafted
	
	
	 
		 
	
	
	
	
	
	
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
	
	
	
	
	
	 
		 
			 
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gmx/gmx.xsd
   This file was generated from ISO TC/211 UML class diagrams == 03-18-2005 11:12:17 ======  



06-055r1 Geopositioning Metadata AS Folder/iso19139/gmx/gmxUsage.xsd
   This file was generated from ISO TC/211 UML class diagrams == 04-27-2005 17:15:30 ======                                                                     



06-055r1 Geopositioning Metadata AS Folder/iso19139/gmx/uomItem.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 03-15-2005 09:15:02 ====== 
	
	
	 
	 
	 
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
		 
			 XML attributes contraints: - 1) Id is mandatory - 2) codeSpace (type xsd:anyURI) is mandatory
		
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
		
		 
		 
	
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gsr/gsr.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:24:48 ====== 
	
	
	 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gsr/spatialReferencing.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:24:48 ====== 
	
	
	 
	 
	
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gss/geometry.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:14:37 ====== The geometry packages (Figure 4) contain the various classes for coordinate geometry. All of these classes through the root class GM_Object inherit an optional association to a coordinate reference system. All direct positions exposed through the interfaces defined in this standard shall be in the coordinate reference system of the geometric object accessed. All elements of a geometric complex, composite, or aggregate shall be associated to the same coordinate reference system. When instances of GM_Object are aggregated in another GM_Object (such as a GM_Aggregate, or GM_Complex) which already has a coordinate reference system specified, then these elements are assumed to be in that same coordinate reference system unless otherwise specified.  - The geometry package has several internal packages that separate primitive geometric objects, aggregates and complexes, which have a more elaborate internal structure than simple aggregates. Figure 4 shows the dependencies between the geometry packages as well as a list of classes for each package - Figure 5 shows the basic classes defined in the geometry packages. Any object that inherits the semantics of the GM_Object acts as a set of direct positions. Its behavior will be determined by which direct positions it contains. Objects under GM_Primitive will be open, that is, they will not contain their boundary points; curves will not contain their end points, surfaces will not contain their boundary curves, and solids will not contain their bounding surfaces. Objects under GM_Complex will be closed, that is, they will contain their boundary points. This leads to some apparent ambiguity. A representation of a line as a primitive must reference its end points, but will not contain these points as a set of direct positions. A representation of a line as a complex will also reference its end points, and will contain these points as a set of direct positions. This means that identical digital representations will have slightly different semantics depending on whether they are accessed as primitives or complexes.  - This difference of semantics is most striking in the GM_CompositeCurve. Composite curves are used to represent features whose geometry could also be represented as curve primitives. From a cartographic point of view, these two representations are not different. From a topological point of view, they are different. This distinction appears in the inheritance diagram (Figure 5) as an inheritance relationship between GM_CompositeCurve and GM_OrientableCurve. The primary semantics of a GM_CompositeCurve (see 6.6.5) is as a closed GM_Object, but it may also act as an open GM_Object under GM_Primitive operations (see 6.3.10). Interface protocols depending upon the topological details of this object will have to be distinguished as to whether they have been inherited from GM_Primitive or GM_Complex, where the distinction first occurs. Even though these protocols have been inherited from the same operations defined at GM_Object, they will act differently depending upon the branch of the inheritance tree from which they have inherited semantics. Creators of implementation profiles may take this into account and use a proxy mechanism for realization relationships that cause semantic dissonance. Such a procedure will be necessary in object-oriented programming and databases in systems that disallow multiple inheritance or make limiting assumptions about method binding.
	
	
	 
	 
	
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gss/gss.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:14:37 ====== This package contains the normative (Geometry and Topology) parts of the model for ISO 19107. This document should be referred to as the official description of the Model. If there are any differences, then ISO 19107 takes precedence.  -  - This packages also contains example (informative) of applications of 19107.
	
	
	 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gts/gts.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:18:09 ====== 
	
	
	 
	
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/gts/temporalObjects.xsd
 
	
	 
		 This file was generated from ISO TC/211 UML class diagrams == 01-26-2005 12:18:09 ====== 
	
	
	 
	 
	
	
	
	
	
	
	 
		 
			 
		
		 
		 
	
	
	
	 
	
	 
		 
			 
		
		 
	
	




06-055r1 Geopositioning Metadata AS Folder/iso19139/version.txt
Preliminary ISO/TS 19139 schema documents - version date: 2005-09-07 (with adapted schemaLocation values)
These files are preliminary versions. It is intended to eventually replace them with the published ISO/TS 19139 schema (or use a reference to a permanently available http-accessible version).




06-055r1 Geopositioning Metadata AS Folder/xlink/1.0.1/xlinks.xsd
 
	 
		 xlinks.xsd v3.0b2 2001-07
		 Primary editor: Arliss Whiteside. Last updated 2005-09-26 
		Copyright (c) Open Geospatial Consortium, Inc. (2005) 
		
	
	
	
	 
	
	 
	 
	 
	
	 
		 
			 
        The 'show' attribute is used to communicate the desired presentation 
        of the ending resource on traversal from the starting resource; it's 
        value should be treated as follows: 
        new - load ending resource in a new window, frame, pane, or other 
              presentation context
        replace - load the resource in the same window, frame, pane, or 
                  other presentation context
        embed - load ending resource in place of the presentation of the 
                starting resource
        other - behavior is unconstrained; examine other markup in the 
                link for hints 
        none - behavior is unconstrained 
      
		
		 
			 
				 
				 
				 
				 
				 
			
		
	
	 
		 
			 
        The 'actuate' attribute is used to communicate the desired timing 
        of traversal from the starting resource to the ending resource; 
        it's value should be treated as follows:
        onLoad - traverse to the ending resource immediately on loading 
                 the starting resource 
        onRequest - traverse from the starting resource to the ending 
                    resource only on a post-loading event triggered for 
                    this purpose 
        other - behavior is unconstrained; examine other markup in link 
                for hints 
        none - behavior is unconstrained
      
		
		 
			 
				 
				 
				 
				 
			
		
	
	
	 
		 
		 
		 
		 
		 
		 
		 
	



