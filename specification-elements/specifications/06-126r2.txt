
 

Open Geospatial Consortium Inc.  
Date: 2009-07-21 

Reference number of this OGC® document:  OGC 06-126r2 

Version: 0.6 

Category: OGC® Best Practices Document 

Editor: Chuck Morris 

Compliance Test Language (CTL) Best Practice 

 

 

Copyright © 2009 Open Geospatial Consortium, Inc.  
To obtain additional rights of use, visit http://www.opengeospatial.org/legal/. 

Warning 

This is an OGC Best Practices document. This document is not an OGC Standard. 
It is distributed for review and comment. It is subject to change without notice and 
may not be referred to as an OGC Standard. However, this document is an official 
position of the OGC® membership on this particular technology topic. 

Document type: OGC Best Practice 
Document subtype:  
Document stage: Approved as Best Practice 
Document language: English 

 
 

http://www.opengeospatial.org/legal/


 

ii Copyright © 2012 Open Geospatial Consortium 
 

License Agreement 

Permission is hereby granted by the Open Geospatial Consortium, ("Licensor"), free of charge and subject to the terms set forth below, 
to any person obtaining a copy of this Intellectual Property and any associated documentation, to deal in the Intellectual Property 
without restriction (except as set forth below), including without limitation the rights to implement, use, copy, modify, merge, publish, 
distribute, and/or sublicense copies of the Intellectual Property, and to permit persons to whom the Intellectual Property is furnished to 
do so, provided that all copyright notices on the intellectual property are retained intact and that each person to whom the Intellectual 
Property is furnished agrees to the terms of this Agreement. 

If you modify the Intellectual Property, all copies of the modified Intellectual Property must include, in addition to the above 
copyright notice, a notice that the Intellectual Property includes modifications that have not been approved or adopted by LICENSOR. 

THIS LICENSE IS A COPYRIGHT LICENSE ONLY, AND DOES NOT CONVEY ANY RIGHTS UNDER ANY PATENTS 
THAT MAY BE IN FORCE ANYWHERE IN THE WORLD. 

THE INTELLECTUAL PROPERTY IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE, AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. THE COPYRIGHT HOLDER OR HOLDERS INCLUDED 
IN THIS NOTICE DO NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THE INTELLECTUAL PROPERTY WILL 
MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE INTELLECTUAL PROPERTY WILL BE 
UNINTERRUPTED OR ERROR FREE. ANY USE OF THE INTELLECTUAL PROPERTY SHALL BE MADE ENTIRELY AT 
THE USER’S OWN RISK. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY CONTRIBUTOR OF 
INTELLECTUAL PROPERTY RIGHTS TO THE INTELLECTUAL PROPERTY BE LIABLE FOR ANY CLAIM, OR ANY 
DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING 
FROM ANY ALLEGED INFRINGEMENT OR ANY LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
CONTRACT, NEGLIGENCE OR UNDER ANY OTHER LEGAL THEORY, ARISING OUT OF OR IN CONNECTION WITH 
THE IMPLEMENTATION, USE, COMMERCIALIZATION OR PERFORMANCE OF THIS INTELLECTUAL PROPERTY. 

This license is effective until terminated. You may terminate it at any time by destroying the Intellectual Property together with all 
copies in any form. The license will also terminate if you fail to comply with any term or condition of this Agreement. Except as 
provided in the following sentence, no such termination of this license shall require the termination of any third party end-user 
sublicense to the Intellectual Property which is in force as of the date of notice of such termination. In addition, should the Intellectual 
Property, or the operation of the Intellectual Property, infringe, or in LICENSOR’s sole opinion be likely to infringe, any patent, 
copyright, trademark or other right of a third party, you agree that LICENSOR, in its sole discretion, may terminate this license 
without any compensation or liability to you, your licensees or any other party. You agree upon termination of any kind to destroy or 
cause to be destroyed the Intellectual Property together with all copies in any form, whether held by you or by any third party. 

Except as contained in this notice, the name of LICENSOR or of any other holder of a copyright in all or part of the Intellectual 
Property shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Intellectual Property without 
prior written authorization of LICENSOR or such copyright holder. LICENSOR is and shall at all times be the sole entity that may 
authorize you or any third party to use certification marks, trademarks or other special designations to indicate compliance with any 
LICENSOR standards or specifications. 

This Agreement is governed by the laws of the Commonwealth of Massachusetts. The application to this Agreement of the United 
Nations Convention on Contracts for the International Sale of Goods is hereby expressly excluded. In the event any provision of this 
Agreement shall be deemed unenforceable, void or invalid, such provision shall be modified so as to make it valid and enforceable, 
and as so modified the entire Agreement shall remain in full force and effect. No decision, action or inaction by LICENSOR shall be 
construed to be a waiver of any rights or remedies available to it. 

None of the Intellectual Property or underlying information or technology may be downloaded or otherwise exported or reexported in 
violation of U.S. export laws and regulations. In addition, you are responsible for complying with any local laws in your jurisdiction 
which may impact your right to import, export or use the Intellectual Property, and you represent that you have complied with any 
regulations or registration procedures required by applicable law to make this license enforceable 
  



OGC Best Practice              OGC 06-126r2 

ii Copyright © 2009 Open Geospatial Consortium, Inc.
 

Contents Page 

1 Scope _____________________________________________________________ 1 

2 Conformance ______________________________________________________ 1 

3 Normative references ________________________________________________ 1 

4 Terms and definitions _______________________________________________ 2 

5 Conventions _______________________________________________________ 2 
5.1 Abbreviated terms____________________________________________________ 2 
5.2 Encoding Listings ____________________________________________________ 3 

6 Overview of CTL ___________________________________________________ 3 

7 Package___________________________________________________________ 4 
7.1 Introduction _________________________________________________________ 4 
7.2 Encoding ___________________________________________________________ 4 

8 CTL Objects _______________________________________________________ 4 
8.1 Suite _______________________________________________________________ 4 

8.1.1 Introduction ______________________________________________________________ 4 
8.1.2 Encoding ________________________________________________________________ 4 
8.1.3 Example _________________________________________________________________ 5 

8.2 Profiles _____________________________________________________________ 5 
8.2.1 Introduction ______________________________________________________________ 5 
8.2.2 Encoding ________________________________________________________________ 5 
8.2.3 Example _________________________________________________________________ 6 

8.3 Test ________________________________________________________________ 7 
8.3.1 Introduction ______________________________________________________________ 7 
8.3.2 Encoding ________________________________________________________________ 7 
8.3.3 Element Descriptions _______________________________________________________ 8 
8.3.4 Example _________________________________________________________________ 9 

8.4 Function ____________________________________________________________ 9 
8.4.1 Introduction ______________________________________________________________ 9 
8.4.2 Encoding ________________________________________________________________ 9 
8.4.3 Element Descriptions ______________________________________________________ 10 
8.4.4 Examples _______________________________________________________________ 12 

8.5 Parser _____________________________________________________________ 12 
8.5.1 Introduction _____________________________________________________________ 12 
8.5.2 Encoding _______________________________________________________________ 12 
8.5.3 Element Descriptions ______________________________________________________ 13 

9 Instructions_______________________________________________________ 14 
9.1 Form ______________________________________________________________ 14 

9.1.1 Introduction _____________________________________________________________ 14 



OGC Best Practice              OGC 06-126r2 

 iii
 

9.1.2 Encoding _______________________________________________________________ 14 
9.1.3 Element and Attribute Descriptions ___________________________________________ 14 
9.1.4 Results _________________________________________________________________ 15 
9.1.5 Examples _______________________________________________________________ 16 

9.2 Request ____________________________________________________________ 17 
9.2.1 Introduction _____________________________________________________________ 17 
9.2.2 Encoding _______________________________________________________________ 17 
9.2.3 Element and Attribute Descriptions ___________________________________________ 18 
9.2.4 Results _________________________________________________________________ 18 
9.2.5 Example ________________________________________________________________ 19 

9.3 Soap Request _______________________________________________________ 19 
9.3.1 Introduction _____________________________________________________________ 19 
9.3.2 Encoding _______________________________________________________________ 19 
9.3.3 Element and Attribute Descriptions ___________________________________________ 20 
9.3.4 Results _________________________________________________________________ 22 
9.3.5 Example ________________________________________________________________ 22 

9.4 Call-Test ___________________________________________________________ 23 
9.4.1 Introduction _____________________________________________________________ 23 
9.4.2 Encoding _______________________________________________________________ 23 
9.4.3 Element and Attribute Descriptions ___________________________________________ 24 
9.4.4 Results _________________________________________________________________ 24 
9.4.5 Examples _______________________________________________________________ 24 

9.5 For-each ___________________________________________________________ 25 
9.5.1 Introduction _____________________________________________________________ 25 
9.5.2 Encoding _______________________________________________________________ 25 
9.5.3 Element and Attribute Descriptions ___________________________________________ 25 
9.5.4 Results _________________________________________________________________ 26 
9.5.5 Example ________________________________________________________________ 26 

9.6 Message ___________________________________________________________ 26 
9.6.1 Introduction _____________________________________________________________ 26 
9.6.2 Encoding _______________________________________________________________ 26 
9.6.3 Element and Attribute Descriptions ___________________________________________ 26 
9.6.4 Results _________________________________________________________________ 27 
9.6.5 Examples _______________________________________________________________ 27 

9.7 Fail _______________________________________________________________ 27 
9.7.1 Introduction _____________________________________________________________ 27 
9.7.2 Encoding _______________________________________________________________ 27 
9.7.3 Element and Attribute Descriptions ___________________________________________ 27 
9.7.4 Results _________________________________________________________________ 27 
9.7.5 Examples _______________________________________________________________ 27 

9.8 Call-function _______________________________________________________ 28 
9.8.1 Introduction _____________________________________________________________ 28 
9.8.2 Encoding _______________________________________________________________ 28 
9.8.3 Element and Attribute Descriptions ___________________________________________ 28 
9.8.4 Results _________________________________________________________________ 28 
9.8.5 Example ________________________________________________________________ 28 

10 Built-in parsers __________________________________________________ 29 
10.1 Introduction ________________________________________________________ 29 
10.2 CDataParser _______________________________________________________ 29 

10.2.1 Introduction ___________________________________________________________ 29 



OGC Best Practice              OGC 06-126r2 

iv Copyright © 2009 Open Geospatial Consortium, Inc.
 

10.2.2 Encoding _____________________________________________________________ 29 
10.3 HTTPParser _______________________________________________________ 29 

10.3.1 Introduction ___________________________________________________________ 29 
10.3.2 Encoding _____________________________________________________________ 29 
10.3.3 Results _______________________________________________________________ 30 

10.4 XMLValidatingParser _______________________________________________ 31 
10.4.1 Introduction ___________________________________________________________ 31 
10.4.2 Encoding _____________________________________________________________ 31 
10.4.3 Element and Attribute Descriptions ________________________________________ 32 
10.4.4 Results _______________________________________________________________ 32 
10.4.5 Example _____________________________________________________________ 32 

10.5 SOAPParser ________________________________________________________ 33 
10.5.1 Introduction ___________________________________________________________ 33 
10.5.2 Encoding _____________________________________________________________ 33 
10.5.3 Results _______________________________________________________________ 33 
10.5.4 Example _____________________________________________________________ 33 

 



OGC Best Practice              OGC 06-126r2 

 v
 

i. Preface 

Compliance Test Language is an XML grammar for documenting and scripting suites of 
tests for verifying that an implementation of a specification complies with the 
specification. 

Suggested additions, changes, and comments on this draft document are welcome and 
encouraged. Such suggestions may be submitted by email message or by submitting a 
formal OGC Change Request using the on-line submission form at: 

http://portal.opengeospatial.org/public_ogc/change_request.php . 

 

ii. Document terms and definitions 

This document uses the specification terms defined in Subclause 5.3 of [OGC 05-008], 
which is based on the ISO/IEC Directives, Part 2. Rules for the structure and drafting of 
International Standards. In particular, the word “shall” (not “must”) is the verb form used 
to indicate a requirement to be strictly followed to conform to this specification 

iii. Submitting organizations 

The following organizations submitted this document to the Open Geospatial Consortium 
Inc.  

Northrop Grumman Information Technology, TASC 

http://portal.opengeospatial.org/public_ogc/change_request.php


OGC Best Practice              OGC 06-126r2 

vi Copyright © 2009 Open Geospatial Consortium, Inc.
 

iv. Document contributor contact points 

All questions regarding this document should be directed to the editor or the contributors: 

Name Organization 
Chuck Morris Northrop Grumman IT, TASC 
Simone Gianfranceschi Intecs SpA 
  

v. Revision history 

Date Release Editor Primary clauses 
modified 

Description 

9/7/06 0.4 Chuck Morris  Posted to OGC Pending Documents page 
3/5/2008 0.5 Chuck Morris, 

Jim Ressler 
 Added profile tag, support for files in 

forms, request headers, schema 
definitions in XMLValidatingParser. 
Other minor bug fixes 

31/03/2009 0.6 S. 
Gianfranceschi, 
Chuck Morris 

 Added the <soap-request> tag needed to 
test SOAP based implementations. Added 
the SOAPParser tag needed to parse the 
response received back from a SOAP 
server. 

June 3, 
2009 

0.6 Carl Reed Various Update prior to posting as a BP 

vi. Changes to the OGC Abstract Specification 

The OGC® Abstract Specification does not require changes to accommodate the 
technical contents of this document. 



OGC Best Practice              OGC 06-126r2 

 vii
 

Foreword 

As part of the Temporal Assessment and Evaluation program sponsored by the National 
Technology Alliance (NTA), Northrop Grumman developed both a script language for 
writing tests to verify that an implementation of a specification complies with the 
specification and a test engine to execute the test scripts.  This CTL specification 
documents the language for writing test scripts.  The test engine has been released under 
an open source license, and is available for free download from SourceForge at 
http://sourceforge.net/projects/teamengine. 

The Open Geospatial Consortium is using CTL to develop tests for several specifications 
as part of the Compliance & Interoperability Testing & Evaluation Initiative (CITE).  
More information on the OGC compliance program is available at 
http://cite.opengeospatial.org/. 

Attention is drawn to the possibility that some of the elements of this document may be 
the subject of patent rights. The Open Geospatial Consortium Inc. shall not be held 
responsible for identifying any or all such patent rights. 

Recipients of this document are requested to submit, with their comments, notification of 
any relevant patent claims or other intellectual property rights of which they may be 
aware that might be infringed by any implementation of the standard set forth in this 
document, and to provide supporting documentation. 

http://sourceforge.net/projects/teamengine
http://cite.opengeospatial.org/


OGC Best Practice              OGC 06-126r2 

viii Copyright © 2009 Open Geospatial Consortium, Inc.
 

Introduction 

Compliance Test Language (CTL) is an XML grammar for documenting and scripting 
suites of tests for verifying that an implementation of a specification complies with the 
specification. 

A suite of CTL files is typically installed in a compliance test engine, which executes the 
scripts and determines whether the implementation being tested passes or fails.  The CTL 
files can also be used to generate user documentation for the tests in the suite. 



OGC Best Practice              OGC 06-126r2 

 1
 

Compliance Test Language (CTL) 

1 Scope 

This document establishes Compliance Test Language, an XML grammar for 
documenting and scripting suites of tests for verifying that an implementation of a 
specification complies with the specification. 

This document does: 

o Define the structure of a test suite and tests in the test suite. 

o Define the elements that can be used to form the test script code. 

o Define interfaces for producing Java classes to extend the basic CTL 
functionality. 

o Provide informative examples test scripts and sample script output. 

o Provide guidelines on terminology used to properly document tests. 

It does not: 

o Define an interface for submitting tests to a test engine 

o Define a normative format for logging output from a test engine 

o Define a normative format for documentation generated from the test suite 

2 Conformance 

This specification defines a test suite to check files written in CTL for conformance.  A 
CTL file is conformant if all of the assertions listed in Annex A, section A.1 are true.  
Code to test the assertions is described in Annex A, section A.2. 

3 Normative references 

The following normative documents contain provisions that, through reference in this 
text, constitute provisions of this document. 

W3C REC-html401-19991224, HTML 4.01 Specification, 
http://www.w3.org/TR/1999/REC-html401-19991224 



OGC Best Practice              OGC 06-126r2 

2 Copyright © 2009 Open Geospatial Consortium, Inc.
 

W3C REC-xhtml-basic-20001219, XHTML™ Basic,    
http://www.w3.org/TR/2000/REC-xhtml-basic-20001219 

W3C REC-xslt-19991116, XSL Transformations (XSLT) Version 1.0, 
http://www.w3.org/TR/1999/REC-xslt-19991116 

W3C Simple Object Access Protocol (SOAP) 1.1 http://www.w3.org/TR/2000/NOTE-
SOAP-20000508/ (No support for SOAP RPC) 

SOAP Version 1.2 Part 0: Primer (Second Edition) http://www.w3.org/TR/2007/REC-
soap12-part0-20070427/ 

SOAP Version 1.2 Part 1: Messaging Framework (Second Edition) 
http://www.w3.org/TR/soap12-part1/ (Request-Response Message Exchange Pattern only 
is supported- the HTTP binding is supported) 

SOAP Version 1.2 Part 2: Adjuncts (Second Edition) http://www.w3.org/TR/2007/REC-
soap12-part2-20070427/ (No support for SOAP RPC) 

These documents may also contain a list of normative references that are also applicable. 

4 Terms and definitions 

No special terms or definitions have been identified. 

5 Conventions 

5.1 Abbreviated terms 

CGI Common Gateway Interface 

CTL Compliance Test Language 

HTML HyperText Markup Language 

URL Universal Resource Locator 

W3C World Wide Web Consortium 

XPath XML Path Language 

XHTML Extensible HyperText Markup Language 

XML Extensible Markup Language 

XSL Extensible Stylesheet Language 

 

http://www.w3.org/TR/1999/REC-xslt-19991116
http://www.w3.org/TR/2000/NOTE-SOAP-20000508/
http://www.w3.org/TR/2000/NOTE-SOAP-20000508/
http://www.w3.org/TR/2007/REC-soap12-part0-20070427/
http://www.w3.org/TR/2007/REC-soap12-part0-20070427/
http://www.w3.org/TR/soap12-part1/
http://www.w3.org/TR/2007/REC-soap12-part2-20070427/
http://www.w3.org/TR/2007/REC-soap12-part2-20070427/


OGC Best Practice              OGC 06-126r2 

 3
 

5.2 Encoding Listings 

This document describes the encoding of XML elements using three column tables.  The 
Element/Attribute column presents the elements and attributes in a typical indented XML 
structure, with a single element or attribute per line.  In this column, text in italics 
indicates text that should be replaced with some other value.  A vertical bar (|) is used to 
separate options when several values are allowed.  Bold text indicates a default option. 

The Usage column indicates whether the element or attribute is required or optional.  If 
other usage constraints apply, they are indicated by footnotes in this column. 

The description column gives a brief description of the element or attribute.  More 
detailed descriptions are provided in subsequent sections of the specification. 

6 Overview of CTL 

A test suite in CTL consists of a set of objects.  The initial object is a suite, which 
identifies a starting test and may also include a form instruction.  The starting test is 
called using the values the user enters in the form as parameters contains instructions that 
may call other tests or use functions and parsers. 

A suite may optionally be extended by a profile to test functionality that is not mandatory 
in the base test suite.  A profile identifies the base test suite it is extending and a starting 
profile test. When a profile is executed, the starting tests from both the base test suite and 
the profile are called, and both are passed the values from the base test suite’s form as 
parameters.  See Figure 1 below. 

 

suite 

test

function

parser

test

test

function

profile test

Figure 1: CTL Structure 

parser

 

A CTL file is an XML file that contains a CTL object or a package element as its root 
element.  The package element, which is a container for multiple CTL objects, is 
described in detail in section 7.  Each CTL object is identified by a unique, namespace 



OGC Best Practice              OGC 06-126r2 

4 Copyright © 2009 Open Geospatial Consortium, Inc.
 

qualified name, so the set of objects in a test suite may span several files.  The CTL 
objects are described in section 8. 

Test objects contain programmatic code that consists of XSL instructions and/or CTL 
instructions.  The CTL instructions are described in section 9. 

Some parser objects are built-in to CTL, and may be used without declaring a parser 
object.  The built-in parsers are described in section 10. 

7 Package 

7.1 Introduction 

The <package> element is a container for CTL objects or traditional XSL templates.  
Each CTL object is complete on its own and may be placed in its own file, or several 
objects may be placed in a package for the convenience of grouping them in the same 
file. 

7.2 Encoding 

Element/Attribute Usage Description 
<package> Required Establishes a package 
   <suite|profile|test|function|parser| 
     xsl:template/> Optional* CTL Objects 
</package> 
 
Usage Notes: 
* May be repeated. 

8 CTL Objects 

8.1 Suite 

8.1.1 Introduction 

The <suite> element establishes a set of tests.  It names a test suite, describes its purpose, 
and identifies the starting test where processing begins when the test suite is executed.  It 
may also include a form instruction to obtain user input that will be passed to the starting 
form as parameters. 

8.1.2 Encoding 

Element/Attribute Usage Description 
<suite Required Establishes a test suite 
  name="QName"> Required Test suite name 



OGC Best Practice              OGC 06-126r2 

 5
 

   <title>string</title> Required Test suite title 
   <description>string</description> Optional Describes the test suite 
   <link Optional* Link to documentation 
    title="string"> Optional Title  
     string Required URL 
   </link> 
   <starting-test>QName</starting-test> Required Identifies the first test in the 
   <form/> Optional A form instruction for user 
  input (see section 9.1) 
</suite> 
 
Usage Notes: 
* May be repeated. 
8.1.3 Example 

<ctl:suite name="example:suite">  
   <ctl:title>Example Test Suite</ctl:title>  
      <ctl:description>  
         Tests compliance to the Example Service  
         Implementation Specification, version 1.0  
      </ctl:description>  
   <ctl:starting-test>example:main</ctl:starting-test>  
</ctl:suite>  
 

8.2 Profiles 

8.2.1 Introduction 

This section describes the profile objects that are built-in to the Compliance Test 
Language and shall be supported by test processors.  

Profiles extend a base test suite.  They form a modified version of a test suite by adding 
new tests and/or excluding some of the existing tests from the base suite.  Although the 
same functionality could be tested by simply creating a new test suite, creating a profile is 
often a cleaner and easier-to-maintain solution. 

Profile objects identify the base suite that they are profiling.  They may contain 
exclusions – test call paths from the base suite that don’t apply to the profile.  They must 
contain a starting test, and may also contain a form.  The values from the base suite’s 
form plus any values from the profile’s form are passed to its starting test.  Values in the 
profile’s form take precedence if there are any values with the same name in the base 
suite’s form. 

8.2.2 Encoding 

Element/Attribute Usage Description 
<profile Required Establishes a profile 



OGC Best Practice              OGC 06-126r2 

6 Copyright © 2009 Open Geospatial Consortium, Inc.
 

  name="QName"> Required Profile name 
   <title>string</title> Required Profile title 
   <description>string</description> Optional Describes the profile 
   <starting-test>string</starting-test> Required Identifies the first test in the 
  profile 
   <base>string</base> Required  Identifies the suite that is 
  the base of the profile 
    <exclude>string</exclude> Optional* Identifiles test(s) in the base 

suite to exclude 
</profile> 
 
Usage Notes: 
* May be repeated. 
 
8.2.3 Example 

  <ctl:suite name="test:base"> 
      <ctl:title>Base profile test suite</ctl:title> 
      <ctl:description></ctl:description> 
      <ctl:starting-test>test:base_main</ctl:starting-test> 
      <ctl:form> 
         Enter a value for X: 
         <xhtml:input type="text" name="x"/> 
         <xhtml:br/> 
         <xhtml:input type="submit"/> 
      </ctl:form> 
  </ctl:suite> 
 
  <ctl:profile name="test:profile_a"> 
      <ctl:title>Profile A</ctl:title> 
      <ctl:description></ctl:description> 
      <ctl:base>test:base</ctl:base> 
      <ctl:exclude>/test:base_main/test:fail</ctl:exclude> 
      <ctl:starting-test>test:profile_a_main</ctl:starting-test> 
  </ctl:profile> 
 
  <ctl:test name="test:base_main"> 
    <ctl:param name="x"/> 
    <ctl:assertion>Base Main</ctl:assertion> 
    <ctl:code> 
      <ctl:message>X: <xsl:value-of select="$x"/></ctl:message> 
      <ctl:call-test name="test:pass"/> 
      <ctl:call-test name="test:fail"/> 
    </ctl:code> 
  </ctl:test> 
 
  <ctl:test name="test:pass"> 
    <ctl:assertion>Pass</ctl:assertion> 
    <ctl:code> 
    </ctl:code> 
  </ctl:test> 
 
  <ctl:test name="test:fail"> 
    <ctl:assertion>Fail</ctl:assertion> 
    <ctl:code> 



OGC Best Practice              OGC 06-126r2 

 7
 

      <ctl:fail/> 
    </ctl:code> 
  </ctl:test> 
 
  <ctl:test name="test:profile_a_main"> 
    <ctl:param name="x"/> 
    <ctl:assertion>Profile A Main</ctl:assertion> 
    <ctl:code> 
      <ctl:message>X: <xsl:value-of select="$x"/></ctl:message> 
    </ctl:code> 
  </ctl:test> 

 

When the suite test:base is executed, it will display the form requesting the variable x to 
be entered and then its starting-test (test:base_main) is invoked with x as a parameter. 
Test:base_main will invoke the test test:fail which will issue a fail, thus test:base_main 
fails and the suite fails. 

When the profile test:profile_a is executed, it will examine the results of the base suite 
test:base, ignoring the results of test fail since they are excluded.  Then it will start 
execution of the profile’s starting test (test:profile_a_main), passing the value of x from 
the base test suite’s form as a parameter.  Since all the tests that are not excluded from the 
base test suite pass and the tests in the profile pass, the result is that the profile will pass. 

 

8.3 Test 

8.3.1 Introduction 

The <test> element establishes an individual test.  It states an assertion and contains 
program code to test the assertion. 

8.3.2 Encoding 

Element/Attribute Usage Description 
<test Required Establishes a test 
  name="QName"> Required Test name 
   <param Optional* Test parameters 
     name="string"> Required Parameter name 
      string Optional Parameter description 
   </param> 
   <context>string</context> Optional Describes the calling context 
   <assertion>string</assertion> Required States the test assertion 
   <comments>string</comments> Optional* Comments about the test 
   <link Optional* Link to a corresponding 
  clause in the specification 
    title="string"> Optional Title  



OGC Best Practice              OGC 06-126r2 

8 Copyright © 2009 Open Geospatial Consortium, Inc.
 

     string Required URL 
   </link> 
   <code> Required The test code 
      <instruction> Required* Test code instructions 
   </code> 
</test> 
 
Usage Notes: 
* May be repeated. 
 
8.3.3 Element Descriptions 

8.3.3.1 Param 

Tests may have zero or more parameters specified as <param> elements, named with a 
name attribute.  The content of the element should describe the parameter. 

8.3.3.2 Context 

When a test is executed, there is always an XML tree in memory, and a current node 
within the tree.  This is known as the context.  In some cases, the context in which a test 
is called is important, while in other cases in may not matter.  If the test code depends on 
the context, the test should describe the proper context state with a <context> element. 

8.3.3.3 Assertion 

The <assertion> element specifies the test assertion.  The assertion is a statement derived 
from the specification being tested which is true for a valid implementation. 

The assertion may contain references to the labels of the parameters or the context by 
using {$name} notation.  For example, {$context} refers to the current context label, and 
{$p1} refers to the label of the parameter named “p1”.  The value of the label may 
evaluate to the content of the <context> or <param> element, or the value of the label or 
label-expr attribute on the <for-each> or <with-param> elements, depending on whether 
documentation is being generated or whether the test is actually being executed. 

In some cases, the assertion text may be vague if read in isolation, but its meaning should 
be clear when viewed in the context of the assertion of the calling test.  For example, the 
assertion “A summary is present” is vague, but if the assertion of the parent test is 
“HTML tables are properly formatted”, then it is clear that the test looks for a summary 
on an HTML table. 

8.3.3.4 Comments 

The <comments> element allows documentation of additional comments on the purpose 
of the test or method of verification.  The comments should apply to the test as a whole.  



OGC Best Practice              OGC 06-126r2 

 9
 

Of course, XML comments inside <!--  --> tags may also be used, but this comment tag is 
more formal and may be used in documentation. 

8.3.3.5 Link 

Zero or more <link> elements may be used to provide links back to the place or places in 
the specification where the assertion was derived from.  Links have an optional title 
attribute which should be used to provide a human readable title for the specification and 
point to the appropriate page number and/or clause number.  The content of the element 
should be a URL for the specification, and should include the fragment for the clause if 
the specification is in HTML format. 

8.3.3.6 Code 

The <code> element contains the programmatic code used to verify the assertion.  Any 
XML is allowed in the code element.  It should contain CTL instructions and/or XSL 
instructions for evaluation by a test engine.  The test will pass unless one or more <fail> 
instructions are executed. 

8.3.4 Example 

 <ctl:test name="example:zulu"> 
  <ctl:param name="time">time string</ctl:param> 
  <ctl:assertion> 

If the hours field is included in {$time}, 
    the suffix Z (for zulu) is required. 

</ctl:assertion> 
  <ctl:link title="WMS 1.1.1 Section B.2.1">wms111.html#b_2_1</ctl:link> 
  <ctl:code> 
   <xsl:if test="contains($time, 'T')"> 
    <xsl:variable name="len" select="string-length($time)"/> 
    <xsl:if test="not(substring($time, $len) = 'Z')"> 
     <ctl:fail/> 
    </xsl:if> 
   </xsl:if> 
  </ctl:code> 
 </ctl:test> 
 

8.4 Function 

8.4.1 Introduction 

The <function> element is used to declare user-defined functions or external java 
functions.  These functions may be called as XPath functions in instructions that use 
XPath expressions, or they may be called directly with the <call-function> instruction. 

8.4.2 Encoding 

Element/Attribute Usage Description 
<function Required Establishes a function 
  name="QName"> Required Function name 



OGC Best Practice              OGC 06-126r2 

10 Copyright © 2009 Open Geospatial Consortium, Inc.
 

   <param Optional* Function parameters 
     name="string"> Optional Parameter name 
      string Optional Parameter description 
   </param> 
   <var-params OptionalB Indicates the function may be 
  called with a variable number 
  of parameters 
     min="int" Required Minimum number of parameters 
     max="int"/> Required Maximum number of parameters 
   <context>string</context> Optional Describes the calling context 
   <return>string</return> Optional Describes what the function returns 
   <description>string</description> Optional Describes the function 
   <comment>string</comment> Optional* Comments about the function 
   <code> OptionalC Function is implemented as CTL 
      <instruction/> Required* Function code instructions 
   </code> 
   <java OptionalC Function is implemented as Java 
     class="string" Required Fully qualified Java class name 
     method="string" Required A method in the Java class 
     initialized="true|false"> Optional Indicates whether the class is 
  initialized.  Default is false. 
      <with-param OptionalD* Initialization parameter 
        name="string" Optional Parameter name 
        select="XPath"> Optional Parameter value 
         XML node OptionalE Parameter value 
      </with-param> 
   </java> 
</function> 
 
Usage Notes: 
* May be repeated. 
B Allowed only if the <java> element is supplied. 
C Choose between a <code> element or a <java> element. 
D Allowed only if initialized="true". 
E If there is a select attribute, the content of the <with-param> element should be empty. 
 
8.4.3 Element Descriptions 

8.4.3.1 Param 

Functions may have zero or more parameters specified as <param> elements, named 
with a name attribute.  The content of the element should describe the parameter. 



OGC Best Practice              OGC 06-126r2 

 11
 

8.4.3.2 Var-params 

Some functions implemented as Java methods may be called with a variable number of 
parameters.  This optional element indicates that a variable number of parameters is 
allowed.  It has attributes min and max, indicating the maximum and minimum number 
of parameters allowed 

8.4.3.3 Context 

When a function is executed, there is always an XML tree in memory, and a current node 
within the tree.  This is known as the context.  In some cases, the context in which a 
function is called is important, while in other cases in may not matter.  If the function 
code depends on the context, it should describe the proper context state with a <context> 
element. 

8.4.3.4 Return 

The optional <return> element should be used to provide a brief description of what the 
function returns. 

8.4.3.5 Description 

The optional <description> element is used to describe the function. 

8.4.3.6 Comment 

Functions may contain zero or more <comment> elements. 

8.4.3.7 Code 

The <code> element is required unless a <java> element is supplied.  Any XML is 
allowed in the code element.  It should contain CTL instructions and/or XSL instructions 
implementing the function. 

8.4.3.8 Java 

The <java> element is required unless a <code> element is supplied.  It indicates the 
function is implemented as an external Java method.  It contains class and method 
attributes that identify the Java class and method. 

For a java method to be used, it must be implemented as a public method.  If the method 
is not static, this must be indicated by setting the initialized attribute to “true”.  This will 
initialize the class, calling the class constructor (which also must be public) by passing it 
the parameter values supplied by the optional <with-param> elements. 

There are restrictions on the parameter types that may be used in the java method and the 
class constructor.  They must be one of Java’s built-in primitive types (boolean, char, 



OGC Best Practice              OGC 06-126r2 

12 Copyright © 2009 Open Geospatial Consortium, Inc.
 

byte, short, int, long, float, double), String, org.w3c.dom.Node, or 
org.w3c.dom.NodeList. 

If there is a <context> element, it must be the first parameter in the method and must be 
of type org.w3c.dom.Node or org.w3c.dom.NodeList. 

The method may return a primitive type value, or a value of type String, 
org.w3c.dom.Node, or org.w3c.dom.NodeList. 

8.4.4 Examples 

   <function name="example:add"> 
  <param name="num1">First Number</param> 
  <param name="num2">Second Number</param> 
  <return>num1 + num2</return> 
  <description>Adds two numbers</description> 
  <code> 
   <xsl:value-of select="$num1 + $num2"/> 
  </code> 
   </function> 
 
   <function name="example:sqrt"> 
  <param name="num"/> 
  <return>the square root of num</return> 
  <description>Calculates a square root</description> 
  <java class="java.lang.Math" method="sqrt"/> 
   </function> 
 

8.5 Parser 

8.5.1 Introduction 

The <parser> element is used to declare a parser and link it to its external java 
implementation.  Parsers are used in the <request> instruction to convert the response 
from a web service into well-formed XML for processing. 

8.5.2 Encoding 

Element/Attribute Usage Description 
<parser Required Establishes a parser 
  name="QName"> Required Parser name 
   <description>string</description> Optional Describes the function 
   <comments>string</comments> Optional* Comments about the function 
   <java Required Function is implemented as Java 
     class="string" Required Fully qualified Java class name 
     method="string" Required A method in the Java class 
     initialized="true|false"> Optional Indicates whether the class is 
  initialized.  Default is false. 
      <with-param OptionalD* Initialization parameter 
        name="string" Optional Parameter name 



OGC Best Practice              OGC 06-126r2 

 13
 

        select="XPath"> Optional Parameter value 
         XML node OptionalE Parameter value 
      </with-param> 
   </java> 
</parser> 
 
Usage Notes: 
* May be repeated. 
D Allowed only if initialized="true". 
E If there is a select attribute, the content of the <with-param> element should be empty. 
 
8.5.3 Element Descriptions 

8.5.3.1 Description 

The optional <description> element is used to describe the parser. 

8.5.3.2 Comment 

Parsers may contain zero or more <comment> elements. 

8.5.3.3 Java 

The required <java> element contains class and method attributes that identify the Java 
class and method. 

The java method used must be implemented as a public method.  If the method is not 
static, this must be indicated by setting the initialized attribute to “true”.  This will 
initialize the class, calling the class constructor (which also must be public) by passing it 
the parameter values supplied by the optional <with-param> elements. 

Parser methods must contain three parameters.  The first is of type 
java.net.URLConnection and contains the URLConnection object used to make the web 
service request.  The second is of type org.w3c.Element, and contains a copy of the 
parser element.  The third is of type java.io.PrintWriter and can be used to write messages 
to the log.  The parser method should return an XML document of type 
org.w3c.Document containing parsed XML, a String, or null if it encounters an error. 



OGC Best Practice              OGC 06-126r2 

14 Copyright © 2009 Open Geospatial Consortium, Inc.
 

9 Instructions 

9.1 Form 

9.1.1 Introduction 

The <form> instruction is used to retrieve user input.  An XHTML form is generated and 
presented to the user.  The user may the fill in the fields on the form and press a submit 
button.  The instruction returns the values of the form fields and the button that was 
pressed. 

9.1.2 Encoding 

The form instruction may contain a combination of literal XML elements and/or other 
CTL or XSL instructions.  When any enclosed instructions have been evaluated, the 
resulting XML shall conform to this encoding. 

Element/Attribute Usage Description 
<ctl:form Required The form instruction 
  height="integer" Optional Desired form height in pixels 
  width="integer"> Optional Desired form width in pixels 
   <XHTML/> Optional* XHTML Basic elements 
   <ctl:parse Optional*  Used to parse file inputs 
    file="string"> Required Name of file input to parse 
   <parser/> Optional Parser instruction for converting 
  the file input into XML 
   </ctl:parse> 
</ctl:form> 
 
Usage Notes: 
* May be repeated. 
 
9.1.3 Element and Attribute Descriptions 

9.1.3.1 Height and Width 

The form element contains height and width attributes, used to specify the desired height 
and width of the form in pixels.  The user agent should regard these as hints on the size of 
window required, but does not have to follow these guidelines. 

9.1.3.2 XHTML Basic elements 

The content of the form should evaluate into XHTML Basic elements.  All of the 
XHTML Basic elements valid inside the XHTML Basic <form> element are supported, 
with the exception of the <object> element. 



OGC Best Practice              OGC 06-126r2 

 15
 

Of particular interest are the XHTML Basic elements that define form controls: <input>, 
<select>, and <textarea>.  These elements can be used to define user options that the 
form will return.  The form must contain at least one <input type=”submit”> element to 
allow the user to submit the form. 

9.1.3.3 Parse elements 

If the form contains file input elements (<input type=”file”>), it may also contain 
<parse> elements following the XHTML Basic elements.  The parse elements indicate 
which parser to use to parse the file input.  If there are no <parse> elements for a file 
input, the value of the input is the filename.  For <parse> elements that do not contain a 
parser, the file contents are parsed as XML. 

 

9.1.4 Results 

When the user presses a submit button on the form, the instruction completes.  It returns 
the user input as a set of key-value pairs, where the key corresponds to a control name 
and the value corresponds to the control value.  A key-value pair is generated only for 
successful controls, as formally defined in section 17.13.2 of the HTML 4 specification, 
the relevant portions of which are presented below. 

A successful control must have a control name. 

However: 

• Controls that are disabled cannot be successful.  

• If a form contains more than one submit button, only the activated submit button is 
successful.  

• All "on" checkboxes may be successful.  

• For radio buttons that share the same value of the name attribute, only the "on" radio 
button may be successful.  

• For menus, the control name is provided by a SELECT element and values are 
provided by OPTION elements. Only selected options may be successful. When no 
options are selected, the control is not successful and neither the name nor any values 
are submitted to the server when the form is submitted.  

If a control doesn't have a current value when the form is submitted, user agents are not 
required to treat it as a successful control. 

Furthermore, user agents should not consider reset buttons successful. 

The results shall conform to this encoding: 



OGC Best Practice              OGC 06-126r2 

16 Cop

Element/Attribute Usage Description 
<values> Required Container for key/value pairs 
   <value Optional* Key-value pairs 
     key="string"> Required Key name for the pair 
      string Required Value for the pair 
   </value> 
</values> 
 
Usage Notes: 
* May be repeated. 
 
9.1.5 Examples 

Example 1 

This form: 

<ctl:form> 
   <p> 
      <img src="http://www.google.com/intl/en/images/logo.gif"/><br/> 
      Do you see the Google logo?<br/> 
      <input type="submit" name="answer" value="yes"/> 
      <input type="submit" name="answer" value="no"/> 
   </p> 
</ctl:form> 

 

Will be displayed to the user graphically: 

 

 
 

If the user presses the Yes button, the results will look like this: 

<values> 
   <value key="answer">yes</value> 
</values> 

yright © 2009 Open Geospatial Consortium, Inc.
 



OGC Best Practice              OGC 06-126r2 

 17
 

 

Example 2 

This code asks for an XML file and produces a message displaying the name of its root 
element. 

<ctl:variable name="form-values"> 
   <ctl:form> 
      <p>Select an XML file:</p> 
      <input name="myupload" type="file" /> 
      <br /> 
      <input type="submit" value="OK" /> 
      <ctl:parse file="myupload" /> 
   </ctl:form> 
</ctl:variable> 
<ctl:message> 
   <xsl:text>The root element is named <xsl:text> 
   <xsl:value-of select="name($form-values/values/value[@key='myupload']/*) "/> 
</ctl:message> 
 

9.2 Request 

9.2.1 Introduction 

The <request> element submits an HTTP request to a web service or other resource, and 
returns an XML representation of the response. 

9.2.2 Encoding 

The request instruction may contain a combination of literal XML elements and/or other 
CTL or XSL instructions.  When any enclosed instructions have been evaluated, the 
resulting XML shall conform to this encoding. 

Element/Attribute Usage Description 
<request> Required The request instruction 
   <url>URL</url> Required Requested web resource 
   <method>get|post</method> Required HTTP method for the request 
   <header Optional* Headers sent with the request 
     name="string"> Required Header name 
      string Required Header value 
   </header> 
   <param Optional* Parameters sent with the request 
     name="string"> Required Parameter name 
      string Required Parameter value 
   </param> 
   <body>XML|string</body> OptionalA Body for HTTP post requests 
   <parser/> Optional Parser instruction for converting 
  the response into XML 
</request> 



OGC Best Practice              OGC 06-126r2 

18 Copyright © 2009 Open Geospatial Consortium, Inc.
 

 
Usage Notes: 
* May be repeated. 
A Only allowed if method is post. 
9.2.3 Element and Attribute Descriptions 

9.2.3.1 URL 

The required <url> element indicates the web service or other HTTP resource where the 
request will be submitted. 

9.2.3.2 Method 

The required <method> element indicates the HTTP method that will be used to make the 
request.  Supported method types are get, post, and head. 

9.2.3.3 Header 

Optional <header> elements may be included to add headers to the request. 

9.2.3.4 Param 

Optional <param> elements may be included.  If the method is “get”, these parameters 
are are added to the URL before the request is sent.  If the method is “post” and there is 
no body element, the parameters are sent using "application/x-www-form-urlencoded" 
form. 

9.2.3.5 Body 

The <body> element is used only for requests where the method is set to “post”.  It 
contains the data to post when the request is sent.  The element may contain character 
data, which is passed on directly, or XML which is serialized and then passed on. 

9.2.3.6 Parser 

A parser may be used to instruct the engine how to convert the response from the request 
into an XML representation.  If present, the name of this element should correspond to 
the name attribute of a parser element (see section 8.4).  Parsers may contain various 
required or optional attributes or elements, depending on the parser implementation.  See 
section 10 for the correct encoding for built-in parsers. 

9.2.4 Results 

The request element returns an XML representation of the response, as generated by the 
parser.  If no parser element is present and the response is well-formed XML, the XML is 
returned.  Otherwise, nothing is returned. 



OGC Best Practice              OGC 06-126r2 

 19
 

9.2.5 Example 

<request> 
   <url>http://www.somewms.com</url> 
   <method>get</method> 
   <param name="SERVICE">WMS</param> 
   <param name="REQUEST">GetCapabilities</param> 
   <param name="VeRsIoN">1.1.1</param> 
</request> 
 

9.3 Soap Request 

9.3.1 Introduction  

The <soap-request> element submits a SOAP request to a web service, and returns an 
XML representation of the response.  

Note: the tag does not support the full SOAP specification. Only message based Request-
Response Message Exchange Pattern over HTTP is supported. 

9.3.2 Encoding  

The request instruction may contain a combination of literal XML elements and/or other 
CTL or XSL instructions. When any enclosed instructions have been evaluated, the 
resulting XML shall conform to this encoding. 

Element/Attribute Usage Description 
<soap-request Required The SOAP request instruction 
  version="1.1|1.2" Required Define SOAP version to be used. 
  charset="utf-8|utf-16"> Optional Character set. Default is utf-8. 
   <url>URL</url> Required Web Service end point 
   <action>action</action > Optional Action associated with the SOAP 
  request HTTP header 
  (SOAPAction in SOAP 1.1). 
   <header-blocks Optional* SOAP header blocks 
        mustUnderstand="true|false" Optional If "true", the targeted SOAP node must 
  process each of the blocks according to 
  its specification. 
  Default is false. 
        relay="true|false" OptionalA SOAP 1.1: Not Applicable 
  SOAP 1.2: Indicates whether the 
  blocks targeted at a SOAP 
  intermediary must be relayed if they 
  are not processed. 
  Default is false. 
        role="shortname|URI"> Optional Identifies the role played by the  



OGC Best Practice              OGC 06-126r2 

20 Copyright © 2009 Open Geospatial Consortium, Inc.
 

   intended target of the header blocks. 
      Header block element Required* SOAP header block element. 
  Must be namespace-qualified. 
  May contain any number of attribute, 
  character, and element children. 
   </header-blocks> 
   <body>XML</body> Required Body of the SOAP Request. 
   <parser/> Optional Parser instruction for handling 
  the response message.  Default is to 
  return the raw response, with no 
  validation. 
</soap-request> 
 
Usage Notes: 
* May be repeated. 
A Only allowed if SOAP version is 1.2. 

9.3.3 Element and Attribute Descriptions  

9.3.3.1 version 

This mandatory parameter is used to define the SOAP version to be used. SOAP 1.1 and 
SOAP 1.2 are supported 

9.3.3.2 charset 

Optional charset parameter that can take the value of utf-8 or utf-16 (case insensitive). If 
not provided the default value utf-8 will be used. 

9.3.3.3 URL  

The required <url> element indicates the web service resource where the request will be 
submitted.  

9.3.3.4 action 

SOAP 1.1: SOAP action for the request. It has to be compliant with the end point WSDL 
description. If not provided an empty SOAPAction will be used. 

SOAP 1.2: Optional action parameter to be included in the HTTP header. 

9.3.3.5 Header blocks 

The <header-blocks> tag contains header blocks to be included in the SOAP Header 
element. A SOAP header is an extension mechanism that provides a way to pass 
information in SOAP messages that is not application payload. Such "control" 



OGC Best Practice              OGC 06-126r2 

 21
 

information includes, for example, passing directives or contextual information related to 
the processing of the message. This allows a SOAP message to be extended in an 
application-specific manner. 

Each header-blocks element may contain attributes that apply to each of the enclosed 
header blocks. 

9.3.3.6 mustUnderstand 

If "true", means that the targeted SOAP node must process the block according to the 
specification of that block. Such a block is colloquially referred to as a mandatory header 
block. In fact, processing of the SOAP message must not even start until the node has 
identified all the mandatory header blocks targeted at itself, and "understood" them. 

Understanding a header means that the node must be prepared to do whatever is 
described in the specification of that block. (Keep in mind that the specifications of 
header blocks are not a part of the SOAP specifications.) 

9.3.3.7 relay 

SOAP 1.1: Not Applicable 

SOAP 1.2: Indicates whether a header block targeted at a SOAP intermediary must be 
relayed if it is not processed. 

Note that if a header block is processed, the SOAP processing rules require that it be 
removed from the outbound message. (It may, however, be reinserted, either unchanged 
or with its contents altered, if the processing of other header blocks determines that the 
header block be retained in the forwarded message.) The default behavior for an 
unprocessed header block targeted at a role played by a SOAP intermediary is that it must 
be removed before the message is relayed. 

9.3.3.8 role 

Identifies the role played by the intended target of that header block. A SOAP node is 
required to process a header block if it assumes the role identified by this attribute. How a 
SOAP node assumes a particular role is not a part of the SOAP specifications. 

In SOAP 1.1 it will be used to fill the actor attribute: The SOAP actor global attribute can 
be used to indicate the recipient of a header element. The value of the SOAP actor 
attribute is a URI. The special URI "http://schemas.xmlsoap.org/soap/actor/next"indicates 
that the header element is intended for the very first SOAP application that processes the 
message. 

The value may be set to a URI value, or to one of the short names in the list below: 



OGC Best Practice              OGC 06-126r2 

22 Copyright © 2009 Open Geospatial Consortium, Inc.
 

Ver Short-name URI 

1.1 next http://schemas.xmlsoap.org/soap/actor/next 

1.2 next http://www.w3.org/2003/05/soap-envelope/role/next 

1.2 none  http://www.w3.org/2003/05/soap-envelope/role/none 

1.2 ultimateReceiver http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver

 

9.3.3.9 Header Block Element 

Header blocks represent a logical grouping of data which can individually be targeted at 
SOAP nodes that might be encountered in the path of a message from a sender to an 
ultimate receiver. 

Each <header-blocks> element contains one or more header block elements to be 
included in the SOAP Header.  The name of the header block is not fixed, but it must be 
namespace-qualified. It may contain any number of attribute, character, and element 
children. 
 
9.3.3.10 Body  

The <body> element contains the data to be included in the SOAP body. The element 
should contain XML compliant with the web service interface.  

9.3.3.11 Parser  

A parser may be used to check the content of the result message. If present, the name of 
this element should correspond to the name attribute of a parser element. Parsers may 
contain various required or optional attributes or elements, depending on the parser 
implementation.  

9.3.4 Results  

The soap-request element returns an XML representation of the SOAP message response 
or a SOAP fault element in case of errors. 

9.3.5 Examples 

Example 1: OGC Catalog Service SOAP request 

<soap-request version="1.1" charset="UTF-8"> 



OGC Best Practice              OGC 06-126r2 

 23
 

    <url>http://mycompany.com/wrs</url> 
    <action>GetCapabilities</action> 
    <body> 
        <csw:GetCapabilities 
         xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
         service="CSW"/> 
    </body> 
</soap-request> 
 
Example 2: Travel Service example 

This example is borrowed from example 3 in section 2.2.1 of W3C’s SOAP Version 1.2 
Part 0: Primer. 
 
<soap-request version="1.2"> 
   <url>http://travelcompany.example.org/service</url> 
   <header-blocks role="next" mustUnderstand="true"> 
      <m:reservation 
       xmlns:m="http://travelcompany.example.org/reservation"> 
         <m:reference> 
            uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d 
         </m:reference> 
         <m:dateAndTime>2001-11-29T13:36:50.000-05:00</m:dateAndTime> 
      </m:reservation> 
      <n:passenger xmlns:n="http://mycompany.example.com/employees"> 
         <n:name>Åke Jógvan Øyvind</n:name> 
      </n:passenger> 
   </header-blocks> 
   <body> 
      <p:itinerary  
       xmlns:p="http://travelcompany.example.org/reservation/travel"> 
         <p:departure> 
            <p:departing>LGA</p:departing> 
         </p:departure> 
         <p:return> 
            <p:arriving>EWR</p:arriving> 
         </p:return> 
      </p:itinerary> 
   </body> 
</soap-request> 
 

9.4 Call-Test 

9.4.1 Introduction 

The call-test instruction executes a subtest. 

9.4.2 Encoding 

Element/Attribute Usage Description 
<call-test Required The call-test instruction 
  name="QName"> Required Name of subtest to execute 
      <with-param Optional* Parameters 



OGC Best Practice              OGC 06-126r2 

24 Copyright © 2009 Open Geospatial Consortium, Inc.
 

        name="string" Required Parameter name 
        label="string" Optional Parameter label 
        label-expr="XPath" Optional Parameter label expression 
        select="XPath"> Optional Parameter value 
         XML node OptionalA Parameter value 
      </with-param> 
</call-test> 
 
Usage Notes: 
* May be repeated. 
A Should be empty unless the select attribute is supplied 
 
9.4.3 Element and Attribute Descriptions 

9.4.3.1 Name 

The name attribute identifies the test to execute, and corresponds to the name of a <test> 
element as described in section 8.2. 

9.4.3.2 With-param 

If the test to be called contains parameters, values for the parameters may be supplied 
using <with-param> elements.  It is similar to the <xsl:with-param> instruction, but it 
supports two additional attributes.  The optional label attribute is used for documentation 
purposes, to describe what is being passed to the subtest in the current instance of the 
call-test instruction.  The optional label-expr attribute is an XPath expression that is 
calculated at run time to generate a label for the parameter.  This value is substituted into 
the assertion text if the assertion text contains a reference to the parameter. 

9.4.4 Results 

This instruction does not generate any content, but it will pass on failures from the 
subtest.  In other words, if the subtest fails, the failure bubbles up the call stack, and 
parent tests will also fail. 

9.4.5 Examples 

<call-test name="example:subtest"> 
   <with-param name="param1" select=".//table[1]" label="The first table" 
               label-expr="concat('Table titled ', caption)"/> 
</call-test> 
 
<xsl:for-each select=".//table"> 
   <call-test name="example:subtest"> 
      <with-param name="param1" label="Each table" 
                  label-expr="concat('Table titled ', caption)"> 
         <xsl:value-of select="."/> 
      </with-param> 
   </call-test> 



OGC Best Practice              OGC 06-126r2 

 25
 

</xsl:for-each> 
 

9.5 For-each 

9.5.1 Introduction 

The for-each instruction loops through each node in a node-set, making it the current 
node and processing the instructions in the for-each instruction body.  It is identical to the 
xsl:for-each instruction, except that it allows setting labels with the label and label-expr 
attributes. 

9.5.2 Encoding 

Element/Attribute Usage Description 
<for-each Required The for-each instruction 
  select="XPath" Required Name of subtest to execute 
  label="string" Optional Parameter label 
  label-expr="XPath"> Optional Parameter label expression 
   <instruction/> Required* Parameter value 
</for-each> 
 
Usage Notes: 
* May be repeated. 
 
9.5.3 Element and Attribute Descriptions 

9.5.3.1 Select 

The required select attribute shall specify an XPath expression that evaluates to a node-
set. 

9.5.3.2 Label 

The optional label attribute is used for documentation purposes.  It describes the context 
for any enclosed call-test instructions. 

9.5.3.3 Label-expr 

The optional label-expr attribute is an XPath expression that is calculated at run time to 
generate a label for the context.  This value is substituted into the assertion text of any 
subtests that contains a reference to the context. 



OGC Best Practice              OGC 06-126r2 

26 Copyright © 2009 Open Geospatial Consortium, Inc.
 

9.5.3.4 Instructions 

The body of the for-each instruction shall contain CTL instructions and/or XSL 
instructions.  These instructions are processed for each node in the node-set specified by 
the select attribute, using that node as the current node. 

9.5.4 Results 

Returns any XML returned by processing the enclosed instructions. 

9.5.5 Example 

<for-each select=".//table" label="Each table"> 
          label-expr="concat('Table titled ', caption)"> 
   <call-test name="example:subtest"/> 
</for-each> 
 

9.6 Message 

9.6.1 Introduction 

The message instruction presents a message to the user.  For instance, it may be used to 
describe what is wrong when a test fails.  It may also be useful for debugging purposes 
when tests are in the development stage. 

The message may be supplied as an XPath expression using the select attribute or it may 
be provided as the body of the element.  In either case, the message presented to the user 
will be the string value of the selected nodes. 

9.6.2 Encoding 

Element/Attribute Usage Description 
<message Required The message instruction 
  select="XPath"> Optional Name of subtest to execute 
   message OptionalA Parameter value 
</message> 
 
Usage Notes: 
A Allowed only if no select attribute is provided. 
 
9.6.3 Element and Attribute Descriptions 

9.6.3.1 Select 

The optional select attribute specifies an XPath expression.  If present, the message will 
be generated by evaluating the expression and converting it to a string. 



OGC Best Practice              OGC 06-126r2 

 27
 

9.6.3.2 Message 

If there is no select attribute, the content of the message instruction specifies the message.  
It may contain mixed content, including character data and other instructions.  When any 
enclosed instructions have been evaluated, the result is converted to a string to generate 
the message. 

9.6.4 Results 

This instruction does not generate any content. 

9.6.5 Examples 

These two examples are equivalent: 

<message select="concat(’Table ’, caption)"/> 
 
<message>Table <xsl:value-of select="caption"/></message> 
 

9.7 Fail 

9.7.1 Introduction 

The fail instruction is used to indicate that a test has failed. 

9.7.2 Encoding 

Element/Attribute Usage Description 
<fail/> Required The fail instruction 
 
9.7.3 Element and Attribute Descriptions 

The fail instruction shall not contain any elements or attributes. 

9.7.4 Results 

When the test processor encounters the fail instruction, it indicates that the test has failed.  
However, this does not halt test execution.  The rest of the instructions will continue to be 
processed, including any subsequent calls to subtests, but regardless of their results the 
current test will fail. 

The instruction does not generate any content. 

9.7.5 Examples 

<xsl:if test="not(2 + 2 = 4)"> 
  <message>The laws of addition have failed</message> 
  <fail/> 
</xsl:if> 
 



OGC Best Practice              OGC 06-126r2 

28 Copyright © 2009 Open Geospatial Consortium, Inc.
 

9.8 Call-function 

9.8.1 Introduction 

The call-function instruction executes a named function. 

9.8.2 Encoding 

Element/Attribute Usage Description 
<call-function Required The call-function instruction 
  name="QName"> Required Name of function to execute 
      <with-param Optional* Parameters 
        name="string" Optional Parameter name 
        select="XPath"> Optional Parameter value 
         XML node OptionalA Parameter value 
      </with-param> 
</call-test> 
 
Usage Notes: 
* May be repeated. 
A Should be empty unless the select attribute is supplied 
 
9.8.3 Element and Attribute Descriptions 

9.8.3.1 Name 

The name attribute identifies the function to execute, and corresponds to the name of a 
<function> element as described in section 8.3. 

9.8.3.2 With-param 

If the test to be called contains parameters, values for the parameters may be supplied 
using <with-param> elements.  Parameters must be passed in order.  If the optional name 
attribute is specified, it must match the parameter in the corresponding position in the 
function definition is named, the names must match.  As with the <xsl:with-param> 
instruction, the parameter value may be specified as an XPath expression using the select 
attribute or it may be specified using the content of the with-param element. 

9.8.4 Results 

This instruction returns the value of the function call. 

9.8.5 Example 

<call-function name="example:myfunction"> 
   <with-param select=”param1”/> 
   <with-param><param2/></with-param> 



OGC Best Practice              OGC 06-126r2 

 29
 

</call-function> 

10 Built-in parsers 

10.1 Introduction 

This section describes several parser objects that are built-in to Compliance Test 
Language and shall be supported by test processors.  Tests can use these parsers without 
declaring them. 

10.2 CDataParser 

10.2.1 Introduction 

CDataParser is a parser that parses the content into character data. 

10.2.2 Encoding 

Element/Attribute Usage Description 
<parsers:CDataParser/> Required The parser element 
 
10.3 HTTPParser 

10.3.1 Introduction 

HTTPParser is a parser that returns HTTP header information uses other parser(s) to 
parse the content.  It supports multipart messages. 

10.3.2 Encoding 

Element/Attribute Usage Description 
<parsers:HTTPParser> Required The parser element 
   <parsers:parse Optional* Container for schema elements 
        part="integer" Optional Part number parser applies to, 
  for multipart responses 
        mime="mimeType"> Optional MIME type parser applies to 
       <parser/> Optional Parser instruction for converting 
  A content part into XML 
   </parsers:parse> 
</parsers:HTTPParser> 
 
Usage Notes: 
* May be repeated. 
 



OGC Best Practice              OGC 06-126r2 

30 Copyright © 2009 Open Geospatial Consortium, Inc.
 

10.3.3 Results 

10.3.3.1 Standard MIME-type Results 

If the Content-Type header of the message is not multipart, the results shall conform to 
this encoding: 

Element/Attribute Usage Description 
<response> Required Container for the response 
   <protocol></protocol> 
   <status Required HTTP status of the response 
      protocol="string" Required Protocol/version 
      code="integer"> Required Status code 
      string Required Status message text 
   </status> 
   <headers> Required HTTP headers returned 
      <header Optional* HTTP header 
        name="string"> Required Header name 
         string Required Header value 
      </header> 
   </headers> 
   <content> Optional Content returned by the selected parser 
      <xml/> Optional Parsed XML node 
   </content> 
</response> 
 
Usage Notes: 
* May be repeated. 
 

10.3.3.2 Multipart MIME-type Results 

If the Content-Type header of the message is multipart, the results shall conform to this 
encoding: 

Element/Attribute Usage Description 
<multipart-response> Required Container for the response 
   <status Required HTTP status of the response 
      protocol="string" Required Protocol/version 
      code="integer"> Required Status code 
      string Required Status message text 
   </status> 
   <headers> Required HTTP headers returned 



OGC Best Practice              OGC 06-126r2 

 31
 

      <header Optional* HTTP header 
        name="string"> Required Header name 
         string Required Header value 
      </header> 
   </headers> 
   <part Optional * Container for the response 
     num="integer"> Required HTTP headers returned 
      <headers> Required HTTP headers returned 
         <header Optional* HTTP header 
           name="string"> Required Header name 
            string Required Header value 
         </header> 
      </headers> 
      <content> Optional Content returned by the selected parser 
         <element/> Optional Parsed XML element 
      </content> 
   </part> 
</multipart-response> 
 
Usage Notes: 
* May be repeated. 
 
10.4 XMLValidatingParser 

10.4.1 Introduction 

XMLValidatingParser is a parser that parses data as XML and validates it against one or 
more XML Schemas. 

10.4.2 Encoding 

Element/Attribute Usage Description 
<parsers:XMLValidatingParser Required The parser element 
  ignoreErrors="true|false" Optional Determines behavior if  
  there are validation errors  
  ignoreWarnings="true|false"> Optional Determines behavior if  
  there are validation warnings  
   <parsers:schemas> Optional Container for schema pointers 
      <parsers:schema Required* Pointer to schema to validate against 
        type="url|file|resource"> Required  Schema type 
         string Required  Schema location 
      </parsers:schema> 



OGC Best Practice              OGC 06-126r2 

32 Copyright © 2009 Open Geospatial Consortium, Inc.
 

   </parsers:schemas> 
   <xsd:schema/> Optional* Schema definition to validate against 
</parsers:XMLValidatingParser> 
 
Usage Notes: 
* May be repeated. 
 
10.4.3 Element and Attribute Descriptions 

10.4.3.1 parsers:schemas 

The parsers:schemas element contains pointers to schemas to validate against.  Schemas 
can be read from a URL, a local file, or the java class path. 

10.4.3.2 xsd:schema  

Schemas may also be supplied directly using <xsd:schema> XML schema definition 
elements. 

10.4.4 Results 

The XMLValidatingParser attempts to parse the data stream returned by a request into 
XML, and validates the XML against each of the XML Schemas.  Any validation errors 
and warnings are presented to the user.  If there are no errors or warnings, or if errors and 
warning are ignored, the parser returns the XML.  If the data stream cannot be parsed or 
there are errors or warnings that are not ignored, no content is returned. 

10.4.5 Example 

<xsl:variable name="results"> 
 <request> 
  <url>http://www.example.com/example.xml</url> 
  <method>get</method> 
  <parsers:XMLValidatingParser> 
   <parsers:schemas> 
    <parsers:schema type="url"> 

 http://www.example.com/example.xsd 
    </parsers:schema> 

   </parsers:schemas> 
  </parsers:XMLValidatingParser> 
 </request> 

</xsl:variable> 
<xsl:if test="not($results/*)"> 

 <message>Parsing or validation failed.</message> 
</xsl:if> 

 



OGC Best Practice              OGC 06-126r2 

 33
 

10.5 SOAPParser  

10.5.1 Introduction  

SOAPParser is a parser that parses data as SOAP messages and validates it. Only the 
SOAP structure is validated. To validate the SOAP body content an 
XMLValidatingParser can be used as child of a SOAPParser (with the return attribute set 
to content).  

10.5.2 Encoding 

Element/Attribute Usage Description 
<parsers:SOAPParser Required The parser element 
  return="content|envelope"> Optional Envelope indicates return complete 
  SOAP message including SOAP 
  evelope.  Content indicates just 
  return SOAP body.  Default is  
  envelope. 
       <parser/> Optional Parser instruction for carrying out  
  further processing 
</parsers:SOAPParser> 
 
10.5.3 Results  

The SOAPParser validates the content of the SOAP message (SOAP 1.1 or 1.2 according 
to the response content namespace). Any validation errors and warnings are presented to 
the user. If there are no errors or warnings, the parser returns the XML. If the SOAP 
structure message cannot be validated no content is returned. 

10.5.4 Example 

In the next example the complete SOAP message is returned 

<soap-request version="1.1" charset="UTF-8" 
 xmlns:xi="http://www.w3.org/2001/XInclude" 
 xmlns:parsers="http://www.occamlab.com/te/parsers"> 
    <url>http://ebrr.pisa.intecs.it/ebrr/webservice?wsdl</url> 
    <action>GetCapabilities</action> 
    <body> 
.. .. 
    </body> 
    <parsers:SOAPParser return="envelope"> 
    </parsers:SOAPParser> 
</soap-request> 

In the next example the content of the SOAP message is returned 

<soap-request version="1.1" charset="UTF-8" 



OGC Best Practice              OGC 06-126r2 

34 Copyright © 2009 Open Geospatial Consortium, Inc.
 

 xmlns:xi="http://www.w3.org/2001/XInclude" 
 xmlns:parsers="http://www.occamlab.com/te/parsers"> 
    <url>http://ebrr.pisa.intecs.it/ebrr/webservice?wsdl</url> 
    <action>GetCapabilities</action> 
    <body> 
.. .. 
    </body> 
    <parsers:SOAPParser return="content"> 
    </parsers:SOAPParser> 
</soap-request> 

In the next example the content of the SOAP message validated and returned if no errors 
are detected 

<soap-request xmlns="http://www.occamlab.com/ctl"  
xmlns:parsers="http://www.occamlab.com/te/parsers"  
version="1.1" charset="UTF-8"> 
    <url>http://ebrr.pisa.intecs.it/ebrr/webservice?wsdl</url> 
    <action>GetRecord</action> 
    <body> 
.. .. 
    </body> 
    <parsers:SOAPParser return="content"> 
     <parsers:XMLValidatingParser> 
   <parsers:schemas> 
    <parsers:schema 
type="url">http://www.example.com/example.xsd</parsers:schema> 
   </parsers:schemas> 
  </parsers:XMLValidatingParser> 
 </parsers:SOAPParser>  
</soap-request> 
 



OGC Best Practice              OGC 06-126r2 

 35
 

Annex A 
(normative) 

 
Test suite 

A.1 Assertions 

For a CTL instance document to be conformant, these assertions must be true: 

1. schema-validation: The CTL instance document validates against the CTL 
schema file. 

2. validate-function: Each function is valid. 

2.1. var-params: If the function supports a variable number of parameters it is 
implemented as a java function. 

2.2. init-params: If the element is implemented using a java class with 
initialization parameters its inititialized attribute is set to true. 

2.3. select: For each initialization parameter, if the parameter contains a select 
attribute it does not contain content. 

3. validate-parser: Each parser is valid. 

3.1. init-params: If the element is implemented using a java class with 
initialization parameters its inititialized attribute is set to true. 

3.2. select: For each initialization parameter, if the parameter contains a select 
attribute it does not contain content. 

A.2 Test Code 

This specification includes normative test suite code, written in CTL for testing a CTL 
file for conformance. 

<package 
 xmlns:ct="http://www.occamlab.com/ctl/1.0" 
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
 xmlns:ctl="http://www.occamlab.com/ctl" 
 xmlns:parsers="http://www.occamlab.com/te/parsers" 
 xmlns="http://www.occamlab.com/ctl" 
> 
 <test name="ct:schema-validation"> 
  <param name="ctl-doc">A CTL document</param> 



OGC Best Practice              OGC 06-126r2 

36 Copyright © 2009 Open Geospatial Consortium, Inc.
 

  <assertion>{$ctl-doc} validates against the CTL schema 
file.</assertion> 
  <code> 
   <xsl:variable name="reparsed-ctl"> 
    <parse> 
     <content> 
      <xsl:value-of select="ctl-doc"/> 
     </content> 
     <parsers:XMLValidatingParser> 
      <parsers:schemas> 
       <parsers:schema 
type="resource">com/occamlab/te/schemas/ctl.xsd</parsers:schema> 
      </parsers:schemas> 
     </parsers:XMLValidatingParser> 
    </parse> 
   </xsl:variable> 
   <xsl:if test="not($reparsed-ctl/*)"> 
    <ctl:fail/> 
   </xsl:if> 
  </code> 
 </test> 
 
 <test name="ct:validate-function"> 
  <context>A CTL Function element</context> 
  <assertion>{$context} is valid.</assertion> 
  <code> 
   <call-test name="ct:var-params"/> 
   <call-test name="ct:init-params"/> 
   <ctl:for-each select="ctl:java/ctl:with-param" label="each 
initialization parameter" label-expr="concat('Parameter ', @name)"> 
    <call-test name="ct:select"/> 
   </ctl:for-each> 
  </code> 
 </test> 
  
 <test name="ct:validate-parser"> 
  <context>A CTL Parser element</context> 
  <assertion>{$context} is valid.</assertion> 
  <code> 
   <call-test name="ct:init-params"/> 
   <ctl:for-each select="ctl:java/ctl:with-param" label="each 
initialization parameter" label-expr="concat('Parameter ', @name)"> 
    <call-test name="ct:select"/> 
   </ctl:for-each> 
  </code> 
 </test> 
  
 <test name="ct:var-params"> 
  <context>a CTL Function element</context> 
  <assertion>If the function supports a variable number of 
parameters it is implemented as a java function.</assertion> 
  <code> 
   <xsl:if test="ctl:var-params and not(ctl:java)"> 
    <ctl:fail/> 
   </xsl:if> 
  </code> 
 </test> 



OGC Best Practice              OGC 06-126r2 

 37
 

  
 <test name="ct:init-params"> 
  <context>a CTL Function or Parser element</context> 
  <assertion>If the element is implemented using a java class with 
initialization parameters its inititialized attribute is set to 
true.</assertion> 
  <code> 
   <xsl:if test="ctl:java[ctl:with-param and 
not(@initialized='true')]"> 
    <ctl:fail/> 
   </xsl:if> 
  </code> 
 </test>  
  
 <test name="ct:select"> 
  <context>A java class initialization parameter</context> 
  <assertion>For {$context}, if the parameter contains a select 
attribute it does not contain content.</assertion> 
  <code> 
   <xsl:if test="@select and *"> 
    <ctl:fail/> 
   </xsl:if> 
  </code> 
 </test> 
 
 <test name="ct:main"> 
  <assertion>A CTL 1.0 instance document is valid.</assertion> 
  <code> 
   <xsl:variable name="form-values"> 
    <ctl:form xmlns=""> 
     Enter the URL of the CTL 1.0 instance document:<br/> 
     <input type="text" name="url"/> 
     <br/> 
     <input type="submit" value="OK"/> 
    </ctl:form> 
   </xsl:variable> 
   <xsl:variable name="ctl-doc"> 
    <request> 
     <url><xsl:value-of select="$form-
values/values/value[@key='url']"/></url> 
     <method>get</method> 
    </request> 
   </xsl:variable> 
   <call-test name="ct:schema-validation"> 
    <with-param name="ctl-doc" select="$ctl-doc" label="The 
CTL instance document" label-expr="'The CTL instance document'"/> 
   </call-test> 
   <for-each select="$ctl-doc//ctl:function" label="Each 
function" label-expr="concat('Function ', @name)"> 
    <call-test name="ct:validate-function"/> 
   </for-each> 
   <for-each select="$ctl-doc//ctl:parser" label="Each parser" 
label-expr="concat('Parser ', @name)"> 
    <call-test name="ct:validate-parser"/> 
   </for-each> 
  </code> 
 </test> 



OGC Best Practice              OGC 06-126r2 

38 Copyright © 2009 Open Geospatial Consortium, Inc.
 

 
 <suite name="ct:validator"> 
  <title>CTL 1.0 Validator</title> 
  <description>Validates a CTL instance document.</description> 
  <starting-test>ct:main</starting-test> 
 </suite> 
</package> 
 
 



OGC Best Practice              OGC 06-126r2 

 39
 

Annex B 
(normative) 

 
XML schemas 

This specification includes a normative XML Schema file, included below.   

<xs:schema xmlns:ctl="http://www.occamlab.com/ctl"  
  xmlns:xi="http://www.w3.org/2001/XInclude"  
  xmlns:xs="http://www.w3.org/2001/XMLSchema"  
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  targetNamespace="http://www.occamlab.com/ctl"  
  elementFormDefault="qualified" 
  version="2007.08"> 
 <!-- CTL supports XSLT 1.0 instructions, but since the W3C has not  
      published an XSLT 1.0 schema 
      and 1.0 instructions are forwards-compatible with 2.0    
    instructions, include the XSLT 2.0 schema --> 
 <xs:import namespace=http://www.w3.org/1999/XSL/Transform    
   schemaLocation="xslt20.xsd"/> 
 <xs:import namespace="http://www.w3.org/2001/XInclude"     
   schemaLocation="xinclude.xsd"/> 
 <xs:element name="package" type="ctl:packageType"/> 
 <xs:complexType name="packageType"> 
  <xs:sequence minOccurs="0" maxOccurs="unbounded"> 
   <xs:choice> 
    <xs:element ref="xsl:template"/> 
    <xs:element ref="ctl:function"/> 
    <xs:element ref="ctl:parser"/> 
    <xs:element ref="ctl:package"/> 
    <xs:element ref="ctl:test"/> 
    <xs:element ref="ctl:suite"/> 
    <xs:element ref="ctl:profile"/> 
    <xs:element ref="xi:include"/> 
   </xs:choice> 
  </xs:sequence> 
  <xs:anyAttribute namespace="##other" processContents="lax"/> 
 </xs:complexType> 
 <xs:element name="function" type="ctl:functionType"/> 
 <xs:complexType name="functionType"> 
  <xs:sequence> 
   <xs:element name="param" minOccurs="0" maxOccurs="unbounded"> 
    <xs:complexType> 
     <xs:simpleContent> 
      <xs:extension base="xs:string"> 
       <xs:attribute name="name" type="xs:string"  
         use="optional"/> 
      </xs:extension> 
     </xs:simpleContent> 
    </xs:complexType> 
   </xs:element> 
   <xs:element name="var-params" minOccurs="0"> 
    <xs:complexType> 

http://www.w3.org/1999/XSL/Transform


OGC Best Practice              OGC 06-126r2 

40 Copyright © 2009 Open Geospatial Consortium, Inc.
 

     <xs:simpleContent> 
      <xs:extension base="xs:string"> 
       <xs:attribute name="min" type="xs:integer"  
         use="required"/> 
       <xs:attribute name="max" type="xs:integer"   
         use="required"/> 
      </xs:extension> 
     </xs:simpleContent> 
    </xs:complexType> 
   </xs:element> 
   <xs:element name="context" type="xs:string" minOccurs="0"/> 
   <xs:element name="return" type="xs:string" minOccurs="0"/> 
   <xs:element name="description" type="xs:string"     
      minOccurs="0"/> 
   <xs:element name="comment" type="xs:string" minOccurs="0"  
      maxOccurs="unbounded"/> 
   <xs:choice> 
    <xs:element name="java" type="ctl:javaType"/> 
    <xs:element name="code" type="ctl:codeType"/> 
   </xs:choice> 
  </xs:sequence> 
  <xs:attribute name="name" type="xs:QName" use="required"/> 
 </xs:complexType> 
 <xs:element name="parser" type="ctl:functionType"/> 
 <xs:element name="test" type="ctl:testType"/> 
 <xs:complexType name="testType"> 
  <xs:sequence> 
   <xs:element name="param" type="ctl:paramType" minOccurs="0" 
      maxOccurs="unbounded"/> 
   <xs:element name="context" type="xs:string" minOccurs="0"/> 
   <xs:element name="assertion" type="xs:string"/> 
   <xs:element name="comment" type="xs:string" minOccurs="0"  
      maxOccurs="unbounded"/> 
   <xs:element name="link" type="ctl:linkType" minOccurs="0"  
      maxOccurs="unbounded"/> 
   <xs:element name="code" type="ctl:codeType"/> 
  </xs:sequence> 
  <xs:attribute name="name" type="xs:QName" use="required"/> 
 </xs:complexType> 
 <xs:element name="suite" type="ctl:suiteType"/> 
 <xs:complexType name="suiteType"> 
  <xs:sequence> 
   <xs:element name="title" type="xs:string"/> 
   <xs:element name="description" type="xs:string"     
      minOccurs="0"/> 
   <xs:element name="link" type="ctl:linkType" minOccurs="0"  
      maxOccurs="unbounded"/> 
   <xs:element name="starting-test" type="xs:QName"/> 
   <xs:element name="form" minOccurs="0"> 
    <xs:complexType mixed="true"> 
     <xs:sequence minOccurs="0" maxOccurs="unbounded"> 
      <xs:any processContents="lax"/> 
     </xs:sequence> 
    </xs:complexType> 
   </xs:element> 
  </xs:sequence> 
  <xs:attribute name="name" type="xs:QName" use="required"/> 



OGC Best Practice              OGC 06-126r2 

 41
 

        <xs:attribute name="requires-modules" type="ctl:ModuleListType"
     use="optional"/> 
        <xs:attribute name="version" type="xs:string" use="optional"/> 
 </xs:complexType> 
 <xs:element name="profile" type="ctl:profileType"/> 
 <xs:complexType name="profileType"> 
  <xs:sequence> 
   <xs:element name="title" type="xs:string"/> 
   <xs:element name="description" type="xs:string"     
     minOccurs="0"/> 
   <xs:element name="link" type="ctl:linkType" minOccurs="0"  
     maxOccurs="unbounded"/> 
   <xs:element name="base" type="xs:QName"/> 
   <xs:element name="exclude" type="xs:string" minOccurs="0"  
     maxOccurs="unbounded"/> 
   <xs:element name="starting-test" type="xs:QName"/> 
   <xs:element name="form" minOccurs="0"> 
    <xs:complexType mixed="true"> 
     <xs:sequence minOccurs="0" maxOccurs="unbounded"> 
      <xs:any processContents="lax"/> 
     </xs:sequence> 
    </xs:complexType> 
   </xs:element> 
  </xs:sequence> 
  <xs:attribute name="name" type="xs:QName" use="required"/> 
        <xs:attribute name="requires-modules" type="ctl:ModuleListType"
     use="optional"/> 
        <xs:attribute name="version" type="xs:string" use="optional"/> 
 </xs:complexType> 
 <xs:complexType name="paramType"> 
  <xs:simpleContent> 
   <xs:extension base="xs:string"> 
    <xs:attribute name="name" type="xs:string"     
     use="required"/> 
   </xs:extension> 
  </xs:simpleContent> 
 </xs:complexType> 
 <xs:complexType name="javaType"> 
  <xs:sequence minOccurs="0" maxOccurs="unbounded"> 
   <xs:element name="with-param"> 
    <xs:complexType mixed="true"> 
     <xs:sequence> 
      <xs:any processContents="lax" minOccurs="0"/> 
     </xs:sequence> 
     <xs:attribute name="name" type="xs:string"     
      use="optional"/> 
     <xs:attribute name="select" type="xs:string"   
        use="optional"/> 
    </xs:complexType> 
   </xs:element> 
  </xs:sequence> 
  <xs:attribute name="class" type="xs:string" use="required"/> 
  <xs:attribute name="method" type="xs:string" use="required"/> 
  <xs:attribute name="initialized" type="xs:boolean"     
        use="optional"/> 
 </xs:complexType> 
 <xs:complexType name="codeType" mixed="true"> 



OGC Best Practice              OGC 06-126r2 

42 Copyright © 2009 Open Geospatial Consortium, Inc.
 

  <xs:sequence minOccurs="0" maxOccurs="unbounded"> 
   <xs:any processContents="lax"/> 
  </xs:sequence> 
 </xs:complexType> 
 <xs:complexType name="linkType"> 
  <xs:simpleContent> 
   <xs:extension base="xs:string"> 
    <xs:attribute name="title" type="xs:string"     
      use="optional"/> 
   </xs:extension> 
  </xs:simpleContent> 
 </xs:complexType> 
    <xs:simpleType name="ModuleListType"> 
      <xs:annotation> 
      <xs:documentation> 
      A whitespace-delimited list of extension modules required by this
    test suite. 
      </xs:documentation> 
      </xs:annotation> 
      <xs:list itemType="xs:string" /> 
   </xs:simpleType> 
</xs:schema> 


	1 Scope
	2 Conformance
	3 Normative references
	4 Terms and definitions
	5 Conventions
	5.1 Abbreviated terms
	5.2 Encoding Listings

	6 Overview of CTL
	7 Package
	7.1 Introduction
	7.2 Encoding

	8 CTL Objects
	8.1 Suite
	8.1.1 Introduction
	8.1.2 Encoding
	8.1.3 Example

	8.2 Profiles
	8.2.1 Introduction
	8.2.2 Encoding
	8.2.3 Example

	8.3 Test
	8.3.1 Introduction
	8.3.2 Encoding
	8.3.3 Element Descriptions
	8.3.3.1 Param
	8.3.3.2 Context
	8.3.3.3 Assertion
	8.3.3.4 Comments
	8.3.3.5 Link
	8.3.3.6 Code

	8.3.4 Example

	8.4 Function
	8.4.1 Introduction
	8.4.2 Encoding
	8.4.3 Element Descriptions
	8.4.3.1 Param
	8.4.3.2 Var-params
	8.4.3.3 Context
	8.4.3.4 Return
	8.4.3.5 Description
	8.4.3.6 Comment
	8.4.3.7 Code
	8.4.3.8 Java

	8.4.4 Examples

	8.5 Parser
	8.5.1 Introduction
	8.5.2 Encoding
	8.5.3 Element Descriptions
	8.5.3.1 Description
	8.5.3.2 Comment
	8.5.3.3 Java



	9 Instructions
	9.1 Form
	9.1.1 Introduction
	9.1.2 Encoding
	9.1.3 Element and Attribute Descriptions
	9.1.3.1 Height and Width
	9.1.3.2 XHTML Basic elements
	9.1.3.3 Parse elements

	9.1.4 Results
	9.1.5 Examples

	9.2 Request
	9.2.1 Introduction
	9.2.2 Encoding
	9.2.3 Element and Attribute Descriptions
	9.2.3.1 URL
	9.2.3.2 Method
	9.2.3.3 Header
	9.2.3.4 Param
	9.2.3.5 Body
	9.2.3.6 Parser

	9.2.4 Results
	9.2.5 Example

	9.3 Soap Request
	9.3.1 Introduction 
	9.3.2 Encoding 
	9.3.3 Element and Attribute Descriptions 
	9.3.3.1 version
	9.3.3.2 charset
	9.3.3.3 URL 
	9.3.3.4 action
	9.3.3.5 Header blocks
	9.3.3.6 mustUnderstand
	9.3.3.7 relay
	9.3.3.8 role
	9.3.3.9 Header Block Element
	9.3.3.10 Body 
	9.3.3.11 Parser 

	9.3.4 Results 
	9.3.5 Examples

	9.4 Call-Test
	9.4.1 Introduction
	9.4.2 Encoding
	9.4.3 Element and Attribute Descriptions
	9.4.3.1 Name
	9.4.3.2 With-param

	9.4.4 Results
	9.4.5 Examples

	9.5 For-each
	9.5.1 Introduction
	9.5.2 Encoding
	9.5.3 Element and Attribute Descriptions
	9.5.3.1 Select
	9.5.3.2 Label
	9.5.3.3 Label-expr
	9.5.3.4 Instructions

	9.5.4 Results
	9.5.5 Example

	9.6 Message
	9.6.1 Introduction
	9.6.2 Encoding
	9.6.3 Element and Attribute Descriptions
	9.6.3.1 Select
	9.6.3.2 Message

	9.6.4 Results
	9.6.5 Examples

	9.7 Fail
	9.7.1 Introduction
	9.7.2 Encoding
	9.7.3 Element and Attribute Descriptions
	9.7.4 Results
	9.7.5 Examples

	9.8 Call-function
	9.8.1 Introduction
	9.8.2 Encoding
	9.8.3 Element and Attribute Descriptions
	9.8.3.1 Name
	9.8.3.2 With-param

	9.8.4 Results
	9.8.5 Example


	10 Built-in parsers
	10.1 Introduction
	10.2 CDataParser
	10.2.1 Introduction
	10.2.2 Encoding

	10.3 HTTPParser
	10.3.1 Introduction
	10.3.2 Encoding
	10.3.3 Results
	10.3.3.1 Standard MIME-type Results
	10.3.3.2 Multipart MIME-type Results


	10.4 XMLValidatingParser
	10.4.1 Introduction
	10.4.2 Encoding
	10.4.3 Element and Attribute Descriptions
	10.4.3.1 parsers:schemas
	10.4.3.2 xsd:schema 

	10.4.4 Results
	10.4.5 Example

	10.5 SOAPParser 
	10.5.1 Introduction 
	10.5.2 Encoding
	10.5.3 Results 
	10.5.4 Example





