
  
 

 

Open Geospatial Consortium 
Approval Date: 2013-01-18 

Posted Date: 2012-12-21 

Publication Date: 2013-06-18 

Reference number of this document:  OGC 12-163 

  Reference URL for this document: http://www.opengis.net/def/doc-type/per/ows9-data-transmission 

Category: Public Engineering Report 

Editor(s): Thibault Dacla; Eriza Hafid Fazli; Charles Chen; Stuart Wilson 

OGC® OWS-9 Data Transmission Management 
Copyright © 2013 Open Geospatial Consortium. 

To obtain additional rights of use, visit http://www.opengeospatial.org/legal/. 

 

 

Warning 

This document is not an OGC Standard. This document is an OGC Public 
Engineering Report created as a deliverable in an OGC Interoperability Initiative 
and is not an official position of the OGC membership. It is distributed for review 
and comment. It is subject to change without notice and may not be referred to as 
an OGC Standard. Further, any OGC Engineering Report should not be referenced 
as required or mandatory technology in procurements.  

 

 

Document type:  OGC® Engineering Report 
Document subtype: NA 
Document stage:  Approved for public release 
Document language:  English 



OGC 12-163 

ii  
 

Abstract 

This OWS-9 Engineering Report documents investigations, findings, lessons learned and 
proposed future work for the Data Transmission Management unit, invented and 
prototyped in OWS-9. 

The purpose of the Data Transmission Management unit is to optimize, customize and 
make reliable the information exchange between the aircraft and the different web 
services on the ground. 

Keywords 

ogcdoc, ogc document, ows9, ows-9, data transmission, aviation, atm, dtm, dms 

What is OGC Web Services 9 (OWS-9)? 

OWS-9 builds on the outcomes of prior OGC interoperability initiatives and is organized 
around the following threads: 

-   Aviation: Develop and demonstrate the use of the Aeronautical Information Exchange 
Model (AIXM) and the Weather Exchange Model (WXXM) in an OGC Web Services 
environment, focusing on support for several Single European Sky ATM Research 
(SESAR) project requirements as well as FAA (US Federal Aviation Administration) 
Aeronautical Information Management (AIM) and Aircraft Access to SWIM (System 
Wide Information Management) (AAtS) requirements. 

-   Cross-Community Interoperability (CCI): Build on the CCI work accomplished in 
OWS–8 by increasing interoperability within communities sharing geospatial data, 
focusing on semantic mediation, query results delivery, data provenance and quality and 
Single Point of Entry Global Gazetteer. 

-   Security and Services Interoperability (SSI): Investigate 5 main activities: Security 
Management, OGC Geography Markup Language (GML) Encoding Standard 
Application Schema UGAS (UML to GML Application Schema) Updates, Web Services 
Façade, Reference Architecture Profiling, and Bulk Data Transfer. 

-   OWS Innovations: Explore topics that represent either new areas of work for the 
Consortium (such as GPS and Mobile Applications), a desire for new approaches to 
existing technologies to solve new challenges (such as the OGC Web Coverage Service 
(WCS) work), or some combination of the two. 

-   Compliance & Interoperability Testing & Evaluation (CITE): Develop a suite of 
compliance test scripts for testing and validation of products with interfaces 
implementing the following OGC standards: Web Map Service (WMS) 1.3 Interface 
Standard, Web Feature Service (WFS) 2.0 Interface Standard, Geography Markup 



OGC 12-163 

 iii 
 

Language (GML) 3.2.1 Encoding Standard, OWS Context 1.0 (candidate encoding 
standard), Sensor Web Enablement (SWE) standards, Web Coverage Service for Earth 
Observation (WCS-EO) 1.0 Interface Standard, and TEAM (Test, Evaluation, And 
Measurement) Engine Capabilities. 

The OWS-9 sponsors are: AGC (Army Geospatial Center, US Army Corps of 
Engineers), CREAF-GeoViQua-EC, EUROCONTROL, FAA (US Federal Aviation 
Administration), GeoConnections - Natural Resources Canada, Lockheed Martin 
Corporation, NASA (US National Aeronautics and Space Administration), NGA (US 
National Geospatial-Intelligence Agency), USGS (US Geological Survey), UK DSTL 
(UK MoD Defence Science and Technology Laboratory). 
  



OGC 12-163 

iv  
 

 

License Agreement 

Permission is hereby granted by the Open Geospatial Consortium, ("Licensor"), free of charge and subject to the terms set forth below, 
to any person obtaining a copy of this Intellectual Property and any associated documentation, to deal in the Intellectual Property 
without restriction (except as set forth below), including without limitation the rights to implement, use, copy, modify, merge, publish, 
distribute, and/or sublicense copies of the Intellectual Property, and to permit persons to whom the Intellectual Property is furnished to 
do so, provided that all copyright notices on the intellectual property are retained intact and that each person to whom the Intellectual 
Property is furnished agrees to the terms of this Agreement. 

If you modify the Intellectual Property, all copies of the modified Intellectual Property must include, in addition to the above 
copyright notice, a notice that the Intellectual Property includes modifications that have not been approved or adopted by LICENSOR. 

THIS LICENSE IS A COPYRIGHT LICENSE ONLY, AND DOES NOT CONVEY ANY RIGHTS UNDER ANY PATENTS 
THAT MAY BE IN FORCE ANYWHERE IN THE WORLD. 

THE INTELLECTUAL PROPERTY IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE, AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. THE COPYRIGHT HOLDER OR HOLDERS INCLUDED 
IN THIS NOTICE DO NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THE INTELLECTUAL PROPERTY WILL 
MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE INTELLECTUAL PROPERTY WILL BE 
UNINTERRUPTED OR ERROR FREE. ANY USE OF THE INTELLECTUAL PROPERTY SHALL BE MADE ENTIRELY AT 
THE USER’S OWN RISK. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY CONTRIBUTOR OF 
INTELLECTUAL PROPERTY RIGHTS TO THE INTELLECTUAL PROPERTY BE LIABLE FOR ANY CLAIM, OR ANY 
DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING 
FROM ANY ALLEGED INFRINGEMENT OR ANY LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF 
CONTRACT, NEGLIGENCE OR UNDER ANY OTHER LEGAL THEORY, ARISING OUT OF OR IN CONNECTION WITH 
THE IMPLEMENTATION, USE, COMMERCIALIZATION OR PERFORMANCE OF THIS INTELLECTUAL PROPERTY. 

This license is effective until terminated. You may terminate it at any time by destroying the Intellectual Property together with all 
copies in any form. The license will also terminate if you fail to comply with any term or condition of this Agreement. Except as 
provided in the following sentence, no such termination of this license shall require the termination of any third party end-user 
sublicense to the Intellectual Property which is in force as of the date of notice of such termination. In addition, should the Intellectual 
Property, or the operation of the Intellectual Property, infringe, or in LICENSOR’s sole opinion be likely to infringe, any patent, 
copyright, trademark or other right of a third party, you agree that LICENSOR, in its sole discretion, may terminate this license 
without any compensation or liability to you, your licensees or any other party. You agree upon termination of any kind to destroy or 
cause to be destroyed the Intellectual Property together with all copies in any form, whether held by you or by any third party. 

Except as contained in this notice, the name of LICENSOR or of any other holder of a copyright in all or part of the Intellectual 
Property shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Intellectual Property without 
prior written authorization of LICENSOR or such copyright holder. LICENSOR is and shall at all times be the sole entity that may 
authorize you or any third party to use certification marks, trademarks or other special designations to indicate compliance with any 
LICENSOR standards or specifications. 

This Agreement is governed by the laws of the Commonwealth of Massachusetts. The application to this Agreement of the United 
Nations Convention on Contracts for the International Sale of Goods is hereby expressly excluded. In the event any provision of this 
Agreement shall be deemed unenforceable, void or invalid, such provision shall be modified so as to make it valid and enforceable, 
and as so modified the entire Agreement shall remain in full force and effect. No decision, action or inaction by LICENSOR shall be 
construed to be a waiver of any rights or remedies available to it. 

None of the Intellectual Property or underlying information or technology may be downloaded or otherwise exported or reexported in 
violation of U.S. export laws and regulations. In addition, you are responsible for complying with any local laws in your jurisdiction 
which may impact your right to import, export or use the Intellectual Property, and you represent that you have complied with any 
regulations or registration procedures required by applicable law to make this license enforceable 



OGC 12-163 

 v 
 

Contents Page 

1	   Introduction ............................................................................................................. 1	  
1.1	   Scope .................................................................................................................. 1	  
1.2	   Document contributor contact points ................................................................. 2	  
1.3	   Revision history .................................................................................................. 2	  
1.4	   Future work ........................................................................................................ 2	  
1.5	   Forward .............................................................................................................. 3	  
1.6	   DMS design and implementation in OWS-9 ...................................................... 3	  

2	   References ............................................................................................................... 4	  
3	   Conventions ............................................................................................................ 5	  

3.1	   Abbreviated terms .............................................................................................. 5	  
4	   Executive Summary ................................................................................................ 6	  

5	   DMS Demonstration ............................................................................................. 11	  
5.1	   Aviation Thread Demonstration ....................................................................... 11	  
5.2	   DMS Mini Demonstration ................................................................................ 11	  

6	   DMS Use Cases .................................................................................................... 12	  
6.1	   Use Case #1: Session negotiation ..................................................................... 13	  
6.2	   Use Case #2: Request-response ........................................................................ 15	  
6.3	   Use Case #3: Publish-subscribe ....................................................................... 16	  
6.4	   Use Case #4: Dispatcher use cases ................................................................... 18	  

7	   DMS Communication Model ................................................................................ 18	  
7.1	   Detailed protocol .............................................................................................. 22	  
7.2	   Required extensions to OGC Web Services Architecture ................................ 24	  
7.3	   Lessons learned ................................................................................................ 24	  

8	   OWS-9 High Level Requirements ........................................................................ 25	  
9	   Efficient Communications .................................................................................... 26	  

9.1	   Scope of Work .................................................................................................. 27	  
9.1.1	   Reliable Messaging ...................................................................................... 27	  
9.1.2	   Dispatch Module .......................................................................................... 27	  

9.2	   Recommended Approach ................................................................................. 28	  
9.2.1	   Web Services Reliable Messaging architecture ........................................... 28	  
9.2.2	   Wire protocol elements ................................................................................ 29	  
9.2.3	   Requirements coverage ................................................................................ 33	  

9.2.3.1	   Lost or out-of-order messages due to wireless link .......................................... 33	  
9.2.3.2	   Network failure and IP address change ............................................................ 34	  
9.2.3.3	   Software failure ................................................................................................ 36	  
9.2.3.4	   Dispatcher data summary ................................................................................. 36	  

9.3	   Implementation ................................................................................................. 37	  
9.4	   Lessons Learned ............................................................................................... 37	  



OGC 12-163 

vi  
 

9.5	   Future Work ..................................................................................................... 37	  
10	   Message Prioritization Module ............................................................................. 38	  

10.1	   Scope of Work .................................................................................................. 38	  
10.1.1	   Message Prioritization by Type ................................................................... 39	  
10.1.2	   Message Prioritization by Time to Expire ................................................... 40	  

10.2	   Implementation ................................................................................................. 40	  
10.3	   Lessons Learned ............................................................................................... 40	  
10.4	   Future Work ..................................................................................................... 41	  

11	   Efficient Data Exchange ....................................................................................... 41	  
11.1	   Scope of Work .................................................................................................. 42	  
11.2	   Data Compression Module ............................................................................... 42	  

11.2.1	   Analysis ........................................................................................................ 44	  
11.2.1.1	   Compaction analysis ......................................................................................... 45	  
11.2.1.2	   CPU consumption ............................................................................................. 48	  
11.2.1.3	   Gzip compaction time analysis ......................................................................... 50	  
11.2.1.4	   Memory footprint ............................................................................................. 51	  

11.2.2	   Overall analysis ............................................................................................ 52	  
11.2.2.1	   Strong real-time constraint ............................................................................... 52	  
11.2.2.2	   Strong Compaction constraint .......................................................................... 52	  
11.2.2.3	   Strong resources constraints ............................................................................. 53	  

11.2.3	   Recommended Approach ............................................................................. 53	  
11.2.4	   Implementation ............................................................................................ 54	  
11.2.5	   Performance Measures ................................................................................. 54	  

11.3	   Data link selection ............................................................................................ 54	  
11.3.1	   Analysis ........................................................................................................ 54	  

11.4	   Alternative protocols for exchanging messages ............................................... 55	  
11.4.1	   Protocols ...................................................................................................... 55	  

11.4.1.1	   HTTP (Hyper Text Transfer Protocol) ............................................................. 55	  
11.4.1.2	   FTP (File Transfer Protocol) ............................................................................ 56	  
11.4.1.3	   SMTP (Simple Mail Transfer Protocol) ........................................................... 57	  
11.4.1.4	   AMQP (Advanced Message Queuing Protocol) .............................................. 58	  

11.4.2	   Headers ........................................................................................................ 60	  
11.5	   Lessons Learned ............................................................................................... 61	  
11.6	   Future Work ..................................................................................................... 62	  

12	   Data Filtering ........................................................................................................ 62	  
12.1	   Scope of Work .................................................................................................. 63	  

12.1.1	   Extraction ..................................................................................................... 63	  
12.1.2	   Recommended Approach ............................................................................. 64	  
12.1.3	   Densification ................................................................................................ 66	  
12.1.4	   Recommended approach .............................................................................. 66	  
12.1.5	   Provider filtering .......................................................................................... 67	  
12.1.6	   Recommended approach .............................................................................. 67	  

12.2	   Implementation ................................................................................................. 67	  



OGC 12-163 

 vii 
 

12.3	   Lessons Learned ............................................................................................... 68	  
12.4	   Future Work ..................................................................................................... 68	  

13	   Data Validation ..................................................................................................... 69	  
13.1	   Scope of Work .................................................................................................. 69	  

13.1.1	   DMS Currency Validation ........................................................................... 70	  
13.1.1.1	   Recommended Approach ................................................................................. 70	  

13.1.2	   Client Latency Validation ............................................................................ 71	  
13.1.2.1	   Recommended Approach ................................................................................. 71	  

13.1.3	   Subscription Interval Validation .................................................................. 72	  
13.1.3.1	   Recommended Approach ................................................................................. 72	  

13.2	   Implementation ................................................................................................. 73	  
13.2.1	   Currency Validation ..................................................................................... 73	  

13.3	   Lessons Learned ............................................................................................... 74	  
13.4	   Future Work ..................................................................................................... 75	  

14	   Data Provenance ................................................................................................... 75	  
14.1	   Scope of Work .................................................................................................. 75	  

14.1.1	   Provenance Tracking ................................................................................... 76	  
14.1.2	   Recommended Approach ............................................................................. 76	  

14.2	   Implementation ................................................................................................. 76	  
14.3	   Lessons Learned ............................................................................................... 77	  
14.4	   Future Work ..................................................................................................... 77	  

15	   DMS Metadata Provisioning ................................................................................. 78	  
15.1	   Scope of Work .................................................................................................. 78	  

15.1.1	   Reliable Messaging Metadata ...................................................................... 78	  
15.1.2	   Validation Metadata ..................................................................................... 78	  
15.1.3	   Provenance Metadata ................................................................................... 79	  
15.1.4	   Filtering Metadata ........................................................................................ 79	  

16	   AIXM/WXXM Metadata Compliance ................................................................. 80	  

17	   Appendix: Systems Rules Model Analysis ........................................................... 80	  
17.1	   SRM 10.1 – Maintain Data Synchronization between Ground and Aircraft 

Users ................................................................................................................. 80	  
17.2	   SRM 10.2 – Perform Data Validation .............................................................. 81	  
17.3	   SRM 10.3 – Perform Data Filtering ................................................................. 84	  
17.4	   SRM 10.4 – Manage Subscription and Data Request Configurations ............. 85	  
17.5	   SRM 10.5 – Populate Priority and Security Data Fields .................................. 86	  
17.6	   SRM 10.6 – Data Provenance .......................................................................... 88	  

 

 

Figures Page 



OGC 12-163 

viii  
 

Figure 1 – DMS System level diagram ....................................................................................... 12	  

Figure 2 - Service Negotiation ..................................................................................................... 19	  

Figure 3 - Request Reply .............................................................................................................. 20	  

Figure 4 – Subscription request .................................................................................................. 21	  

Figure 5 - Notification .................................................................................................................. 22	  

Figure 6 - Topologically-close DMS ............................................................................................ 35	  

Figure 7 - Topologically-far DMS ............................................................................................... 36	  

Figure 8 - Prioritization Module Example ................................................................................. 39	  

Figure 9 - Compaction results on D-Notams .............................................................................. 45	  

Figure 10 - Compaction results on second family ...................................................................... 46	  

Figure 11 - Compaction results with post compression for bigger files .................................. 47	  

Figure 12 - Compaction Speed Results D-Notams ..................................................................... 48	  

Figure 13 - Compaction Speed Results Medium Sized Files .................................................... 49	  

Figure 14 - Compaction Speed Results Large Sized Files ......................................................... 49	  

Figure 15 - Gzip Compaction Speed Results .............................................................................. 50	  

Figure 16 - Compression Algorithm Resource Allocation ........................................................ 51	  

Figure 17 : AMQP in System Oriented Architectures .............................................................. 59	  

 Tables 
Table 1 - Use case #1 – Session Negotiation ............................................................................... 13	  

Table 2 - Use case #2 – Request - Response ................................................................................ 15	  

Table 3 - Use case #3-1 - Subscription ........................................................................................ 16	  

Table 4 - Use case #3-2 - Notification .......................................................................................... 17	  

Table 5 - Use case #4 - Dispatch .................................................................................................. 18	  

Table 6 – WS-ReliableMessaging basic operations ................................................................... 29	  

 

 

 

 



OpenGIS® Engineering Report OGC 12-163 

 

 1 
 

OGC® OWS-9 Data Transmission Management 

1 Introduction 

1.1 Scope 

This document is the results of the investigations and discussions undertaken in OWS-9 
concerning the Data Management Service Entity. 

This document establishes the structure of the Data Management Service (DMS), defines 
its position in the OGC architecture, specifies its role within its architecture, together 
with its limits and, as much as possible, its interfaces with other OGC entities (e.g. Web 
Feature Service). 

The baseline for those definitions can be found in the System Rules Model provided at 
the end of the document. 

The general motivation of this document is to provide guidelines for the specification of a 
broker entity, which main objectives consist of optimizing resources utilization and 
improving the quality of service delivery. 

To achieve that purpose, this document defines 6 modules that constitute the DMS 
functionalities: Efficient Communication, Efficient Data Exchange, Prioritization, 
Filtering, Validation and Provenance. Each of these modules is described in this 
document in terms of scope, investigation results and recommended approach. 

This document is not a set of requirements that need to be fulfilled by a DMS 
implementation. It only provides the result of investigations for general transmission 
optimization with a strong focus on the aviation domain. However for each module, the 
implementation choices made by the development team are described and justified. 

 



OGC 12-163 

2  
 

1.2 Document contributor contact points 

All questions regarding this document should be directed to the editor or the contributors: 

Name Organization 
Charles Chen Harris Corporation 
Thibault Dacla Atmosphere gbmh 
Eriza Fazli TriGnoSys 
Stuart Wilson Harris Corporation 

 

1.3 Revision history 

Date Release Editor Primary clauses 
modified 

Description 

     
     
 

1.4 Future work 

Some points identified for future DMS work: 

- The use of SOAP and the intention to make the DMS as transparent as possible to 
the different clients and web services eventually create an issue on the client 
implementation. If the OWSs already use SOAP, DMS insertion requires that the 
client’s original SOAP envelope to be enclosed in another SOAP envelope to 
communicate with the DMS. This is rather tricky to do and requires modification 
of the middleware that the client typically uses to intercept the original SOAP 
envelope.  more feedback from all stakeholders including client to devise which 
protocol solution to be used; use different transport than HTTP or SOAP 

- Cleaner definition of DMS interfaces; right now {request, subscribe request, 
notify, {dispatch}}. Some messages are not captured, e.g. if the client wants to get 
a WSDL or schema files from the web service. 

- Proper definition of the middle entity that operates between clients and the DMS 
to make the inclusion of the DMS truly seamless to clients. 

- Provision of additional operations at the DMS, such as destroy session. 
- Support of binary content (e.g. image formats) 
- Further investigation of AMQP as a potential alternative to HTTP for web 

services over IP 
- Definition of the need scope and responsibility for the addition of filtering options 

provided to the client. Tradeoff to be made between bandwidth efficiency and 
schema compliance. 

- Address the issue of client mobility (change of IP address) 
- Similarly, address the use case of DMS handovers 



OGC 12-163 

 3 
 

1.5 Forward 

Attention is drawn to the possibility that some of the elements of this document may be 
the subject of patent rights. The Open Geospatial Consortium shall not be held 
responsible for identifying any or all such patent rights. 

Recipients of this document are requested to submit, with their comments, notification of 
any relevant patent claims or other intellectual property rights of which they may be 
aware that might be infringed by any implementation of the standard set forth in this 
document, and to provide supporting documentation. 

1.6 DMS design and implementation in OWS-9 

OGC Interoperability Program (IP) projects such as the OGC Web Services Testbed 
Phase 9 (OWS-9) bring together a range of independent participants – from both the 
public and private sector - to respond to sponsor requirements. This was also true for the 
design and implementation of the Data Management Service (DMS) in OWS-9. Both 
ATM-TGS and Harris collaborated on defining the technical specification of the DMS 
component, supported by other OWS-9 participants, primarily client developers such as 
Luciad. 

The resulting DMS specification as well as investigation results represent the consensus 
achieved between the relevant stakeholders within OWS-9. All results of the OWS-9 
work on Data Transmission (to Aircraft) Management are documented in this OGC 
Engineering Report (ER), which is open and publicly available. This allows everyone 
who is interested to review the results and to provide feedback, thus creating valuable 
input to improve the specification. This process – the ability to provide continuous 
feedback and to incorporate it in the specification - will ultimately lead to a DMS 
specification that is based on broad industry consensus. OWS-9 laid the foundation by 
creating the first version of the DMS specification. Future work on DMS will lead to 
further review of the DMS specification as well as new or updated requirements, and thus 
possibly revisions and extensions. 

That the results – and thus the DMS specification – are publicly available especially 
allows other component providers to implement DMS compliant products as well. 
Because the DMS specification defines a common service model to satisfy data 
transmission (to aircraft) requirements, both vendors and customers can rely upon that 
model to build interoperable systems. Vendors of service and/or client components that 
support DMS functionality have access to a bigger customer base. Customers that need 
DMS functionality have a wider range of products to choose from. All because there is a 
common and publicly available, open DMS specification that defines how DMS 
functionality can be realized. For customers, it is especially important to base the DMS 
products they buy on open specifications to prevent vendor lock-in. If the key DMS 
functionality is realized by multiple products, a customer can migrate or switch to a new 
product if necessary. For vendors, this provides an opportunity as well, allowing them to 
bundle added-value features and strong support with their DMS products. Finally, by 



OGC 12-163 

4  
 

using a common DMS specification to realize DMS functionality in distributed systems, 
this functionality will be realized in an interoperable way. 

The OGC Standards as well as Interoperability Programs provide a platform for 
discussion and development of technical specifications – such as the DMS – between 
interested stakeholders. Product providers can report and discuss their implementation 
experience and request clarifications as well as changes to be applied to the 
specifications. Also, new requirements can be brought in to ultimately enhance the 
specification baseline and eventually also compliant products. The OGC processes to 
manage and support this specification development have proven themselves in the 
development of specifications that are now international standards supported in many 
products and deployed in many application domains. This represents a profound way of 
maturing the DMS specification in the future. 

In fact, as OGC specifications such as the DMS are scrutinized through review and 
implementation by many stakeholders, the danger of not supporting specific technical 
requirements is minimized. This provides safety for vendors that implement compliant 
products. It does not require such products to be open source. It just means that these 
products comply with the open OGC standards/specifications. Speaking of compliance, 
the OGC also has a program to certify that a given product complies with an OGC 
specification: the Compliance and Interoperability Testing Initiative (CITE). This 
provides a way for product providers to prove that their products comply with given OGC 
specifications. It also provides a way for end users to more easily integrate the 
requirement for standards compliant products in procurements. As the DMS specification 
matures, compliance test scripts can be developed to include the DMS in the certification 
process. 

2 References 

The following documents are referenced in this document. For dated references, 
subsequent amendments to, or revisions of, any of these publications do not apply. For 
undated references, the latest edition of the normative document referred to applies. 

[OGC] OGC 06-121r3, OpenGIS® Web Services Common Standard 
OASIS Web Services Reliable Messaging (WS---­‐Reliable Messaging) Version1.2, 
http://docs.oasis---­‐open.org/ws---­‐rx/wsrm/200702 

ISO 19142: Geographic information Web Feature Service, 2010-04-26, OGC document 
#09-025r1,  
http://www.opengeospatial.org/standards/wfs 

X.891: Information technology -­‐ Generic applications of ASN.1: Fast infoset – 2007-01-
30 

W3C XML Information Set (second edition) 
http://www.w3.org/TR/xml---­‐infoset/ 



OGC 12-163 

 5 
 

[EE] J. Saltzer, D. Reed and D. Clark: “End-to-end arguments in system design”, ACM 
Trans. Comp. Sys., 2(4):277-88, Nov. 1984 

[OASIS-WSRM] Web Services Reliable Messaging (WS-ReliableMessaging), 
Committee Draft 04, August 11, 2006 

[IETF-MIPv6] D. Johnson, C. Perkins, J. Arkko: Mobility Support in IPv6, RFC 6275, 
June 2011 

[ICAO-ATNIPS] Aeronautical Telecommunication Network (ATN) - Manual for the 
ATN using IPS standards and protocols (Doc 9896), Draft Version 19, April 2011 

[IETF-SIP] J. Rosenberg et al.: SIP: Session Initiation Protocol, RFC 3261, June 2002 

[SANDESHA2] Sandesha2 User Guide, online at 
http://axis.apache.org/axis2/java/sandesha/userGuide.html 

[OGC 08-133] OpenGIS® Sensor Event Service Interface Specification (proposed) 

[OGC 11-097] OGC® OWS-8 AIXM 5.1 Compression Benchmarking 

 

In addition to this document, this report includes several XML Schema Document files as 
specified in Annex A. 

3 Conventions 

3.1 Abbreviated terms 

AIXM Aeronautical Information Exchange Model 

AOC Airline Operational Communication 
ATM Air Traffic Management 

COTS Commercial Off The Shelf 
D-NOTAM Digital NOTAM 

EFB Electronic Flight Bag 
FAA Federal Aviation Administration 

FI/FIS FastInfoSet 
GML Geography Markup Language 

GZIP GNU ZIP 
HTTP HyperText Transfer Protocol 

IP Internet Protocol 



OGC 12-163 

6  
 

ESA European Space Agency 
ISO International Standards Organization 

NOTAM Notice To Airmen 
QoS Quality of Service 

SESAR Single European Sky ATM Research program 
SOAP Simple Object Access Protocol 

SWIM System Wide Information Management 
TCP Transmission Control Protocol 

XML Extensible Markup Language 
 

 
 

4 Executive Summary 

The Data Transmission Management (DTM) work attempts to fulfill the high level 
requirements identified in the OGC OWS-9 RFQ Annex B, through which some aspects 
of the AAtS System Rules Model are taken into account. The overall focus of the DTM 
requirements is: 

 Reduce bandwidth required for transmission of messages between ground 
services and aircraft  

 Ensure no messages are lost during transmission to an aircraft 
 Provide data quality and provenance information to aircraft receiving data from 

ground services 
 Make dispatchers on the ground aware of the information sent to aircraft 

A significant effort was spent identifying the use cases of the DMS and devising the 
protocol required to integrate the DMS within the OGC web service architecture. An 
achievement of this investigation is the identification of use cases corresponding to the 
session parameter negotiation between aircraft client and the DMS, and use cases for 
request-response and publish-subscribe message exchange pattern (MEP). Another result 
is the selection of SOAP + HTTP as the underlying web service protocol for exchanges 
between aircraft client and DMS. One of the advantages of SOAP is that it supports the 
WS-ReliableMessaging standard for reliable communications (cf. Efficient 
Communications section below).  

The work results in detailed mechanisms for aircraft clients to exchange messages with 
ground OGC web services through the DMS using request-response and publish-
subscribe MEP. A so-called initial “pass-through” DMS has been implemented to 



OGC 12-163 

 7 
 

demonstrate the devised protocol. A set of DMS interfaces have been defined and 
provided to the clients as WSDL files, enabling the clients (both aircraft and dispatch) to 
use the DMS services. 

The RFQ requirements are specified and implemented as DMS “modules”, which can be 
integrated in a modular way to the pass-through DMS. The investigation results for the 
modules are summarized in the following. 

Efficient communications 

The RFQ specification of this module covers several aspects: 

 Handle breaks in communication 
 Handle IP address change of a client 
 Ensure data transmissions are not lost and data is delivered as intended  
 Determine the priority of data packets exchanged between client and DMS  
 Dispatcher synchronization with respect to the data sent from DMS to client 

(either a full copy, summary, or selected copy). These requirements are 
implemented as three different modules of the DMS  

o Reliable messaging module 
o Prioritization module 
o Dispatch module 

Despite the multitude of methods to ensure data transmission reliability across the 
communication protocol layers (e.g. forward error correction, reliable link layer, reliable 
transport layer/TCP), end-to-end reliability provision at the application layer has the 
promise of covering the most possible types of errors, including link, network, and 
software. This motivates the use of WS-Reliable Messaging (WS-RM), which resides 
towards the application layer of the OSI protocol model. A deeper investigation shows 
that WS-RM partially covers the DMS requirements, namely on handling lost or out-of-
order messages due to wireless link, temporary link or network failure without change of 
IP address, and (partially) software failure (depends on specific WS-RM 
implementation). Change of client IP address is not, considered as being within the scope 
of WS-RM solution. It would require support from the network infrastructure, as in the 
case of Mobile IP protocol family, or additional functionalities, as offered by register, 
redirect, and name servers in the Session Initiation Protocol (SIP) network architecture.  
The support of these functionalities within the AAtS or OGC OWS architecture is 
considered future work. 

Message prioritization within the OGC OWS framework can be achieved by adding 
priority information within the message header, which can be inspected by data link 
service provider to determine the delivery order over wireless link. Using SOAP as 
underlying web service protocol has the additional benefit that it is relatively simple to 
include additional information within the SOAP header. A simple XML prioritization 
schema is proposed as a result of this investigation. The prioritization mechanism 
proposed in OWS-9 is based on the “remaining validity”; a message that will expire 



OGC 12-163 

8  
 

sooner will get a higher priority. A prioritization mechanism based on the nature of the 
data could be set (for example, a runway closure would get a higher priority than a gate 
change). 

For dispatch synchronization, the DMS dispatch module is foreseen to leverage the OGC 
Event Service specification. Specifically, the DMS shall implement ES functionality, 
allowing dispatcher client to subscribe and receive notifications corresponding to specific 
aircraft client(s).  

Efficient data exchange 

The RFQ specification for this module tackles the following features: 

 The application of the appropriate compression algorithm to reduce bandwidth 
consumption 

 Investigate alternative protocols to exchange information for ground to air and air 
to ground communications between client and DMS 

 Perform sensitivity analysis on the proposed protocols 

Leveraging the compression study in OWS-8, it has been assessed that three compression 
algorithms are of interest for reducing bandwidth consumption when exchanging data 
between air and ground: Fast Infoset, Exificient and the classical Gzip. Each of those 
algorithms has advantages and disadvantages with regards to the metrics that can be 
considered (available resources, complexity, compression ratio …). A sensitivity analysis 
has been performed and reveals that from a general perspective, Fast Infoset presents 
most advantages, while EXI can provide more compression in certain cases (namely for 
small files) and GZip provides few complexity overall. 

A short study has been made to determine which protocols could be candidates to replace 
HTTP for information exchanges. The considered candidates are SMTP, FTP and 
AMQP. It has been shown in a sensitivity analysis that HTTP remains the most 
interesting protocol compared to other non-MOM (Message Oriented Middleware) 
protocol, but that if the architecture could be modified to be MOM-compliant, AMQP 
presents interesting perspectives, especially in terms of reliability and security. 

Data filtering 

The RFQ specification of this module defines several topics regarding filtering:   

 Data extraction  
 Data densification  
 Filtering capabilities based on various properties 

To tackle the extraction of data, two approaches are proposed in the ER. The first one is 
the use of XSLT, which will allow a simple filtering of the information based on a 
standardized mechanism using XPath as a filter description. The second one introduces 



OGC 12-163 

 9 
 

the concept of schema masks, where the client could define the subset of information it 
requires in the form of a schema. This raises the issue of dataset validity with regard to 
OGC standards, but brings enhanced control to the client regarding the amount of 
information it receives, therefore improving bandwidth management. 

Development of the densification feature was not possible because no protocol or existing 
mechanism appear to support this functionality as for today. Therefore the ER only 
provides potential guidelines on how to achieve the different densification operation 
possible, that is densification as a mean of concurrent values for a given property value, 
as a standard deviation or as a range of those values. The ER proposes guidelines on how 
to filter the information based on other given criteria, such as data providers and types of 
data. 

Data validation 

The RFQ specification defines three separate validation metrics for Timeliness: 

 Data is delivered within its valid timeframe  
 Data represents the most up-to-date information  
 Subscribed update intervals are being complied with   

To ensure data is delivered within its valid timeframe, the timestamp in a message is 
compared against the time in which the DMS receives the message to determine if the 
message is current.  Non-current messages are either dropped or flagged and forwarded to 
the client, depending on a client’s preferences.  In order to ensure that data is delivered 
within its valid timeframe, a pre-set latency tolerance limit is set by the client.  The 
latency is tracked by the DMS to determine if the data is delivered within the timeframe 
as configured by the client.  The DMS ensures interval in which messages are transmitted 
by subscription-based ground services are being complied with as defined by the client. 
Subscription interval compliance is determined by comparing the message reception 
interval of a subscription-based ground service (e.g. Event Service) versus a client-
requested message reception interval. 

A validation module is developed to implement the approaches listed above.  Before 
transmission, the module ensures that data being sent to an aircraft client is current.  The 
module tracks the message transmission to ensure it is delivered in a timely manner.  The 
validation module has the ability to drop data that is not within a valid timeframe before 
they are sent to an aircraft client.   

Three validation metrics are defined: 

 The percentage of invalid messages received  
 The number of messages exceeding the client’s latency tolerance 
 The number of messages received that are not compliant with the message 

subscription interval 



OGC 12-163 

10  
 

The aircraft client creates a “validation profile” during the initiation of a connection to 
the DMS, which stores the client’s validation settings.  Only messages with known 
formats (e.g. AIXM) can be evaluated by the Validation Module.  Messages using 
formats unknown by the DMS cannot be validated. 

Data provenance  

The RFQ specification of this module defines four separate requirements: 

 Create and attach metadata describing the authoritativeness of a data source to 
messages sent to an aircraft client 

 Track the provenance of the messages being forwarded to the aircraft client  
 Provide a mechanism for recording provenance data 
 Allow an operator to configure what type or class of information will have 

provenance metadata associated with it  

Data Provenance is used by aircraft clients in determining the source and alterations of 
received messages.  Source metadata is generated by the message source, and alteration 
metadata is generated by processing services (i.e. DMS).  The source and alteration 
metadata is inserted into the SOAP header of messages before transmission.  The creation 
and format of provenance metadata used by the DMS is defined by ISO standard 
19115/19139.  During initial connection to the DMS, an aircraft client will configure the 
DMS Provenance module.  A client can configure if provenance metadata shall be 
included in messages to control transmission efficiency. 

The approach to provenance tracking begins with the insertion of message source 
metadata into the SOAP message header by the message creator.  Source metadata is 
used by the aircraft client to determine the authoritativeness of the data source.  The DMS 
will propagate provenance as received from an OGC web service.  For messages received 
without source metadata, the DMS will insert LI_Source “unknown” into the message 
header.  For message content altered by the DMS (i.e. filtering), LI_ProcessStep metadata 
is generated and inserted into the SOAP message header.  Process metadata is used to 
track the provenance of messages being forwarded to an aircraft client.  

 

 

 



OGC 12-163 

 11 
 

5 DMS Demonstration 

The complete functionality of the DMS is showing in two separate demonstrations (the  
Aviation Thread demonstration and the DMS mini demonstration) recorded by the OWS-
9 Aviation Thread in video format.  The Aviation Thread demonstration highlights the 
capabilities and interactions of the systems developed by the OWS-9 Aviation  
Thread participants. How the DMS interacts with client and ground messaging services is 
highlighted by the Aviation Thread demonstration. Specifically, the DMS capabilities of 
reliable and efficient communications, message content filtering, generation of data 
provenance, and dispatch services.  The DMS mini demonstration focuses on the viewing 
of complete DMS functionality, including features that are not covered in the Aviation 
Thread demonstration such as validation, compression, and prioritization.  Links to the 
locations of these demonstrations are listed below. 

5.1 Aviation Thread Demonstration 

[Link to Aviation Thread Demonstration video to be inserted] 

5.2 DMS Mini Demonstration 

[Link to DMS Mini Demonstration video to be inserted] 



OGC 12-163 

12  
 

6 DMS Use Cases 

The DMS Use Cases are depicted in the following figure: 

 

Figure 1 – DMS System level diagram 

System

Client
OGC Web Service

Session creation

Request-response

Subscription

Notifications

Dispatcher

Upload baseline information

Data copy / summary update



OGC 12-163 

 13 
 

6.1 Use Case #1: Session negotiation 

Table 1 - Use case #1 – Session Negotiation 

Use Case Identifier: DMS #1 Use Case Name: DMS Session negotiation 

Use Case Description: Client performs a handshaking protocol with DMS to select 
reliable messaging option, compression algorithm to use, and configuration options for 
data validation and filtering. 

Actors (Initiators):  

Client 

Actors (Receivers):  

DMS 

Pre-conditions: 

1. Client has the knowledge of the DMS 

2. Client wants to access OGC Web 
Services through DMS 

3. DMS communication configuration 
parameters in the Client are not set. 

Post-conditions: 

A DMS-Client session is established both 
at the Client and DMS side, with the 
negotiated parameters set. 

The DMS stores the session parameters as 
configuration data that can potentially be 
retrieved by third party (e.g. dispatch). 

Basic course of action: 

1. Client contacts the DMS using a Hello message, containing the unique client ID1 (the 
consumer reference at the client) and a request for the listing of the available 
modules at the DMS. 

2. DMS responds to the Client’s message, listing the data management modules 
available at the DMS. 

3. Client confirms to the DMS the modules that are to be activated in future exchange. 

4. The DMS automatically creates a unique consumer reference for the client. 

 

Note: For completeness, there should also be a use case for session termination. This 
could not be implemented in OWS-9 due to limited resources, but could be an interesting 
add-on for future work. This could be done by adding a terminateSession operation at the 
DMS or by setting a timer for session keep alive. 

                                                

1 The assumption here is that the client is uniquely identified. This assumption was needed to define the DMS 
workflow, e.g. data copy/summary, sending notifications arriving at the DMS back to the client. This has been agreed 
between the DMS partners but does not stand as an absolute requirement and could be extended in future work. 



OGC 12-163 

14  
 

This use case allows the Client to agree with the DMS on the DMS functionalities to be 
used in the communications between the DMS and the Client, which include: 

 Communication efficiency (reliable messaging, prioritization …) 

 Communication options (compression, data link selection …) 

 Filtering options 

 Validation specification 

 Provenance 

 Metadata Provision 



OGC 12-163 

 15 
 

6.2 Use Case #2: Request-response 

Table 2 - Use case #2 – Request - Response 

Use Case Identifier: DMS #2 Use Case Name: Client information request 

Use Case Description: Client requests information from OGC Web Service through 
DMS. 

Actors (Initiators):  

Client 

Actors (Receivers):  

DMS 

OGC Web Service (OWS) supporting 
request-response (e.g. WFS) 

Pre-conditions: 

1. Client has initiated session with DMS 

2. Client is interested in some features 
related to its flight. 

Post-conditions: 

Client received the features it requested. 

Basic course of action: 

1. Client sends a request message to the DMS, containing the actual request, and the 
endpoint of the OWS. 

2. (Optional) The request is compressed by the client. 

3. DMS extracts the OWS endpoint information and the actual request from the 
message received from the client, and constructs a new request message to the 
OWS based on this information. 

4. DMS sends the request to the OWS and waits for a response. 

5. Once the response is received, the DMS parses the message content and, as 
previously agreed with the client, performs validation, filtering, and prioritization 
based on it. 

6. DMS performs compression on the response as previously agreed with the client. 

7. DMS sends the processed data to the client. 

8. (Optional) If a dispatcher has subscribed to the client’s data stream, the DMS 
sends either a data copy or a data summary to the dispatcher, as defined by the 
session parameters. 

 



OGC 12-163 

16  
 

This use case covers the interaction between the Client, DMS, and the OGC Web Service 
using Request-Response message exchange pattern. 

6.3 Use Case #3: Publish-subscribe 

Table 3 - Use case #3-1 - Subscription 

Use Case Identifier: DMS #3-
1 

Use Case Name: Subscription request 

Use Case Description: Client registers to receive notifications from Event Service 
through DMS. 

Actors (Initiators):  

Subscriber 

Actors (Receivers): 

DMS 

Event Service 

Pre-conditions: 

A DMS session has been established for a 
client. 

The subscriber requires the client to be 
updated with particular features for its 
flight. 

The subscriber knows the consumer 
reference attributed by the DMS to the 
client session. 

Post-conditions: 

A subscription is registered for the receiver 
at the Event Service. 

Basic course of action: 

1.  (Option 1 – Subscription without Update Intervals) Subscriber sends a 
subscription request message to the ES, containing the consumer reference of the 
receiver. 

2. (Option 2 – Subscription with Update Intervals)Subscriber sends a subscription 
request message to the DMS, containing the actual subscription intended for the 
ES, the URL of the ES and the consumer reference of the receiver. (this is needed 
in the case where update intervals (UIs) need to be checked by the DMS. The UIs 
are defined by the subscriber but the information must be known by the DMS). 
In that case, the DMS extract the Subscription ID from the subscription response 
and maps it to the client for further UIs check. 

 



OGC 12-163 

 17 
 

Table 4 - Use case #3-2 - Notification 

Use Case Identifier: DMS #3-
2 

Use Case Name: Web service notifications 

Use Case Description: Client receives notifications from Event Service through DMS. 

Actors (Initiators):  

Event Service 

Actors (Receivers):  

DMS 

Client 

Pre-conditions: 

1. Client has subscribed or has been 
subscribed to an Event Service. 

2.  

Post-conditions: 

Client receives a notification message 
corresponding to its subscription. 

Basic course of action: 

1. Event Service receives data or data update that matches the subscription profile of 
a client, and sends a notification to the corresponding endpoint at DMS (e.g. 
www.dms.org/client1). 

2. Based on the endpoint (consumer reference) on which the notification has been 
received, the DMS identifies the receiver for the notification. 

3. (Optional) If the client has made a subscription with specified Update Intervals, 
the DMS extracts the Subscription ID from the message, infers the Update 
interval subscribed to and determinates compliancy with it.  

4. The DMS parses the message content and, as previously agreed with the client, 
performs validation, filtering, and prioritization based on it. 

5. DMS performs compression on the response as previously agreed with the client. 

6. DMS forwards the (potentially processed) notification to the client.  

7. (Optional) If a dispatcher has subscribed to the client’s data stream, the DMS 
sends either a data copy or a data summary to the dispatcher, as defined by the 
session parameters. 

 

These use cases cover the interaction between the Client, DMS, and the Event Service 
using Publish-Subscribe pattern. 



OGC 12-163 

18  
 

6.4 Use Case #4: Dispatcher use cases 

Table 5 - Use case #4 - Dispatch 

Use Case Identifier: DMS #4 Use Case Name: Dispatcher subscription to client 

Use Case Description: Dispatcher subscribes to a client data stream through the DMS. 

Actors (Initiators):  

Dispatcher 

Actors (Receivers):  

DMS 

Pre-conditions: 

The DMS knows the unique identification 
of the client. 

Post-conditions: 

Dispatcher receives information of a client 
or a summary of it. 

Basic course of action: 

1. Dispatcher sends a subscription request to the DMS, containing the identification 
of the client it wants to subscribe to, optional filtering options (based on class/type 
of message), and the Dispatch consumer reference where it wants to receive data 
copy/summary. 

2. DMS extracts the client ID from the request and look for the corresponding client. 

3. DMS sends to the unique consumer reference endpoint (at the DMS) 
corresponding to the particular client to the dispatcher. 

4. DMS memorizes that a data copy or data summary is associated with the 
corresponding client. 

 

7 DMS Communication Model 

The DMS will in general be required to have a generic functionality, namely that it is 
able to work not only with OGC services, but also other web services such as FAA or 
SESAR SWIM. The DMS specification documented in this report supports 
communication (request-response and publish-subscribe based) between an aircraft client 
and services on the ground via data link. However, within OWS-9, it is foreseen that the 
focus will be on facilitating the communication between an aircraft client and OGC-
compliant web services on the ground, namely a Web Feature Service and an Event 
Service. Specifically, it will be demonstrated that an actively participating client (in terms 
of performing information request and subscription) will be able to obtain information 
from OGC web services on the ground network through the DMS. However as the DMS 
supports request-response based service interactions, in general it should also be able to 



OGC 12-163 

 19 
 

enable communication with WPS, Registry and WCS. The only constraint is that for 
OWS-9 binary content is not supported, thus interaction with FPS or the ePIB WPS is not 
foreseen. This could be considered as future work in DMS development. The added-
values provided by the DMS in such case include: 

 Efficient data transmission over wireless link through compression, 

 Reliable communication through the use of reliable messaging, 

 Additional/more tailored filtering and validation, in addition to what has been 
provided by the ground web services. 

 Continuous performance, quality and provenance control and maintenance 

 

 

Figure 2 - Service Negotiation 

Client DMS

1 : getSessionOptions()

2 : getSessionOptionsResponse(Module)

3 : createSession(endpoint, Module)

4 : createSessionResponse



OGC 12-163 

20  
 

 

Figure 3 - Request Reply 

 

Client DMS OWS Dispatcher

1 : clientRequest(endpoint, serviceURL, request)

2 : Request()

3 : Response

4 : validate(response)

5 : filter(response)

6 : prioritize(response)

7 : provenance(response)

8 : clientRequestResponse(response)

9 : createDispatchMessage()

10 : CDispatchNotify(Notification)



OGC 12-163 

 21 
 

 

Figure 4 – Subscription request 

Client DMS ES

1 : clientSubscribeRequest(serviceURL, request)

2 : replaceConsumerReference(request)

3 : SubRequest(request)

4 : SubResponse(response)

5 : clientSubscribeRequestResponse(response)



OGC 12-163 

22  
 

 

Figure 5 - Notification 

7.1 Detailed protocol 

Inserting the DMS may require some changes in the roles within the OGC Web Services 
architecture. It is understood, however, that the changes in the client and web services 
functionalities shall be kept to a minimum. The approach we propose is to make the DMS 
available as a web service, and add a module at the client side in order to be able to use 
the services provided by the DMS. 

OGC web services standards support different binding possibilities, including SOAP + 
HTTP, HTTP POST + plain XML, and KVP. At this stage, using SOAP + HTTP at the 

Client DMS ES Dispatcher

1 : Notify(Notification)

2 : validate(Notification)

3 : filter(Notification)

4 : prioritize(Notification)

5 : provenance(Notification)

6 : CDMSNotify(Notification)

7 : createDispatchMessage()

8 : CDispatchNotify(Notification)



OGC 12-163 

 23 
 

Client-DMS side seems to be advantageous as it provides the flexibility of adding new 
metadata for the DMS functions, namely within the SOAP header, and also permits the 
use of WS-* standards, especially WS-ReliableMessaging which addresses one of the 
DMS requirements. 

The detailed Client-DMS communication mechanisms are outlined in the following, for 
request-response and publish-subscribe exchange patterns respectively.  

 Request-response model (here we assume that HTTP+XML binding is provided 
by the OWS):  

o The Client forms an XML request addressed to the OWS..  

o The Client then calls the service provided by the DMS, giving the OWS 
URL and the request as arguments. Since SOAP binding is provided by 
DMS on the Client side, these arguments will constitute the SOAP body of 
the SOAP envelope sent by the Client to DMS. 

o Upon receipt of the request, the DMS web service obtains the XML 
request and forms a new request towards the provided OWS URL. It then 
waits for the response from the OWS. 

o DMS performs validation, filtering, and prioritization to the response it 
receives from the OWS. 

o The DMS then forms a response to the Client’s request, including the 
OWS response in the SOAP body. 

o The process is completed when the Client finished reading response 
message. 

 Publish-subscribe model: 

o The Client forms a SOAP message for subscription request addressed to 
the ES. The request will contain ConsumerReference field to indicate the 
client EPR..  

o The Client then encapsulates the original request into another SOAP 
envelope, with the original ES URL and the complete SOAP request 
included in the SOAP body. 

o Upon receipt of the request, the DMS web service reads the message and 
forms a new request towards the ES, replacing the ConsumerReference in 
the original request with a new EPR, formed by of DMS EPR and client 
identifier. The DMS shall also read specific parameters of the request, e.g. 
update interval information, for the purpose of performing validation to 
the notifications. It then waits for the response from the ES. 



OGC 12-163 

24  
 

o DMS then forms a response to the Client’s request, including the ES 
subscription response in the SOAP body. 

o The process is completed when the Client finished reading the response 
message. 

o Notifications from the ES will contain the client ID in the wsa:To field, as 
it corresponds to the ConsumerReference  field sent by the DMS during 
subscription request. Every time DMS receives a notification, it shall 
obtain the ID and use it to route the notification message to the proper 
client, after performing validation, filtering, and prioritization to the 
notification. 

The validation, filtering, and prioritization steps will be implemented in a modular way 
after the first baseline implementation of the DMS, which includes only the forwarding of 
requests, responses, and notifications between client and the ground web services.  

7.2 Required extensions to OGC Web Services Architecture 

To enable the proposed client-DMS communications, a “Client DMS Component” is 
required at the client side, which is basically a SOAP-based web service client 
component that knows the services available at the DMS (e.g., DMS service discovery, 
forward request, etc.), and at the same time provides a web service to receive 
notifications. In addition, the interface between the “original” application and the DMS 
module component needs to be defined.  

7.3 Lessons learned 

During the test phase of the Data Transmission Management protocol, a main issue has 
been raised from client side. Indeed, the DMS is expecting SOAP for everything it 
receives. The SOAP header is used to define (through WS-addressing) the intended 
destination of the information being managed/transmitted through the DMS. The useful 
information (e.g. the request intended to WFS or ES) is incorporated in the SOAP body 
of this request, as explained above. However, given that different web services can 
require different bindings – including SOAP – it is possible that at some point, the client 
is requested to send the SOAP message intended for the web service within a SOAP 
envelope, one being used by the DMS and the included one by the web service. 

The client then find itself in a situation in which it has to create a message that has SOAP 
within SOAP, which appeared to be problematic for automatic request creators used by 
some clients. 

The purpose of using SOAP for client-DMS interactions was that it provides the ability to 
abstract from the underlying data link protocol. In order to be independent of a specific 
protocol, the OWS-9 DMS design includes SOAP based communication. Additionally, 



OGC 12-163 

 25 
 

SOAP allowed the easy coverage of reliable communication through WS-Reliable 
Messaging. 

The DMS is all about facilitating and managing the communication between the aircraft 
client and the ground services (Aircraft Access to SWIM). Various requirements listed in 
the OWS-9 RFQ Annex B influenced the DMS design. Reliable communication in case 
of a connection loss is but one of them. A data link protocol may already support 
reliability, but may also not. The current design supports both cases. This could in the 
future also be an option to switch on or off, depending on the actual data links used in a 
DMS session. 

The OWS-9 requirements for DMS have some specific pieces of functionality in mind, 
not only reliable messaging or generic filtering but also validation, prioritization and 
means to attach arbitrary header / metadata fields to messages, in which case the use of 
SOAP appears as the best common option. 

The possibility to distribute the responsibilities to the different existing entities instead of 
grouping them in a new element (DMS) has been evoked, yet from what have been 
assessed, those options may not be all available from one web service to another, making 
the job of the client quite more difficult and implementation dependent. 

The DMS proposes a first approach of what could be the requirements of a new in-the-
middle entity that would undertake responsibility for optimal and customized data 
transmission. However those requirements need to be revised at the light of the OWS-9 
testbed, taking into account difficulties and awkwardness that come together with a first 
set of requirements. 

Another minor point that raised questions was the identification of the client, from the 
DMS, but also from other entities (like dispatch) perspective. The design adopted in 
OWS-9 was that the client endpoint would be used for identification. It may seem 
awkward in the case where the client is only request-reply enabled, thus not expected to 
subscribe and be notified by event services, and therefore not defining an endpoint at all. 

This design choice was made in order not to add an additional identification pattern to 
complicate existing process, and to use potentially already existing URL (the client 
consumer reference) as its identification. This choice is questionable and may be revoked, 
but it appeared to the design team that using what is already there may limit the 
complexity of the DMS integration in the overall architecture. 

8 OWS-9 High Level Requirements 

According to the OWS-9 RFQ Annex B, the following high level requirements have been 
identified: 

 Investigate, develop, demonstrate, and document a recommended approach for 
efficiently managing communications between clients and information 
management services via wireless data link 



OGC 12-163 

26  
 

 Investigate, develop, demonstrate, and document a recommended approach for 
improving the efficiency of data exchanges in an air-to-ground data link via DMS. 

 Develop, test, and document DMS functionality for filtering information sent to 
the client.  This involves extracting relevant information (essentially performing a 
projection) and performing densification (example: computing trends, average 
value, standard deviation value, range of values) on data/responses before they are 
actually sent to the client.  The solution shall expand or develop user configurable 
filtering parameters as described in the Systems Rules Model 

 Develop, test, and document DMS functionality for validating information 
exchanged between the DMS and the client.  The solution shall expand or develop 
data validation functionality as described in the Systems Rules Model 

 Investigate, test, demonstrate, and document the inclusion of arbitrary 
header/metadata fields in messages exchanged between DMS and 
client/dispatcher.  These fields shall be used to store information including, but 
not limited to, in support of functionality to realize data synchronization, 
validation, filtering, prioritization, security, authoritativeness, and data link SLA 
provisioning functionality 

 Investigate, develop, demonstrate, and document a recommended approach for 
using metadata at DMS to keep track of quality and provenance information 

 The solution should be based on open standards 

 The solution as well as identified alternatives shall maintain the interoperability 
between clients and information management services 

9 Efficient Communications 

According to the OWS-9 RFQ Annex B, the DMS shall: 

 Handle breaks in communication 

 Ensure data transmissions are not lost and data is delivered as intended 

 Determine the priority of data packets exchanged between client and DMS so that 
data transmissions are optimized.  

 Send copies of data retrieved by the client to the dispatcher (full copy) 

 Support delivery of data summary of the client to the dispatcher (summary) 



OGC 12-163 

 27 
 

9.1 Scope of Work 

The following scope of work describes the interpretation of the requirements into 
development components. 

9.1.1 Reliable Messaging 

Reliable Messaging is a base feature of the DMS. The purpose of the Reliable Messaging 
feature is to ensure that messages sent to and from the aircraft client are delivered in full, 
in the presence of software component, system, or network failures. If a message fails to 
be delivered for any reason, the DMS must understand that the client has not received the 
message. The DMS must take action to reattempt delivery of the undelivered message to 
the client (aircraft). Part of the DMS Reliable Messaging feature is the ability of the DMS 
to handle breaks in communication to the client (aircraft). Breaks in communication will 
occur when an aircraft client switches between communication networks or loses 
connectivity to a communication network for any other reason. The DMS must have the 
ability to communicate with the aircraft client through all accepted communication 
networks. Any data that is lost while being transmitted to the aircraft client due to the 
aircraft client switching between data networks must be understood by the DMS as not 
been received by the client. The DMS must attempt retransmission of the data to the 
aircraft client after connection is re-established to ensure reception of the data by the 
client (aircraft). This also applies in the aircraft to DMS direction, where the Client DMS 
Component needs to make sure that DMS receives all sent messages, irrespective of any 
failures. 

 The Reliable Messaging feature must be able to determine whether or not an 
aircraft client has received the message that has been sent to the client (aircraft). 

 The Reliable Messaging feature must attempt to retransmit any data that was sent 
to the aircraft client but not received by the client (aircraft).  

9.1.2 Dispatch Module 

The Dispatch Module is a service module of the DMS. The Dispatch Module purpose is 
to allow a non-aircraft client (known in this document as “client (dispatch)”) to receive a 
full or abbreviated copy of the messages the aircraft client receives. The dispatch client 
has the option of requesting an abbreviation of the messages received by the client from 
the DMS. The purpose of having the dispatch client request abbreviated messages t, 
instead of automatically sending the dispatch client the full message, is to conserve 
network resources 

 The Dispatch Module must send the dispatch client messages containing the type 
of data or the whole message received by the aircraft client after the aircraft client 
has confirmed the reception of the message. 



OGC 12-163 

28  
 

9.2 Recommended Approach 

Despite the multitude of methods to ensure data transmission reliability across the 
communication protocol layers (e.g. forward error correction, reliable link layer, reliable 
transport layer / TCP), end-to-end reliability provision at the highest layer has the 
promise of covering the most possible types of errors, including link, network, and 
software (cf. the “End-to-end Argument” [EE]). This motivates the use of WS-Reliable 
Messaging, which resides at the application layer of the layered communication protocol 
model. 

9.2.1 Web Services Reliable Messaging architecture 

Web Services Reliable Messaging (WS-ReliableMessaging) is a specification that allows 
two systems to send messages between each other reliably. The aim of this is to ensure 
that messages are transferred properly from the sender to the receiver. WS-
ReliableMessaging provides a standard wire-protocol with no API or programming 
model of its own. Instead it composes with existing SOAP-based systems.  

WS-ReliableMessaging model defines “agents” that reside inside the RM entities’ SOAP 
processing engines, and transfer messages, handle retry and do delivery. These agents 
aren’t necessarily visible at the application level, they simply ensure that the messages 
get retransmitted if lost or undelivered.  

In WS-ReliableMessaging there are logically two of these agents – the RM Source 
(RMS) and the RM Destination (RMD). They may be implemented by one or more 
handlers in any given SOAP stack.  

The tasks of RMS are: 

- Requests creation and termination of the reliability contract 

- Adds reliability headers into messages 

- Resends messages if necessary 

The tasks of RMD are: 

- Responds to requests to create and terminate reliability contract 

- Accepts and acknowledges messages 

- (Optionally) drops duplicate messages 

- (Optionally) holds back out-of-order messages until missing messages arrive 

In a two-way reliable scenario there will be an RMS and an RMD on each side of the 
communication. 



OGC 12-163 

 29 
 

9.2.2 Wire protocol elements 

The main concept in WS-ReliableMessaging is that of a Sequence. A sequence can be 
thought of as the "reliability contract" under which the RMS and RMD agree to reliably 
transfer messages from the sender to the receiver. Each sequence has a lifetime, which 
could range from being very short (create a sequence, deliver a few messages, and 
terminate) to very long. The standard allows a maximum of 2^63 messages in a sequence.  

The DMS will use OASIS WS-ReliableMessaging to guarantee reliable communications 
between the client and DMS. WS-ReliableMessaging version 1.1 is considered as a 
baseline, as it is the latest version implemented by the open source Apache Sandesha2 
WS-ReliableMessaging implementation. However it is only considered solely for the 
purpose of implementation and tests within OWS-9, and is not a hard requirement for a 
generic DMS implementation. 

Some operations defined by WS-ReliableMessaging are depicted in Table 6 (not a 
comprehensive list). 

Table 6 – WS-ReliableMessaging basic operations 

WS-ReliableMessaging 
operation 

Description 

CreateSequence Request the creation of a Sequence 

CloseSequence Close the Sequence without discarding the Sequence state 
at the RMD, and prohibit the RMD to accept new 
messages from the RMS. 

TerminateSequence Indicate that the Sequence is complete and that the RMS 
will not be sending any further messages related to the 
Sequence. 

 

Some message examples below are extracted from [OASIS-WSRM]. As an example 
message exchange, the sender has three messages to send, and message 2 is lost in transit 
for one or other reasons (e.g. wireless link error, software fault, etc.). 

Create Sequence 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:MessageID> 
   http://Business456.com/guid/0baaf88d-483b-4ecf-a6d8-a7c2eb546817 
  </wsa:MessageID> 
  <wsa:To>http://example.com/serviceB/123</wsa:To> 



OGC 12-163 

30  
 

   <wsa:Action>http://docs.oasis-open.org/wsrx/-
wsrm/200608/CreateSequence</wsa:Action> 
  <wsa:ReplyTo> 
   <wsa:Address>http://Business456.com/serviceA/789</wsa:Address> 
  </wsa:ReplyTo> 
 </S:Header> 
 <S:Body> 
  <wsrm:CreateSequence> 
   <wsrm:AcksTo> 
    <wsa:Address>http://Business456.com/serviceA/789</wsa:Address> 
   </wsrm:AcksTo> 
  </wsrm:CreateSequence> 
 </S:Body> 
</S:Envelope> 

 

Create Sequence Response 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:To>http://Business456.com/serviceA/789</wsa:To> 
  <wsa:RelatesTo> 
   http://Business456.com/guid/0baaf88d-483b-4ecf-a6d8a7c2eb546817 
  </wsa:RelatesTo> 
  <wsa:Action> 
   http://docs.oasis-open.org/ws-rx/wsrm/200608/CreateSequenceResponse 
  </wsa:Action> 
 </S:Header> 
 <S:Body> 
  <wsrm:CreateSequenceResponse> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
  </wsrm:CreateSequenceResponse> 
 </S:Body> 
</S:Envelope> 

 

After the sequence creation exchange, the messages are sent as the following example: 

Message 1 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:MessageID> 
   http://Business456.com/guid/71e0654e-5ce8-477b-bb9d-34f05cfcbc9e 
  </wsa:MessageID> 
  <wsa:To>http://example.com/serviceB/123</wsa:To> 
  <wsa:From> 
   <wsa:Address>http://Business456.com/serviceA/789</wsa:Address> 
  </wsa:From> 
  <wsa:Action>http://example.com/serviceB/123/request</wsa:Action> 



OGC 12-163 

 31 
 

  <wsrm:Sequence> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
   <wsrm:MessageNumber>1</wsrm:MessageNumber> 
  </wsrm:Sequence> 
 </S:Header> 
 <S:Body> 
  <!-- Some Application Data --> 
 </S:Body> 
</S:Envelope> 

 

Message 2 and Message 3 follow the same pattern with the value of 
wsrm:MessageNumber field incremented.  

Message number 2 has not been received by the RMD due to some transmission error, so 
it responds with an Acknowledgement for messages 1 and 3: 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:MessageID> 
   http://example.com/guid/0baaf88d-483b-4ecf-a6d8-a7c2eb546810 
  </wsa:MessageID> 
  <wsa:To>http://Business456.com/serviceA/789</wsa:To> 
  <wsa:From> 
   <wsa:Address>http://example.com/serviceB/123</wsa:Address> 
  </wsa:From> 
  <wsa:Action> 
   http://docs.oasis-open.org/ws-rx/wsrm/200608/SequenceAcknowledgement 
  </wsa:Action> 
  <wsrm:SequenceAcknowledgement> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
   <wsrm:AcknowledgementRange Upper="1" Lower="1"/> 
   <wsrm:AcknowledgementRange Upper="3" Lower="3"/> 
  </wsrm:SequenceAcknowledgement> 
 </S:Header> 
 <S:Body/> 
</S:Envelope> 

 

The RMS discovers that message number 2 was not accepted, so it resends the message 
and requests and Acknowledgement: 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:MessageID> 
   http://Business456.com/guid/daa7d0b2-c8e0-476e-a9a4-d164154e38de 
  </wsa:MessageID> 
  <wsa:To>http://example.com/serviceB/123</wsa:To> 
  <wsa:From> 
   <wsa:Address>http://Business456.com/serviceA/789</wsa:Address> 



OGC 12-163 

32  
 

  </wsa:From> 
  <wsa:Action>http://example.com/serviceB/123/request</wsa:Action> 
  <wsrm:Sequence> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
   <wsrm:MessageNumber>2</wsrm:MessageNumber> 
  </wsrm:Sequence> 
  <wsrm:AckRequested> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
  </wsrm:AckRequested> 
  </S:Header> 
 <S:Body> 
  <!-- Some Application Data --> 
 </S:Body> 
</S:Envelope> 

 

The RMD now responds with an Acknowledgement for the complete Sequence which 
can then be terminated: 

Acknowledgement 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:MessageID> 
   http://example.com/guid/0baaf88d-483b-4ecf-a6d8-a7c2eb546811 
  </wsa:MessageID> 
  <wsa:To>http://Business456.com/serviceA/789</wsa:To> 
  <wsa:From> 
   <wsa:Address>http://example.com/serviceB/123</wsa:Address> 
  </wsa:From> 
  <wsa:Action> 
   http://docs.oasis-open.org/ws-rx/wsrm/200608/SequenceAcknowledgement 
  </wsa:Action> 
  <wsrm:SequenceAcknowledgement> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
   <wsrm:AcknowledgementRange Upper="3" Lower="1"/> 
  </wsrm:SequenceAcknowledgement> 
 </S:Header> 
 <S:Body/> 
</S:Envelope> 

 

Terminate Sequence 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:MessageID> 
   http://Business456.com/guid/0baaf88d-483b-4ecf-a6d8-a7c2eb546812 
  </wsa:MessageID> 



OGC 12-163 

 33 
 

  <wsa:To>http://example.com/serviceB/123</wsa:To> 
  <wsa:Action> 
   http://docs.oasis-open.org/ws-rx/wsrm/200608/TerminateSequence 
  </wsa:Action> 
  <wsa:From> 
   <wsa:Address>http://Business456.com/serviceA/789</wsa:Address> 
  </wsa:From> 
 </S:Header> 
 <S:Body> 
  <wsrm:TerminateSequence> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
  </wsrm:TerminateSequence> 
 </S:Body> 
</S:Envelope> 

 

Terminate Sequence Response 

<?xml version="1.0" encoding="UTF-8"?> 
<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" 
xmlns:wsrm="http://docs.oasis-open.org/ws-rx/wsrm/200608" 
xmlns:wsa="http://www.w3.org/2005/08/addressing"> 
 <S:Header> 
  <wsa:MessageID> 
   http://Business456.com/guid/0baaf88d-483b-4ecfnegotiation-a6d8-
a7c2eb546813 
  </wsa:MessageID> 
  <wsa:To>http://example.com/serviceA/789</wsa:To> 
  <wsa:Action> 
   http://docs.oasis-open.org/ws-
rx/wsrm/200608/TerminateSequenceResponse 
  </wsa:Action> 
  <wsa:RelatesTo> 
   http://Business456.com/guid/0baaf88d-483b-4ecf-a6d8-a7c2eb546812 
  </wsa:RelatesTo> 
  <wsa:From> 
   <wsa:Address>http://Business456.com/serviceA/789</wsa:Address> 
  </wsa:From> 
 </S:Header> 
 <S:Body> 
  <wsrm:TerminateSequenceResponse> 
   <wsrm:Identifier>http://Business456.com/RM/ABC</wsrm:Identifier> 
  </wsrm:TerminateSequenceResponse> 
 </S:Body> 
</S:Envelope> 

 

9.2.3 Requirements coverage 

9.2.3.1 Lost or out-of-order messages due to wireless link 

This situation is naturally handled by means of MessageNumber and Identifier fields 
added to every message, and acknowledgements asked by a RMD for every message that 
is not received. At this level, similar reliability guarantee is already provided by TCP as 
the underlying transport layer protocol of HTTP. In such case WS-ReliableMessaging is 
indeed somewhat redundant. 



OGC 12-163 

34  
 

9.2.3.2 Network failure and IP address change 

Temporary network failure without change of IP address 

Similarly to wireless link failure, temporary network outage, where no changes in IP 
addresses or any of the EPRs, is handled naturally by the MessageNumber and 
acknowledgement/retransmission mechanism of WS-ReliableMessaging. In the event of 
multiple retransmission failures, the DMS shall use WS-ReliableMessaging fault 
mechanism to notify the event to some external entities, for example to the dispatcher, 
which can be configured during Client-DMS configuration exchange, or using 
wsa:FaultTo inside the WS-ReliableMessaging CreateSequence message. A maximum 
number of retransmissions shall be configured at the DMS. WS-ReliableMessaging with 
SOAP 1.2 binding provides only a limited set of possible fault events, in which maximum 
retransmission is not available as an option, and there is no mechanism to add custom 
error events. One possible solution might be to consider “unsuccessful transmission after 
maximum number of retries reached” event as WS-ReliableMessaging 
SequenceTerminated fault. 

Network failure with IP address change 

In IP networking setting, IP address serves both as a network node identifier (for the 
purpose of routing), and as an identifier used by upper layer applications (e.g. IP address 
is one component of a TCP/UDP “socket”). The design of IP networking forces a node to 
change its IP address whenever it changes its point of connectivity, which consequently 
breaks existing application layer sessions that use the IP address. Mobile IP protocol 
family [IETF-MIPv6] is designed to alleviate this issue, by providing a static address, the 
so called Home Address, separate from the dynamic Care-of Address, which depends on 
the access network, and devising a signaling mechanism to constantly map the Home and 
the Care-of addresses at an anchor entity called the Home Agent. 

Within the aviation community, the use of IPv6 is being considered as the future 
underlying protocol of future air traffic management (ATM) network, with Mobile IPv6 
as the basis for providing network layer mobility [ICAO-ATNIPS]. If this solution were 
in place, changing client’s IP address would not pose any issues to the applications, and 
no further specifications would be required for the communications between client and 
DMS.  

When the client’s IP address changes, there are two scenarios that need to be considered 
depending on the topological location of the DMS. The first case is if the DMS is the next 
hop from the client, i.e. it is the wireless access point / base station, cf. Figure 6. In such 
case the followings are most likely the case: 

- client’s change of network access point implies change of the serving DMS, 

- Client’s IP address is allocated by the DMS or by a router that is topologically 
close and under the same authoritative control as the DMS. 



OGC 12-163 

 35 
 

 

Figure 6 - Topologically-close DMS 

In both cases, the client’s new IP address will be known to the new DMS after the 
handover. There are some issues with this scenario: 

- Since the serving DMS changes, the DMS EPR information within the client 
needs to be updated. One possibility may be that the client is configured with a 
registry address, from which it could obtain the DMS EPR corresponding to its 
current location or serving network provider.  

- The web services need to be informed of the new DMS. 

- All client states have to be transferred from the old DMS to the new one; 
otherwise some messages may be lost. 

Another scenario is where the serving DMS is not changed after handover, cf. Figure 7. 
In this case the DMS only knows the client’s EPR, and is not aware of the new IP address 
obtained by the client after the handover. In this scenario, seamless message delivery to 
the aircraft client after handover is in general not possible without support from the 
network layer protocol. The change in the client IP address needs to be propagated in the 
network routing infrastructure, so that all intermediate routers within the network will be 
able to route the message correctly to the client’s new IP address. Similarly, the name-
resolving infrastructure of the network (e.g. DNS) needs to be updated to map the client’s 
new IP address to its EPR (URL).  

Connection	  lost

New	  connection
established

DMS1

DMS2



OGC 12-163 

36  
 

 

Figure 7 - Topologically-far DMS 

In conclusion, WS-ReliableMessaging between a client and a DMS alone is not a 
sufficient solution to overcome the IP address change problem. Support from the routing 
infrastructure, as in Mobile IP, or a network of interconnected register, redirect and name 
servers that manage client registration, as in the SIP protocol [IETF-SIP], would be 
required. 

9.2.3.3 Software failure 

WS-ReliableMessaging by itself was designed as a wire protocol, not as an end-to-end 
application level protocol. The guarantee that it - by itself - offers, is simply that the 
message was successfully transferred from the RMS to the RMD and that the RMD 
acknowledged it. Different implementations can have different guarantees behind this. 
Software failure recovery could be made possible if the implementation allows some sort 
of persistent storage capability, i.e. it sends acknowledgements only once the message 
has been written to the disk. Apache Sandesha2 provides exactly this capability through 
the so-called pluggable storage manager feature [SANDESHA2]. This means that 
Sandesha can support server failure and restart. Since this is an implementation-specific 
feature, a DMS implementer needs to carefully take it into account when implementing 
WS-ReliableMessaging to handle software failure. Nonetheless, this kind of feature is 
made available by WS-ReliableMessaging, which justifies its selection to handle 
software failure.  

9.2.3.4 Dispatcher data summary 

To enable delivery of messages or summary of messages to the dispatch client, some 
level of logging at the DMS is required. After a successful message delivery to the client, 
at the minimum, for every successfully delivered message, the DMS needs to store: 

Connection	  lost

New	  connection
established

DMS



OGC 12-163 

 37 
 

 Client ID 

 Time of successful delivery 

 Message content 

The interface between DMS and dispatcher client shall use publish-subscribe model, 
similar to / based on OGC Event Service specification [OGC 08-133], with the ES 
functionality implemented at the DMS, and the dispatcher acts as a subscribing client to 
the DMS. 

9.3 Implementation 

Within the OWS-9 architecture, WS-ReliableMessaging agents need to be implemented 
at Client DMS Component on the client side, and at the DMS. Since there is always two-
way communications, both sides need to implement RMS and RMD components.  

WS-ReliableMessaging is a mature standard with several open-source implementations 
available. For the testbed implementation we choose to use Apache Sandesha2 
[SANDESHA2] that supports up to Committee Draft 4 of the specification being 
developed under OASIS WS-RX technical committee, but in principle any available WS-
ReliableMessaging implementation could also serve the function 

9.4 Lessons Learned  

We discover that WS-ReliableMessaging only covers some aspects of the DMS 
communications reliability requirements. Moreover it mandates the use of SOAP 
between the client and DMS. On one hand SOAP has the advantage of providing a 
placeholder for arbitrary metadata such as for provenance or security purposes. On the 
other hand, it introduces some complexity with respect to integration of the DMS 
functionalities with the aircraft client.  

The OWS-9 DMS is designed to be “transparent” to the client-server protocol. The use of 
SOAP and the intention to make the DMS as transparent as possible to the different 
clients and web services eventually create an issue on the client implementation. If the 
OWSs already use SOAP, DMS insertion requires that the client’s original SOAP 
envelope to be enclosed in another SOAP envelope to communicate with the DMS. This 
is rather tricky to do and requires modification of the middleware that the client typically 
uses to intercept the original SOAP envelope. To solve this issue, more feedback is 
required from all stakeholders including client to devise which protocol solution to be 
used; potentially to use different transport than HTTP or SOAP 

9.5 Future Work 

We identified that a cleaner client-DMS interface needs to be defined, and a simpler 
protocol (possibly without SOAP) has to be identified, to have a better and more 
transparent integration with aircraft client implementation. The issue of client network 



OGC 12-163 

38  
 

mobility is another aspect which solution is not covered by OWS-9 DMS and should be a 
priority for future work.  

10 Message Prioritization Module 

According to the OWS-9 RFQ Annex B, the DMS shall: 

 Transmit high-importance and short-to-expire messages ahead of low-importance 
and long-to-expire messages. 

 Message priority shall be determined by message expiration time, or message 
type. 

 The DMS shall parse message content to determine message type. 
 Client shall be allowed to assign priority to specific message types. 

10.1 Scope of Work 

Message Prioritization is a service module of the DMS. The purpose of the Prioritization 
Module is to optimize the use of available network resources by allowing higher priority 
messages to be transmitted ahead of lower priority messages.  Outgoing messages are 
prioritized by their relative time to expire or by their message type.  Messages that are 
about to expire are given an elevated priority and messages that are not about to expire 
are assigned a lower priority.  To quantify the priority level of a message, a set number of 
messages (known as a “batch”) are collected as they are received by the prioritization 
module.  Each message in the batch is parsed and the message type and currency 
metadata is realized by the DMS.  Message types predefined in the DMS as high priority 
are automatically given the highest priority. The remaining messages are prioritized by 
their individual time to expire value.  The message with the lowest time to expire value 
becomes the next highest priority message in the batch, followed by the message with the 
second lowest time to expire value, and so on until all messages have been prioritized.  
Once the messages contained in the batch have been ordered by priority, they are queued 
and transmitted in order, starting with the highest priority message. The Prioritization 
Module waits for the Reliable Messaging reception acknowledgement message before 
transmitting the next message in the batch.  This way, a high priority message will not be 
competing with other messages for available network resources if multiple re-
transmissions are required for complete message reception by the client. While the 
transmission is taking place, the Prioritization Module begins the process of batching and 
prioritization of the next set of received messages. The entire prioritization process has 
been designed to fulfil the prioritization requirements set forth by OWS-9 which is listed 
below: 

 The Prioritization Module must send high priority messages ahead of low priority 
messages 

 The Prioritization Module must prioritize messages by time to expire 



OGC 12-163 

 39 
 

 The Prioritization Module must prioritize messages by type as configured by the 
client 

 

 

 

 

10.1.1 Message Prioritization by Type 

A feature of the Prioritization module is the ability to prioritize the order of message 
transmission to a client by transmitting messages of specific types (which have been 
previously defined as being high priority) after of all other messages.  During client 
session negotiation, the aircraft client will define a Prioritization policy that includes a 
true/false value indicating whether or not to have messages prioritized prior to 
transmission.  The Prioritization Module has been preconfigured with a list of high 
priority message type. Prior to transmission, messages are batched into groups based on 
the order received.  The batched messages are parsed and checked against the list of high 
priority message types. Messages with a type that is defined as being high priority are 

Figure 8 - Prioritization Module Example 



OGC 12-163 

40  
 

rearranged so that they are the first message in the batch that will be transmitted to the 
client.  This allows high priority messages to be transmitted ahead of the other messages.  

10.1.2 Message Prioritization by Time to Expire 

A feature of the Prioritization module is the ability to prioritize the order of message 
transmission to a client by comparing the relative time to expire value of the message to 
the other messages in the client’s transmission queue.  During client session negotiation, 
the aircraft client will define a Prioritization policy that includes a true/false value 
indicating to the DMS whether or not the aircraft client wishes to have messages 
prioritized prior to transmission.  Messages being forwarded to a client with prioritization 
enabled are placed in a transmission queue.  Once in the queue, the DMS parses 
incoming messages in batches and checks for metadata data describing the message type 
and expiration time.  The messages contained in each batch are prioritized by their 
relative time to expire.  Soon to expire messages are set as high priority and placed in the 
front of the queue to be transmitted ahead of low priority messages.  Once all messages in 
a batch have been successfully transmitted to the client, the next batches of messages in 
the transmission queue are sent to the aircraft client. By prioritizing messages in batches, 
the DMS prevents low priority messages being blocked from transmission by a large 
number of high priority messages.  

10.2 Implementation 

Apache Camel provides a rule-based queuing and routing engine that is used by the DMS 
to prioritize messages.  Received messages sent to an Apache Camel service and 
temporarily stored on server memory.  Once Apache Camel receives a preconfigured 
number of messages (in this case 5 messages, but this is easily changed) it groups them 
together and evaluates each message for message type and time to expire. This grouping 
of messages is known as a batch.  Messages in the batch are parsed and any messages 
containing a type defined as high priority (e.g. runway closure) are sent to the front of the 
priority queue.  The remaining messages not defined as being high priority are ordered by 
their individual time to expire relative to the other messages in the same batch. Once the 
batch of messages is queued the DMS transmits the messages, one at a time, to the 
aircraft client. The DMS waits for aircraft client acknowledgement of messages reception 
before transmission of the next message in the queue. Once all messages in the batch 
have been successfully transmitted to the aircraft the DMS transmits the next batch of 
messages. The batching of messages prior to queuing for transmission prevents blocking 
of low priority message from transmission by an influx of very high priority messages. 

10.3 Lessons Learned  

The initial approach to prioritization was to utilize the differentiated services (DiffServ) 
quality of service (QoS) standard to mark messages with priority levels for use by the 
DMS – aircraft client data link(s).  DiffServ is a computer networking architecture that 
specifies a mechanism for classifying and managing network traffic using 6-bit values 
inserted into the IP header of a packet. Routing and transmission equipment use the 6-bit 



OGC 12-163 

 41 
 

values to control the application of network resources to specific packets. DiffServ can be 
used to provide low latency to voice communications while providing best effort to file 
transfers on the same network. The DMS could use DiffServ to prioritize message to 
optimally utilize network resources without having actual knowledge of network resource 
availability.  The intent was to insert Diffserv 6-bit values into the packets headers 
carrying high priority messages to increase the chances of the message being received in 
an expeditious manner. Technical gaps where discovered when attempting the insertion 
of DiffServ values into the packets that contained high priority messages. Because the 
DMS deals with messages on the application level, it was not directly possible to 
associate messages to the individual packets on the network level. It was realized that 
DiffServ is designed to be implemented to allow a single network interface card to insert 
the same DiffServ 6-bit value into every IP packet transmitted.  This is not conducive to 
the type of operational capability required by the Provenance Module.  

10.4 Future Work 

It was determined that the use of DiffServ as a message prioritization method was not the 
optimal method for this research effort. It is still a recommendation that the use of 
networking protocols to control the use of datalink resources is the most effective method 
of prioritizing messages. The allocation of network resources should be conducted by the 
datalink and not by web services, which has no insight into the availability of network 
resources.  While the current prioritization solution does effectively fulfill the 
requirements set forth by OWS-9, future research efforts may discover more effective 
methods of message prioritization in QoS standards used on the network level.  

The current Prioritization Module implementation is hardcoded with a list of high priority 
message types. This straightforward method was chosen to allow the basic process of 
client – DMS session creation to be developed. Future development of the DMS and the 
Prioritization Module should include the ability of the client to define list of high priority 
message types.  This additional functionality will allow client to choose which messages 
are the most important instead of what is pre-configured in the DMS.  

11 Efficient Data Exchange 

According to the OWS-9 RFQ Annex B, the following requirements have been identified 
for data compression: 

 Improve the efficiency of air-to-ground data exchange by reducing bandwidth 
consumption through the use of compression 

 Utilize OWS-8 recommended compression, Fast Infoset, with deflate post 
compression, from the OWS-8 AIXM 5.1 Compression Benchmarking ER 

 Investigate more efficient protocols for exchanging messages between client and 
information management services from ground-to-air and air-to-ground 

 Perform analysis of alternative solutions 



OGC 12-163 

42  
 

 Perform sensitivity analysis to describe the key drivers of significant changes 

 Test and document the performance of improvements of alternative solutions 

 Demonstrate the recommended solution 

 Document recommendations for minimizing bandwidth impacts for ground to air 
and air to ground communications via DMS. 

The purpose of the Data Compression Module will be to match a specific compression 
algorithm to individual data links. The goal of the Data Compression Module is allow for 
the efficient transfer of data over bandwidth restrictive data links. A multitude of 
compression algorithms may be used to be suit the data type being transmitted over a 
specific data link.  

11.1 Scope of Work 

The following scope of work describes the interpretation of the requirements into 
development components. 

11.2 Data Compression Module 

The Data Compression module will use at minimum Fast Infoset as recommended from 
the OWS-8 AIXM 5.1 Compression Benchmarking ER. However, as further presented, 
other compression algorithms can be of interest, especially depending on the type of data 
considered (the differences in terms of efficiency between the algorithms are mainly 
linked to the complexity of the information treated). 

The Data Compression Module must have knowledge of: 

1. The type of data being transmitted to the client (aircraft) 

2. The data link being used to transmit the data to the client (aircraft) 

3. The available resources (memory) 

As a matter of fact, the difference between the different considered algorithms can be 
measured by more than the “compactness efficiency”. For instance, an algorithm that is 
very powerful in terms of size reduction but very demanding in terms of CPU time or 
memory would not necessarily be the best option in an environment where the hardware 
resources are limited/critical, as the case may be in an aircraft. Also, an efficient 
algorithm in terms of compactness could be requiring a lot of processing for 
compression/decompression could be inefficient in a fast network where the time of 
processing in a critical aspect. 



OGC 12-163 

 43 
 

Therefore, depending on the context (e.g. data link being used) and the requirements (e.g. 
end-to-end time to travel requirement), some compression algorithms will be more 
adapted than others.  

The Data Compression Module of the DMS will make a decision on which compression 
algorithm to use (if any) based on the combination of data type, data link that will be used 
to transmit information to the aircraft client and available resources. 

Compression algorithms have strengths and weaknesses. Generally, the higher a specific 
algorithm can compress a data set, the less bandwidth a data link uses to transmit that 
data. The tradeoff is that the systems compressing and decompressing the data (DMS, 
and aircraft client respectively) use more system resources when handling the data. 
Algorithms that have a high compression ratio should only be used on bandwidth 
restrictive data link to conserve system resources. 

Based on the extensive study realized in OWS-8, we will consider 3 compression 
algorithms: 

 Fast Infoset (can be with or without post compression) 

 EXIficient (with or without “deflate” post compression and with or without 
schema knowledge) 

 GZip 

We will further study their characteristics; remind their respective strengths and 
weaknesses to finally define which algorithm fits best in the different frameworks that 
can be characterized by the features hereafter: 

 Speed of the connection network (from very slow e.g. SatCom to very fast e.g. 
LAN) 

 Available resources at the different nodes of the connection network (DMS, 
client, WFS …) like CPU, memory ... 

 Time constraints from external requirements (Quality of Service) 

As mentioned previously, the data exchanged can vary in their nature (type, average size 
…) and it has been demonstrated in OWS-8 that the compression algorithms can be more 
or less adapted depending on the nature of the data. The different files considered have 
been grouped in families, based on their size: 

 Family 1 – small files (<10kB), composed of D-Notams 

 Family 2 – medium size files (10kB–1MB), composed of single AIXM features 
representing a specific characteristic (runway, airspace …).  



OGC 12-163 

44  
 

 Family 3 – bigger files (>1MB), composed of single or multiple features, to assess 
the performance of the algorithms as the volume increases. 

 Family 4 – A set of technical files, some of them home made to achieve specific 
characteristics (order of disorder of features, amount of coordinates …). 

The objective of the Compression performance ER was also to determine which 
improvement could be brought to the forging of the features by the different information 
service to improve compression. For the sake of this study, we will leave those 
considerations out of our scope, so that we only focus on the features as they are likely to 
be exchanged between the different nodes, and not how they could optimally be. 
Therefore we will not consider the fourth family. 

11.2.1 Analysis 

The analysis will be driven the three characteristics defined previously (compaction, CPU 
time and memory usage).  

The naming of the different compression options follow the rules given here after: 

 Neither: without any compression 

 Document: with post compression 

 Schema: with schema knowledge 

 Both; with both schema knowledge and post compression 



OGC 12-163 

 45 
 

11.2.1.1 Compaction analysis 

11.2.1.1.1 First family – small files 

 

Figure 9 - Compaction results on D-Notams 

The EXI compression with post compression and schema knowledge reduces the size of 
D-Notams by almost 90% and makes it the most efficient algorithm for small files.  

 

11.2.1.1.2 Second family – medium size files 

In the following sequences of tests (family 2 & 3), the differentiation has been made 
between the types of features contained in the samples. The different features are 
runways, routes, airspaces, geo borders, vertical structures, navaids and taxiways. 



OGC 12-163 

46  
 

 

 

Figure 10 - Compaction results on second family 

For medium size files, EXI performs better (even without schema) than Fast Infoset. 
Without post compression, runways, routes, vertical structures and taxiways are 
compressed below 30% with both FI and EXI. 

The schema knowledge of EXI offers significant improvement for runway elements, geo 
borders taxiways and airspaces, but not for runways, route, vertical structures and 
navaids. 



OGC 12-163 

 47 
 

Finally, when considering post compression, no algorithm performs significantly better 
than simple gzip compression (XML document). Some of them even perform worse, due 
to incompatibility between the output of the EXI/FI compression and the post 
compression algorithm. As a matter of fact the maximum upgrade we can obtain is about 
5% more compression compared to gzip. Additionally, section 11.2.1.2.2 demonstrates 
that this small gain can come with great costs. 

11.2.1.1.3 Third family – bigger files 

The results for compression algorithms without post compression are very similar to 
family 2 here, so we directly consider comparing them with post compression: 

 

Figure 11 - Compaction results with post compression for bigger files 

Those charts confirm what has been seen previously: EXI offers a good level of 
compaction for taxiways, runways and airspaces compared to Gzip, showing the 
efficiency of EXI on files composed of few elements with limited string data (coordinates 
and dates) 



OGC 12-163 

48  
 

11.2.1.1.4 Conclusion 

EXI with post compression offers very interesting performance in terms of compaction, 
always better than post compression only and Fast Infoset, though the latter offers quite 
good performances overall. Adding the schema to EXI with post compression will 
improve the performance even more for the following types of data: 

 Taxiways 

 Airspaces 

 Runway elements 

 Geo borders 

11.2.1.2 CPU consumption 

The following graphs show both the CPU time needed by the algorithms and the 
compaction ratio associated, to get an idea of the CPU price of compaction. 

11.2.1.2.1 First family – D-Notams 

 

Figure 12 - Compaction Speed Results D-Notams 

We can see that Fast Infoset without post compression is faster than any other algorithms 
(even the basic SAX parser). This charts also points out the great complexity of EXI post 
compression, where the CPU time sky rockets. Here EXI with Schema but no post 
compression performs very well in terms of both compaction and CPU time. However, 
Fast Infoset remains the most interesting when it comes to the ration compaction/time. 



OGC 12-163 

 49 
 

11.2.1.2.2 Second family – medium size files 

 

Figure 13 - Compaction Speed Results Medium Sized Files 

As the file size gets bigger, EXI clearly shows its limits, with CPU times form 3 seconds 
to almost 15 seconds (100 times more that SAX), making it completely unusable in a 
real-time or even close to real-time environment. Without post compression, Fast Infoset 
proves to be very fast, up to 4 times faster than the basic SAX parser. 

11.2.1.2.3 Third family – bigger files 

The results for the third family are basically confirming the trend observed with the 
second family 

 

Figure 14 - Compaction Speed Results Large Sized Files 



OGC 12-163 

50  
 

Fast Infoset still proves to be faster that SAX (2 to 3 times faster). Fast Infoset with post 
compression and EXI with Schema perform approximately the same. Fast Infoset with 
post compression is only around 2 times slower than SAX, while its compaction 
performance is greatly improved. 

11.2.1.2.4 Conclusion 

Fast Infoset is clearly the best option when it comes to compaction/time ratio. The very 
important throughput it allows makes it an adapted solution for very fast communication 
networks. While offering very acceptable compaction performance in terms of 
compaction compared to EXI, it clearly demonstrate its lower complexity in terms of 
CPU time. EXI with Schema knowledge but no post compression is still in the race, 
offering decent compression ratio with CPU comparable to Fast Infoset 

11.2.1.3 Gzip compaction time analysis 

This section quickly tackles the Gzip different level of compaction (from 1 to 9) and put 
it in parallel with the CPU time used, to draw tradeoff conclusions regarding usage of 
simple deflate. 

 

Figure 15 - Gzip Compaction Speed Results 

As one can see the level 9 costs between 2 and 4 times the cost of level 1. Level 5/6 is 
enough for a decent compression and avoids using too much additional CPU for only few 
percent of additional compaction. 



OGC 12-163 

 51 
 

 

11.2.1.4 Memory footprint 

To consider every one of the parameters we are looking at, we need to finally verify the 
resources usage of each compression algorithm, to have a consistent overview of their 
strengths and weaknesses. This has been done on family 2 only, for the results are similar 
for family 3 and may be flawed for family 1 due to the benchmarking environment cf 
[OGC 11-097]. 

 

Figure 16 - Compression Algorithm Resource Allocation 

One can observe that EXI is consuming a lot of memory compared to other algorithms, 
especially with schema knowledge and deflate post-compression. As the memory used by 
the output buffer is taken in consideration, the raw SAX consumes more than gzip and 
Fast Infoset.  

Anyway, EXI with schema and deflate is consuming too much: 

 Around 150-200 MB for family 1, 

 Around 275-300 MB for family 2, 

 Around 250-500 MB for family 3 



OGC 12-163 

52  
 

 

11.2.2 Overall analysis 

The results of the different tests operated have allowed clear identification of the 
strengths and weaknesses of the compression algorithms. In a given environment, with its 
limits and its requirements, some compression method will be more adapted, while they 
will not make sense in other. 

The following sections aim to identify the different environment in which we will be 
operating, together with their limitations and constraints. Based on that, the most 
appropriate algorithm(s) will be identified. 

11.2.2.1 Strong real-time constraint 

This can be the case for specific types of data, like emergency alerts, etc… This 
automatically rules out EXI with post compression (with or without schema). In this case, 
there can be different constraints on other parameters: 

11.2.2.1.1 “Unlimited” resources available: between DMS and information service 

In this case, where we consider that the memory consumption is not an issue, the best 
option is Fast Infoset, as being by far the fastest algorithm of all (even faster than SAX 
parser). An interesting choice could also be EXI with Schema knowledge. It has one of 
the best performances in terms of compaction and operates quite quickly. 

11.2.2.1.2  Limited resources available: between Client and DMS 

The resources on the aircraft client side can be limited, due to limitations in terms of 
equipment that can be embedded in an aircraft. This automatically rules out EXI with 
schema knowledge. 

In this case where there is a strong time constraint and resources are limited, EXI without 
schema knowledge and without post compression is a fair choice. However, the cost of 
air time could call for an efficient solution also in terms of compaction; In that case, Fast 
Infoset with post compression would be an excellent tradeoff. 

11.2.2.2 Strong Compaction constraint 

In the case of air to ground and ground to air communications and alike, the most 
important thing for operators, from a business perspective, is to keep the costs as low as 
possible (and therefore send as few data as possible), while ensuring that information are 
still exchanged between parties. Several options are foreseeable depending of other 
constraints: 



OGC 12-163 

 53 
 

11.2.2.2.1 “Unlimited” resources available 

This is quite an unlikely situation where the resources are not a limitation while 
compaction is. This would be the case in a hi-end aircraft equipped with state of the art 
installation. In this case, EXI combining schema knowledge and post compression would 
be the best options, for though being very consuming in time and resources; it provides 
the best performances in terms of compactness. 

11.2.2.2.2 Limited resources available: between Client and DMS 

In this situation, EXI with post compression is an interesting choice; it offers excellent 
compaction performances and if one is not concerned by the time needed for the 
information to be relayed, but is looking at equipment with limited resources, EXI 
Document appears as the best solution. 

11.2.2.3 Strong resources constraints 

In the case where the resources are the most critical feature of the information exchange 
(Crisis cell …). One could simply go for GZip compression. It is widely used, very easy 
to set up and can offer interesting compression performance and reasonable costs in terms 
of CPU time and memory. Fast Infoset is also an excellent choice in this situation 

11.2.3 Recommended Approach 

During the Session negotiation, the DMS shall propose, among the different module 
options, the possibility for the client to select compression options for the future 
exchange between DMS and client. The set of options defined by the client as a response 
shall constitute the compression policy. The client shall be able to select different options 
based on different criteria (e.g. a specific type of compression for a specific type of data, 
plus a general compression for all other type of data). This way the client will be able to 
tune its policy for each of the different approach it could have (resources constraint, time 
constraint, compaction constraint). 

For this reason, the DMS shall offer the following compression method to the client: 

 Fast Infoset( with or without post compression) 

For finer treatment of compression based on the nature of the data, the DMS should also 
offer the following compression methods: 

 GZip 

 EXI (with or without post compression, with or without schema knowledge) 

The DMS stores the compression policy requested by the client (it shall potentially be 
able to provide it on request.) Whenever the DMS receives data for the client, it shall 
perform a check based on data type to assess if and which compression is needed. The 
data is then compressed and sent to the client. 



OGC 12-163 

54  
 

 

11.2.4 Implementation 

During OWS-9, the first plan is to be able to demonstrate the interest of compression on 
the one hand and also to demonstrate the capability of the DMS to segregate the traffic 
and apply compression only in certain situations. To achieve this purpose, only one 
compression algorithm is needed. We will then have two different behaviors 
(compressing or not compressing) on the DMS (or client) side. Based on this, we can 
demonstrate the capability of the DMS of having different behavior depending on the 
compression policy, defined at the session negotiation, which can apply on: 

 The data link used 

 The types of data 

In the implementation of the DMS web service, which will likely be done with Apache, 
the plan is to implement Fast Infoset for the following reasons: 

 Ease of use : as demonstrated in [OGC 11-097], Fast Infoset is relatively easy to 
set up 

 Feasibility: Fast Infoset binary serialization is already present on the Apache Axis 
2 implementation 

11.2.5 Performance Measures 

Most of the performance assessments have already been done in [OGC 11-097]. 
However, it may be interesting to have some performance assessment in a more 
operational context (monitoring for instance end to end time to travel …) 

11.3 Data link selection 

11.3.1 Analysis 

The bandwidth saving approach is very dependent on the type of data link 
communications will go though. 

In the previous section, it has been demonstrated that the DMS could have an approach 
based on the data link used. It is also important to look at the problem from the 
perspective where the data link is imposed (it could be by the client, the dispatch unit …) 

We consider here that the DMS has access to several data links. Each has its properties, 
in terms of speed, reliability, availability … Without further information from the client, 
it could be considered that the DMS will make a general decision on which data link to 
be use (it could in a general manner, when nothing is specified, always privilege the most 
reliable link for instance) without concerns for the type of data, its priority … 



OGC 12-163 

 55 
 

However it could be that the client has specific requirements in terms of speed, reliability 
… for certain type of data. In this case it would be interesting for it to be able to specify it 
to the DMS, either from a general perspective (the client requires all data to be sent over 
fast ground network if possible, else by Satcom) or on a case by case approach (e.g. all 
notifications regarding a certain subscription must be sent over the most reliable link, 
Satcom for instance.) 

In the event of a client having specific requirements regarding the data link to be used in 
various cases, the DMS shall provide the possibility to the client, at session negotiation 
and also once session is opened, to specify rules of data link usage based on the following 
criteria: 

 Type of data 
 Connections available 
 … (TBD) 

11.4 Alternative protocols for exchanging messages 

This section aims to identify and compare protocols that could come as alternatives for 
HTTP, focusing on optimizing bandwidth. 

A first part will tackle the protocols themselves, a second part will quickly review the 
overheads brought by the different protocols and analyze their impact. 

11.4.1 Protocols 

11.4.1.1 HTTP (Hyper Text Transfer Protocol) 

HTTP is the most widely use protocol on the Internet when it comes to web services. The 
reason is mainly the fact that HTTP is the legacy protocol for data exchange on the web. 

HTTP provides rather straightforward way of requesting information and then getting it. 
It has good support in various programming libraries and is therefore used widely for all 
sort of things, including web services. 

In this section will first be considered the advantages and drawbacks of HTTP from a 
general perspective. Further, alternative protocols (all also based on TCP/IP) will be 
considered and their advantages and drawbacks discussed. 

The main advantages of HTTP are the following : 

 Identification : Speed of delivery is enabled by creating a notification of file type 
in the header of the data being transferred, known as MIME type. This enables the 
receiving application to quickly open the incoming file without having to ask the 
sender what application should be used to read or view the contents of the file. 



OGC 12-163 

56  
 

 Ease of programming : HTTP is coded in plain text and therefore is easier to 
follow and implement than protocols that make use of codes that require lookups. 
Data is formatted in lines of text and not as strings of variables or fields. 

 Search capabilities : Although HTTP is a simple messaging protocol, it includes 
the ability to search a database with a single request. This allows the protocol to 
be used to carry out SQL searches and return results conveniently formatted in an 
HTML document. 

On the other side, HTTP has the following drawbacks : 

 Stateless protocol : Each transaction is essentially separate from others. While the 
user may perceive the transaction as an ongoing communication, there is no 
preservation of data (state) thus all the data must be stored somehow, using 
server-side processing, cookies, hidden variables, or some combination of the 
above. 

 One minor drawback of HTTP is the need to create multiple connections in order 
to transmit a typical Web page, which causes an administrative overhead. 

In a framework where the bandwidth is little or not limited, and the access to the network 
is quasi instantaneous, the drawbacks of HTTP could appear irrelevant. However, in a 
context of limited resources (in terms od bandwidth for instance), those inconveniences 
can become problematic. 

Hereafter will be tackled the following alternatives to HTTP : 

 FTP (File Transfer Protocol) 
 SMTP (Simple Mail Transfer Protocol) 
 AMQP (Advanced Message Queuing Protocol) 

11.4.1.2 FTP (File Transfer Protocol) 

FTP is a standard network protocol used to transfer files from one host or to another host 
over a TCP-based network. FTP users may authenticate themselves using a clear-
text sign-in protocol, normally in the form of a username and password, but can connect 
anonymously if the server is configured to allow it. 

FTP, contrary to HTTP, is an Out-of-Band protocol, meaning that there is two separate 
connections for controlling and for data transfer, while in HTTP (which is an In-Band 
Protocol), control and data are exchanged on the same connection, which may imply that 
a greater volume of data is exchanged in FTP. This increases the reliability of the 
exchange over FTP, but generates additional message exchanges that could be 
problematic in a limited resources environment. 

The advantages of FTP are presented hereafter: 



OGC 12-163 

 57 
 

 FTP is a fast and efficient way of transferring bulks of data across the internet. 
 It has an automatic backup .Whenever files are edited on a local system they can 

be updated by copying them to the host system editing the file. It then provides a 
backup system that works both ways. 

 FTP gives control over transfer. The data can be transferred either in ASCII mode 
(for text files), in Binary mode (for executables or compressed files) or in Local 
mode, allowing two entities with identical setups to exchange data in a proprietary 
format. 

 While using FTP, tools like macros can also be used to make your work more 
efficient and easier. 

However, FTP has the following drawbacks: 

 FTP was not designed to be a secure protocol. 
 It is therefore vulnerable to attacks such as spoof, brute force, packet sniffing, ... 
 There is no possibility for data encryption over FTP. 
 FTP provides no Meta-data together with the files exchanged. 

11.4.1.3 SMTP (Simple Mail Transfer Protocol) 

Simple Mail Transfer Protocol (SMTP) is an Internet standard for electronic mail (e-mail) 
transmission across Internet Protocol (IP) networks. 

This protocol will only be described shortly as it appears that it is rather limited and 
unlikely to suit the Web Service architecture. 

Main differences between HTTP and SMTP are presented here: 

 HTTP is mainly a pull protocol--someone loads information on a web server and 
users use HTTP to pull the information from the server. On the other hand, SMTP 
is primarily a push protocol--the sending mail server pushes the file to receiving 
mail server.  

 SMTP requires each message, including the body of each message, to be in seven-
bit ASCII format. If the message contains binary data, then the message has to be 
encoded into seven-bit ASCII format. HTTP does not have this restriction.  

 HTTP encapsulate each object of message in its own response message while 
SMTP places all of the message's objects into one message. 

The main drawback here would be that SMTP only allows the exchange of ASCII text, 
which would render any binary exchange (would that be BinaryXML or compressed 
data) impossible. Moreover, the performance of this protocol in terms of flow handling 
(congestion) is quite non-existent, making it a not so efficient protocol for data exchange. 

 



OGC 12-163 

58  
 

11.4.1.4 AMQP (Advanced Message Queuing Protocol) 

The Advanced Message Queuing Protocol is an open standard, binary, application 
layer protocol for message-oriented middleware. 

The defining features of AMQP are message orientation, queuing, routing (point-to-point 
and publish-and-subscribe), reliability and security. 

The first and most important information about AMQP is that it is designed for message-
oriented middleware (MOM) (the same goes for JMS (Java Messaging Service)). 

A MOM is an infrastructure able to exchange messages between distributed systems. The 
main reason for using a MOM is its ability to seamlessly transfer messages between 
heterogeneous platforms, allowing applications to be developed for a variety of operating 
systems and able to run over several network protocols. Central reasons for using a 
message-based communications protocol include its ability to store (buffer), route or 
transform messages while conveying them from sender to receiver(s). 

In this market, the emerging standard appears to be AMQP, given the growing 
community using it (mainly banks) and supporting it (Microsoft, RedHat ...). Its multiple 
advantages, described further, are pushing this open standard to become the most widely 
used when it comes to B2B message exchange. 

First comparing AMQP to the other protocols mentioned previously, here is what shows: 

Thanks to its standardized message format (called bare message), implementations of 
message brokers from different vendors are truly interoperable, in the same way as 
SMTP, HTTP, FTP. 

Where AMQP differs enormously from instant messaging or email is that it allows one to 
specify what messages will be received and where from, and how trade-offs are made 
with respect to security, reliability and performance.  

Things that are ambiguous in email get defined in AMQP. For example, message size, 
reliability, security, discard policy, TTL, high speed group delivery, 1-of-N delivery, and 
so forth. 

Further, the protocol comes with some interesting features: 

AMQP has the possibility to handle enhanced security through mechanisms of 
authentication and/or encryption that are based on based on SASL and/or TLS. 

It provides the core set of messaging patterns such as asynchronous directed messaging 
(meaning that the sender and the receiver do not have to have access to the network 
simultaneously for the messages to be exchanges), request/reply and publish/subscribe. 



OGC 12-163 

 59 
 

AMQP also offers a very capable flow control, which enables consumers of messages to 
slow producers to a manageable speed, and which enable different workloads to proceed 
in parallel at different rates over one connection. 

In terms of reliability of the service, there mechanisms exist for resuming message 
transfers when connections are lost and re-established; for example in the event of service 
failover or intermittent connectivity. The protocol can also handle priority levels defined 
between sender and receiver. 

Regarding web services, AMQP, similarly to HTTP, stands between the pure network 
and transport protocols (TCP/IP) and the application layers of the web services, as 
depicted in Figure 17 

 

Figure 17 : AMQP in System Oriented Architectures 

AMQP can be used as a guaranteed transport for Web service calls - it does not define the 
payload, just the transport layer, which means that SOAP, WS-Security, WS-
Transactions, WS-MetaData Exchange, and so forth can all be run over AMQP in the 
same way that they can be used over JMS. However, AMQP provides vendor-neutral 
interoperability at the lowest levels of the transport link. 

Finally, here are the main interesting points of AMQP compared to the competition JMS : 

 Unlike JMS, which only defines an API, AMQP is a wire-level protocol. Meaning 
that the format of the data that is sent across the network as a stream of octets is 
described and standardized. 



OGC 12-163 

60  
 

 JMS does not define the format of the messages that are exchanged, so JMS 
systems are not or hardly interoperable. 

  

To conclude on AMQP, here are the main features of interest, along with the principal 
(and potentially critical) downside of this protocol, and of MOM in general: 

Advantages: 

 Asynchronous delivery 
 Routing (request/reply - publish/subscribe) 
 (especially AMQP) Supporting implementation on a lot of API (JMS C# C++, 

PHP, ...) 

Disadvantages: 

The main disadvantage of message oriented middleware systems is that they require an 
extra component in the architecture, the message transfer agent (message broker). As 
with any system, adding another component can lead to reductions in performance and 
reliability, and can also make the system as a whole more difficult and expensive 
to maintain. 

11.4.2 Headers 

After stating the actual advantages and drawbacks of those protocol from a general 
perspective, it is now interesting to compare the headers of the different options. Indeed, 
in an environment where the bandwidth is limited, and the number of message exchange 
can be very important, the volume created headers of each message can become 
significant. 

All the protocol considered here are functioning on top of TCP/IP, therefore it is 
considered that the overhead induced by the lower layer protocols are constant and do not 
vary from a application protocol to the other. 

Regarding HTTP, the protocol also always includes a set of headers that send metadata 
during transfers. FTP does not send such headers. When sending small files, the headers 
can be a significant part of the amount of actual data transferred. HTTP headers contain 
info about things such as last modified date, character encoding, server name and version 
and more. It is then left to decide whether this metadata is of use for the data exchange. If 
not, the additional headers inherent to HTTP may become a source of unnecessary 
volume of data transmitted. Additionally, HTTP, as a stateless protocol, has to reopen a 
connection every time data has to be exchanged, which also represents additional volume 
of data to be exchanged, compared to FTP for instance. 

AMQP also include headers, to define properties such as priority. However, those 
headers are not very numerous and their format is quite simple (boolean, int, ...). 



OGC 12-163 

 61 
 

Moreover, it is possible to define default values for those headers so that they can be 
omitted, as long as the receiver of the message and the sender have agreed on those 
default values at session opening. 

SMTP probably is the protocol with fewest header volumes, but its inability to transmit 
anything but text makes this advantage insufficient compared to the other protocols. 

First conclusions that can be drawn from this analysis is that comparing the classical 
applications directly operating over TCP/IP (that is HTTP, FTP and SMPT), HTTP 
remains the most appropriate for the operation of web services, given its advanced 
capabilities for message exchange compared to SMTP and FTP (message encryption, 
various formats, database querying). 

FTP can be a good candidate if security is not a primary concern. It is also appropriate for 
data exchange over TCP/IP, and offers possibility to exchange data in binary format. The 
main advantage of FTP would be that it is slightly faster that HTTP. However the 
compression and pipelining (ability to ask for the next data before the previous one 
ended) functionalities of HTTP can palliate this difference. 

AMQP could be an interesting option for web services, since it has the same capabilities 
than HTTP, namely its capacity to support various models (SOAP, WS-Transactions, ...) 
over TCP/IP, and brings new features that could be very interesting in an SOA, such as 
asynchronous messaging and reliability (not covered by HTTP). As it has been shown, 
being a MOM protocol, AMQP comes with the drawback that message brokers need to 
be included to the architecture, which could lead to additional developing and operating 
costs. 

11.5 Lessons Learned  

It was interesting to investigate alternatives for the omnipotent protocol HTTP for the 
operation of web services on TCP/IP networks. Being generally used by a wide majority 
of the network applications and web services, HTTP’s legitimacy is rarely questioned. A 
short analysis showed that this choice is justified both by legacy usage of the protocol for 
information exchanges over the Internet and by the fact that service architectures 
developed with the together with HTTP, therefore adapting to its available features, while 
HTTP was evolving to best serve those architecture in return. 

From a documentation perspective, the wide usage of HTTP comes with very complete 
documentation associated, previous studies and strength and weaknesses analyses 
performed. Regarding the other protocols, FTP and SNMP have very closed field of 
usage, and considering them as potential alternatives of HTTP is quickly proven 
complicated, given the technology gaps that exists. AMQP appears as the only serious 
competition, offering features comparable (and sometimes more thorough) than HTTP. 
However, AMQP still needs to be proven has a serious competition, for structure of its 
architecture implies gap that need to be filled to reach the level of deployability and 
interoperability of HTTP, especially regarding the need of the intermediate message 
broker in the architecture. 



OGC 12-163 

62  
 

11.6 Future Work 

Feasibility of AMQP deployment as alternative of HTTP for web services over IP needs 
to be further assessed and potentially tested. The additional features brought by this 
MOM architecture may be very interesting and could use further testing. 

12 Data Filtering 

According to the OWS-9 RFQ Annex B, the following requirements have been identified 
for data filtering: 

 Develop, test, and document DMS functionality for filtering information sent to 
the client 

 The DMS shall perform extraction of relevant information (projection) 

o The DMS shall demonstrate filtering based on feature property values for 
a given time interval 

o The DMS shall demonstrate filtering based on any XML based content 

 Perform computation of average, standard deviation, range, and trends of data 
responses before being sent to the client (densification) 

o The DMS shall perform filtering of data based on an average value of data 

o The DMS shall perform filtering of data based on standard deviation value 
of data 

o The DMS shall perform filtering of data based on range of values of data 

o The DMS shall perform filtering of data based on preferred provider(s) of 
data 

 Develop user configurable filtering parameters as described in the Systems Rules 
Model 

 The DMS shall perform data filtering by type of class of data, issue time, and 
expiration time 

 Develop, test, and document an approach to facilitate the execution of common 
data filtering tasks (Note: This may be similar to WFS stored queries) 

 Demonstrate the recommended DMS data filtering capabilities 



OGC 12-163 

 63 
 

12.1 Scope of Work 

The Data Filtering Module of the DMS will interact with the data to be sent to the client, 
in order for them to correspond to a certain set of rules that are defined by the client at the 
session negotiation (and can potentially be redefined at any time during the session). 

The different Information Services already offer filtering options. As long as the queries 
are compliant with the filter encoding rules [OGC-FES], the client is already able to 
specify a set of rules to be applied at the source of the data for the delivered information 
to be more specific to the client’s need. However, this filtering has limits. The 
specifications for the filtering using FES are only value based. It does not allow the 
modification of the structure of the document, the removal of whole sections that are not 
of interest for the consumer, etc. 
The approach here is to define new means of filtering, to allow the client to really tailor 
the information it will receive. 
During the session negotiation, the client shall have the opportunity to define a filtering 
policy at the DMS. This filtering policy will then be applied to all the data that transit 
through the DMS to the client. 
 

12.1.1 Extraction 

The purpose of the Extraction module is to allow the client to specify a sub set of the 
information he really intends to get. The client defines this subset at the DMS during the 
session negotiation, if the feature is available. Several options in the way the filtering 
policy is specified can be thought of. One of them could be to use a “schemask”. A 
schemask is a subset of the original document schema, where some elements have been 
omitted on purpose, because the client doesn’t want / need them in the final data 
received. 

The idea of the schemask brings great flexibility to the client. However, since no 
restrictions to its use are foreseen, it will allow the creation of dataset that are not 
compliant to the original schemas they were built after, which could become problematic 
for clients that perform XML validation. 

The purpose is to allow the client to create a mask specifying a schema including only 
what the client needs. This will have the following advantages: 

 The client knows upon reception that the dataset only contains what it needs, and 
therefore doesn’t have to parse useless part of the document to find the relevant 
information. 

 Bringing the dataset to the minimum amount of data needed by the client can 
reduce the amount of information transmitted. Depending on the scarcity of the 
schemask proposed by the client, this reduction can be considerable, which can 
represent a very important asset in a low bandwidth environment (e.g. SatCom 
media) 



OGC 12-163 

64  
 

12.1.2  Recommended Approach 

At the session negotiation, when the client and the DMS together define the overall data 
management policy, the client shall define its extraction policy through the provision of 
schemask(s).There can be different schemask for different type of data, type of features, 
... The schemask(s) shall then constantly be used by the DMS, whenever it receives data 
intended to the client. The DMS shall parse the data received and remove any element 
(and its descendants) that is not present in the schemask. 

As an example, the following XML represents a simplified version of the schema 
defining an AIXM:AirspaceTimeSlice : 

<element name="AirspaceTimeSlice" type="aixm:AirspaceTimeSliceType"> 
<complexType> 
  <complexContent> 
  <sequence> 
   <element ref="gml:validTime"/> 
   <element ref="aixm:interpretation"/> 
   <element ref="aixm:sequenceNumber" minOccurs="0"/>  
 <element ref="aixm:correctionNumber" minOccurs="0"/> 
   <element ref="aixm:featureLifetime" minOccurs="0"/> 
   <element name="designator" 
type="aixm:CodeAirspaceDesignatorType" nillable="true" minOccurs="0"/> 
   <element name="name" type="aixm:TextNameType" nillable="true" 
minOccurs="0"/> 
   <element name="geometryComponent" 
type="aixm:AirspaceGeometryComponentPropertyType" nillable="true" 
minOccurs="0" maxOccurs="unbounded"/> 
   <element name="activation" 
type="aixm:AirspaceActivationPropertyType" nillable="true" 
minOccurs="0" maxOccurs="unbounded"/> 
   <element name="annotation" type="aixm:NotePropertyType" 
nillable="true" minOccurs="0" maxOccurs="unbounded"/> 
   <element name="extension" minOccurs="0" 
maxOccurs="unbounded"> 
    <complexType> 
     <sequence> 
      <element ref="aixm:AbstractAirspaceExtension"/> 
     </sequence> 
    </complexType> 
   </element> 
  </sequence> 
 </complexContent> 
</complexType> 
</element> 

 

It the following listing, that represents a potential schema, the client decided that the 
annotation and extension elements were of no use for the intended usage and therefore 
removed them in the schemask, that would possibly look like that: 



OGC 12-163 

 65 
 

<element name="AirspaceTimeSlice" type="aixm:AirspaceTimeSliceType"> 
<complexType> 
 <complexContent> 
  <sequence> 
   <element ref="gml:validTime"/> 
   <element ref="aixm:interpretation"/> 
   <element ref="aixm:sequenceNumber" minOccurs="0"/>  
 <element ref="aixm:correctionNumber" minOccurs="0"/> 
   <element ref="aixm:featureLifetime" minOccurs="0"/> 
   <element name="designator" 
type="aixm:CodeAirspaceDesignatorType" nillable="true" minOccurs="0"/> 
   <element name="name" type="aixm:TextNameType" nillable="true" 
minOccurs="0"/> 
   <element name="geometryComponent" 
type="aixm:AirspaceGeometryComponentPropertyType" nillable="true" 
minOccurs="0" maxOccurs="unbounded"/> 
   <element name="activation" 
type="aixm:AirspaceActivationPropertyType" nillable="true" 
minOccurs="0" maxOccurs="unbounded"/> 
   <element name="annotation" type="aixm:NotePropertyType" 
nillable="true" minOccurs="0" maxOccurs="unbounded"/> 
   <element name="extension" minOccurs="0" 
maxOccurs="unbounded"> 
    <complexType> 
     <sequence> 
      <element ref="aixm:AbstractAirspaceExtension"/> 
     </sequence> 
    </complexType> 
   </element> 
  </sequence> 
 </complexContent> 
</complexType> 
</element> 

 

 

Then, when the DMS will receive a dataset including an airspace time slice, it shall 
automatically remove all the elements (and their descendants) that are not present in the 
schema. 

The level of details of the schema shall be the level of filtering required by the client, not 
more. If the client want to remove elements that are for instance grand children of the 
root element, if shall not go any further that down 3 levels in the tree. It shall be 
considered that every element that is present in the schemask implies the presence of all 
its descent. Any element that is not implies the absence of all its descent. 

The combined use of Xpath and XSLT, at the DMS, should enable the filtering 
possibilities proposed above. 

The DMS shall deduce a XSL stylesheet from the schemask, this stylesheet shall then be 
used for all data received at the DMS and intended to the client. The advantage of the 



OGC 12-163 

66  
 

XSLT is its flexibility. Indeed, the style sheet can easily be modified (e.g. on client’s 
request) to add/retrieve/modify filtering rules at the DMS. 

12.1.3 Densification 

The purpose of the Densification module is for the client to be able to specify arithmetic 
computation options to be applied to the data at the DMS. To justify the need for such an 
approach, we will consider here that the DMS can receive data intended for the client 
from different sources. In this case, it may possible that the property value of a feature 
differ from one source to the other. 

Given that the client has either subscribed for or requested the data in the first place, the 
DMS is to send them regardless of their “cardinality”. However, as one of the key interest 
of the DMS presence is to reduce bandwidth, sending several time the same (or close to 
same) feature, with only some properties slightly changing from one to the other does not 
appear efficient. 

The basic concept of the Densification module would be to send once all the common 
properties of the given features while providing computation of the values that varies 
from a source to the other. 

It is considered here that we are only looking at numerical values. Geometrical or 
qualitative values are left out of the scope of this study. This considered, the operations 
that the DMS shall apply on a set of property values describing one feature are the 
following or combinations of the following: 

 The DMS calculates the mean of all the values provided, thus sending to the client 
a single value that represent the trend of the property based on the different 
sources. 

 The DMS calculates the standard deviation of all the values provided. This 
information, combined with the mean calculation, provides further information on 
the dispersion of the data provided by the different sources 

 The DMS provides the range of the values provided, informing the client on the 
maximum offset between values provided by different sources. 

Use or use of combination of those computed values provides the client with extended 
information on the differences noted among the data sources while optimizing the amount 
of data exchange on the data link. 

12.1.4 Recommended approach 

During the session opening, the client shall be able to specify which of the operation(s) it 
wants to be computed and delivered in the event of concurrent data sets. 

The approach recommended would be that the client would just be able to enable or 
disable the following three options: 



OGC 12-163 

 67 
 

 DMS computes average value (ON/OFF) 
 DMS computes standard deviation (ON/OFF) 
 DMS provides range of values (ON/OFF) 

It is recommended that it is the role of the DMS to determine whether concurrent features 
exist or are likely to happen (based on client’s subscriptions / requests). 

12.1.5 Provider filtering 

This sub module is designed to allow the client to define a preferred source of data, in the 
event where several data provider provide concurrent data sets. The purpose here is for 
the client to be able to subscribe to several data source, with potential overlap on the data 
provided. In this case it is possible that for some features, two or more data sources 
provide similar data sets (e.g. two data providers emitting features concerning a given 
airport). 

For an efficient data exchange perspective, it would be a waste of bandwidth to send 
twice the same information to the client. Therefore, the DMS shall allow the client to 
define a preferred data source. This way, when two data sources are in concurrence on a 
similar feature, the DMS can rely on the preference policy of the client (defined during 
the session negotiation) to select which dataset to be sent based on its source. 

It is considered here that the client is to be aware that there may be potential overlapping 
between the providers it subscribes to / queries. The client has to clearly define during 
session negotiation its preferred data source in case there is concurrence. 

12.1.6 Recommended approach 

During the session negotiation, the client has to define the priority it gives to the 
difference providers he will be fed the data from. It is recommended that every time the 
client introduces a new data provider to the DMS, it assigns a priority level to it (e.g. 1 
for the preferred provider, 2 for the second preferred …) 

This can be done at session negotiation (the client basically provides a ordinated list of its 
favorite providers) and should possibly be updated as the client introduces new data 
providers. This information could then be added to the metadata going together with new 
subscription for instance. 

Note: This concerns only the Event Service mechanisms, where the client may subscribe 
to several ES for the same type of data. 

12.2 Implementation 

In OWS-9, the filtering module has been implemented in a simple manner, to 
demonstrate and assess the interest of bringing an additional filtering unit in an 
architecture where data providers already offer certain level of filtering (Spatial filtering, 
Temporal filtering, …). The DMS has been implemented with a filtering function that 
allows the removal of comments within a xml document. The filtering functionality is 



OGC 12-163 

68  
 

based on XPath research and removal of elements (in this case, the XPath //comment() 
allows to identify and remove all comments in the document) 

12.3 Lessons Learned 

While tackling the filtering functionality in the Data Transmission Management, several 
issues and questions were raised. 

First, the relevance of such a module was questioned. Indeed, filtering options already 
exist to quite an extent in other entities of the OGC architecture: Web Feature Services, 
Event Services and others already offer the possibility to operate filtering on datasets. 
This filtering can be spatial or temporal for instance. The question is; if more filtering 
was to be provided, should this be by a third entity (like the DMS), or rather by extension 
of entities that already perform filtering. 

The introduction of filtering in the requirements of the Data Transmission Management is 
motivated by the interest of such a feature in the frame of AAtS, where the DMS would 
be an entity that interacts with more than the set of OGC Web Service Providers. 
However, in a pure OGC context, the existence of this feature is questionable. 

The second question is the limit that is given to filtering possibilities. Indeed, customized 
filtering could represent a powerful mean to reduce information exchange between the 
aircraft and the ground. This could on the one hand ensure that the subset of information 
provided to the pilot is really tailored to his need, and on the other hand reduce 
significantly the amount (and thus the cost) of data transmitted. However, this customized 
filtering could come to the point where the final result is not schema compliant anymore. 
Indeed, the final user could judge certain parts of the information irrelevant or useless for 
his personal use, but it could lead to the removal of mandatory information according to 
the schema. This could in turn make the job of parsers more complex, if not impossible.  

12.4 Future Work 

The need for further filtering possibilities, on top of what is already offered by OGC web 
services, need to be further assessed. 

If further filtering is considered, then the question of which entity is to perform such a 
filtering need to be addressed. Should it be a new entity (such as the DMS) or should the 
filtering be undertaken and extended by services that used to cover this features (web 
services such as WFS or ES). 

Finally, the extent of the filtering possibilities offered to the final client need defined. 
Given that flexible filtering could bring important data reduction, but could also lead to 
making the final document schema incompliant, tradeoffs need to be made. 



OGC 12-163 

 69 
 

13 Data Validation 

According to the OWS-9 RFQ Annex B, the following requirements have been identified 
for data validation: 

 Develop, test, and document DMS functionality for validating information 
exchanged between DMS and the client described in the Systems Rules Model 

 The DMS shall parse message content to determine whether data has been 
delivered within its effective timeframe 

 The DMS shall parse message content to determine whether data represents the 
most up-to-date information 

 The DMS shall parse message content to determine whether subscribed intervals 
are being complied with 

13.1 Scope of Work 

The Data Validation Module filters, flags, and collects metrics on messages sent to the 
aircraft client based on currency metadata contained in a message. Currency metadata 
define a time period in which the information contained in the message is valid.  The 
configuration of the Data Validation Module requires the following parameters as inputs:  

 Client Validity Policy describing the configuration of the DMS Currency 
Validation feature 

 Client Validity Policy describing the configuration of the DMS Latency 
Validation feature 

 Client Validity Policy describing the configuration of the DMS Subscription 
Interval Validation feature  

Clients configure the Data Validation Module during the client’s initial connection to the 
DMS. During client – DMS profile creation, the DMS provides the aircraft client the 
different validation methods and their individual configuration options.  The client 
responds to the DMS by defining which validation methods the DMS shall use to validate 
the transmitted messages. The Validation Module has three methods that can be used by a 
client:   

1.) The validity of the data as received by the DMS. (Currency Validation) 
2.) The validity of the data as received by the client. (Latency Validation) 
3.) The validity of the data subscription interval received by the client. (Subscription 
Interval Validation) 

These methods are presented to the client as configurable “On” or “Off” option in the 
Validation Module.  

 
The DMS stores the client’s configuration of the Validation Module within the client’s 
session profile stored in the DMS. Once configured, the DMS Validation Module 



OGC 12-163 

70  
 

evaluates every incoming message addressed to the client and validates the message 
currency based on the configuration of the client Validity Policy. Messages received by 
the DMS in a valid state are forwarded to the client unaltered. Messages received by the 
DMS in an invalid state are either flagged with a “non-current” tag or dropped to prevent 
transmission to the client. The client’s Validity Policy defines how the data validation 
module deals with messages containing non-current data. If currency metadata is not 
found in a message, the Data Validation Module will not perform data validation and 
forwards the message to the client unaltered.  The currency of each message received is 
recorded in a log as either “Meets Currency” or “Exceeds Currency” for future analysis 
by stakeholders.   

The Data Validation Module calculates the latency of the message transmission to the 
client by the DMS.  The latency of each message is logged by the Data Validation 
Module and compared against an acceptable limit hard coded in the DMS to determine 
whether the DMS transmission latency is within acceptable levels. The latency of each 
successful client – DMS message transmission is recorded in a log as either “Meets 
Latency Requirements” or “Exceeds Latency Requirements” and stored for future 
analysis by stakeholders.  

The Data Validation Module monitors the rate in which notification messages are 
received from subscription based ground services. The reception rate is compared against 
the subscription interval client configured in a subscription based ground service.  
Disparities between the rate of received notification messages and rate configured by the 
aircraft client are logged by the Data Validation Module for future analysis by 
stakeholders.  

13.1.1 DMS Currency Validation 

The purpose of the DMS Currency Validation function is to ensure that data received by 
the DMS is valid before it is transmitted to the client.  To determine message validity, the 
reception time of the message by the DMS is compared to currency metadata (i.e. AIXM 
Time Slice) in the message.  The currency metadata describes the time period in which 
the message is current.  Messages received outside of the time period described by the 
currency metadata are considered invalid. Messages received in a invalid state are tagged 
as such and either dropped or forwarded to the client, depending on the configuration of 
the client validation policy. The messages that are received in a valid state are forwarded 
to the client unaltered.  

13.1.1.1 Recommended Approach 

During session negotiation, a client will specify in its Validity Policy whether or not the 
Data Validation Module is to perform the following Currency Validation: 

1. Flagging non-valid messages. (ON/OFF) 
2. Dropping non-valid messages. (ON/OFF) 



OGC 12-163 

 71 
 

The Data Currency Validation feature searches for currency metadata in all received 
messages addressed to the client.  The messages are parsed by the DMS to locate 
currency timestamp(s) (e.g. AIXM Time Slice) that describes the validity of the 
information contained in the message. Messages containing no currency metadata are 
forwarded to the client unaltered by this feature.  When currency metadata is found, the 
Data Currency Validation feature compares the message currency timestamp to the time 
of message reception by the DMS.  Messages received with currency metadata containing 
a timeframe outside of the DMS reception time are considered invalid by this feature.  
Invalid messages are either dropped, or an “invalid” tag is inserted into the message 
SOAP header, and then forwarded to the client.  What the Validation Module does with 
invalid messages is dependent on the configuration of the Validity Policy set by the 
client.   

When the Data Validation Module is configured to drop invalid messages, invalid 
messages are dropped from the transmission queue to prevent message transmission to 
the client.  If the Data Validation Module is configured to flag invalid messages, a 
“<valid> false </valid>” tag is inserted into the SOAP messages header.  This tag alerts 
the client that the message received is invalid.  Every message received by the Data 
Currency Validation feature is recorded as being either valid or invalid in a log and stored 
for future analysis by stakeholders. The contents of the log are used to generate a single 
metric describing the number of invalid message received by the DMS. The metric is 
generated with the following formula:  

# of messages received for a client minus # of out-of-valid timeframe msgs 
# of messages received for a client 

13.1.2 Client Latency Validation 

The purpose of the Client Latency Validation function is to ensure that data received by 
the aircraft client is the most up to date information.  DMS message transmission latency 
is measured and compared to a hardcoded limit preconfigured in the DMS. If the 
timestamp differential is less than the latency limit defined in the DMS, then the message 
is logged as “Meets timeliness”.  If the timestamp differential is outside the latency limit 
defined in the DMS the currency metadata element is logged as “Exceeds timeliness”. 
The log is stored for future analysis by stakeholders. 

13.1.2.1  Recommended Approach 

During session negotiation, a client configuring the Validity Policy in the DMS will 
specify: 

1. Whether or not the DMS is to perform “Latency Validation”. (ON/OFF) 
2. The latency limit for message transmission between the DMS and the client. 

(String) 

If a client’s profile has the Latency Validation featured configured, the DMS logs the 
latency of message transmission from the DMS and client. When new or updated 



OGC 12-163 

72  
 

information becomes available to the DMS, and is transmitted by the DMS to the aircraft 
client.  The DMS logs the time of message transmission to the aircraft client.  Upon 
message reception, the aircraft client sends a reliable messaging acknowledgement to the 
DMS. This client acknowledgement contains a timestamp describing message reception 
time.  The DMS compares the acknowledgement timestamp to the DMS transmission 
timestamp to determine the total latency from issuance to delivery.  If the transmission 
latency is greater than the limit set by the client, the latency is logged as “Exceeds 
timeliness”. If the transmission latency is less than the limit set by the client, the latency 
is logged as “Meets timeliness”.  This metric is tracked and calculated by the DMS using 
the following formula (percent per 1,000 messages):  

# of messages sent to client minus # of msgs exceeding timeliness factor 
# of messages sent to client  

13.1.3 Subscription Interval Validation 

The purpose of the Subscription Interval Validation feature is to monitor subscription 
based ground services (i.e. Event Service) notification intervals to ensure they are 
occurring within a client specified frequency.  To configure this module, the aircraft 
client defines an acceptable range or variance from subscribed update intervals during 
client validity policy creation.  The DMS compares the actual reception interval of 
notification messages against the update interval configured by the client in the ground 
service. Published notification messages received by the DMS within the subscribed 
update interval defined in the client’s Validation Profile are recorded as “Meets 
subscribed interval” in a log. Published notification messages received by the DMS 
outside of the subscribed interval defined in the client’s Validation Profile, are recorded 
as “Exceeds subscribed interval” in a log. The log is stored for future analysis by 
stakeholders.  

13.1.3.1 Recommended Approach 

During session negotiation, a client configuring the Validity Policy in the DMS will 
specify: 

1. Whether or not the DMS is to perform “Subscription Interval Validation”. 
(ON/OFF) 

a. The update message interval the client configured for a subscription based 
service. (String) 

b. The tolerated variance from client’s configured subscription based service. 
(String) 

During the client Validity Policy creation, the client defines the acceptable range of 
variance from subscribed Event Service notification message intervals. Once the client 
has configured its policy, the DMS compares received update message interval against 
the interval defined in the client’s profile.  When the DMS receives an update messages 
within the interval defined in the client’s profile, the DMS logs the update message 



OGC 12-163 

 73 
 

reception as “Meets subscribed interval”. When the DMS receives an update messages 
outside of the interval defined in the client’s profile, the DMS logs the update message 
reception as “Exceeds subscribed interval”.  The DMS tracks the ground services 
compliance with notification message intervals by the following formula: 

# of messages sent to client minus # of msgs subscriptions intervals missed by more than n seconds 
# of messages sent to client  

 

13.2 Implementation  

During session negotiation, the client contacts the DMS with a GetSessionOptions 
request. The DMS responds to the client with a list of the available DMS modules and 
their configuration options. To configure the Data Validation Module, the client 
configures a session profile, invoking specific DMS modules.  The Data Currency 
Validation feature configuration options are listed below: (note: only one option can be 
selected by the client) 

1. Data Currency Validation 
a. On/Off (Flag) 
b. On/Off (Drop) 

13.2.1 Currency Validation 

Messages sent to a client with “Data Currency Validation” configured as “On” in their 
Validity Policy will have all messages evaluated for the existence of currency metadata 
(e.g. AIXM TimeSlice).  The currency metadata defines a time range in which the 
message is considered valid.  To determine the validity of the message, the currency 
metadata is compared to the time of message reception by the DMS.  The DMS uses 
AIXM TimeSlice XML elements found in the AIXM standard to determine the validity 
of a message.  Messages received by the DMS with a TimeSlice element specifying a 
time range that is inclusive of the DMS message reception time, are considered to be 
“valid”. Message received by the DMS with a TimeSlice element specifying a time range 
is non-inclusive of the DMS message reception time, are considered to be “non-valid”.  
Valid messages are transmitted to the client unaltered.  Invalid messages are either 
dropped or tag as “non-valid” and forwarded to the client, depend on the how the client 
configured its Validity Policy.   

If the client Validity Policy specifies the DMS shall drop non-valid messages, the DMS 
then blocks the transmission of non-valid to the client. If the client Validity Policy 
specifies the DMS shall tag non-valid messages with metadata before transmission have a 
“<validity>false</validity>” tag inserted into their SOAP message header before 
transmission to the client. The evaluation of timestamps by the Data Validation Module is 
aided through the use of standardized XML exchange models such as AIXM and 
WXXM.  Schemas defining the format of these exchange models are publicly available 



OGC 12-163 

74  
 

and are used by the Validation Module for the efficient identification of specific 
information contained in messages such as currency metadata.   

<soap:Body> 
<ns2:createSession xmlns:ns2="http://triagnosys.com/dms"> 
<endpoint>http://localhost:8080/axis2/services/CDMS?wsdl</endpoint> 
 <Module> 
 <name>Validation</name> 
  <option> 
   <enabled>true</enabled> ---- *flag* ----- 
                    <enabled>false</enabled> ---- *drop* ----- 
  </option> 
 </Module> 
</ns2:createSession> 
</soap:Body> 

13.3 Lessons Learned  

The goal was to measure the latency of message transmission between the DMS and the 
client. To do this required the collection of two sets of data: 

1. Time of message transmission by the DMS 
2. Time of message reception by the client 

The latency is derived from two time values by subtracting the message transmission 
time from the reception time. Because these values must be collected by the DMS and not 
the client, the message reception value must be transmitted to the DMS by the client. 
Using the Reliable Messaging acknowledgement message sent by the client as a way to 
transport the timestamp from the client to the DMS was explored.  This solution required 
modification of how the client sends Reliable Messaging acknowledgement in a way that 
is not supported by the Reliable Messaging standard. It was determined that the Reliable 
Messaging standard should be left unaltered to prevent interoperability issues in the 
future.  To work around this, a solution is to move the responsibility of DMS – client 
latency calculation from the DMS, to the client. Because the receiving party has direct 
access to both the transmission and reception timestamp, it requires less actions to 
calculate a one-way latency value by the client hen the DMS. Once the client has logged 
latency values, it sends periodic reports to the Validation Module containing latency 
reports for logging by the DMS. 

Another challenge presented by the Latency Validation feature is the synchronization of 
system clocks between the client and the DMS. If the system clocks of both parties are 
not synchronized, then a measurement error will be introduced into the latency 
measurement. This error causes the latency value to be skewed by the amount of time 
difference between the two clocks. Use of the Network Time Protocol (NTP) could be a 
potential solution and should be explored in future work. 



OGC 12-163 

 75 
 

13.4 Future Work 

Future research efforts should include the development of Latency and Subscription 
Interval Validation features.  An outline of how those features can be effectively 
implemented is provided in the above Data Validation Scope of Work section. The 
lessons learned during researching a working Latency Validation feature is provided in 
the above Lessons Learned section.  The suggested implementations where developed 
from case studies performed by the DMS implementation team.   

14 Data Provenance 

The purpose of Data Provenance Module is to generate metadata that describes any 
changes to the information contained in a message made by the DMS before it is sent to 
the client.  

According to the OWS-9 RFQ Annex B, the following requirements have been identified 
for data provenance: 

 Investigate, develop, demonstrate, and document a recommended approach for 
using metadata at DMS to keep track of quality and provenance information 

 The DMS shall record relevant provenance information 

 The DMS should enable operators to configure what type or class of information 
will have provenance associated with it 

 The DMS shall provide access to recorded provenance data, or store it in the 
relevant registry (e.g. metadata registry). 

 The DMS coding schema shall comply with ISO19115/ISO19139, in line with the 
metadata representation of AIXM and WXXM 

 The DMS shall leverage and build on AIXM metadata profile currently in 
development with the Aviation Domain Working Group 

 Develop a proposed method to provide metadata that is compatible with 
AIXM/WXXM as well as ISO and OGC standards while satisfying the AATS 
interest of minimizing communications bandwidth 

14.1 Scope of Work 

The Data Provenance Module provides the aircraft client with provenance metadata 
allowing the aircraft client to determine the authoritativeness of the data.  Provenance 
metadata describes the source of the data and any alterations that have been made to the 
data.   The DMS tracks alterations to messages created by the Filtering Module by 
generating ISO19115 and ISO 19139 compliant provenance metadata that describes the 



OGC 12-163 

76  
 

alterations.  The provenance metadata is inserted into the SOAP message header so that 
the client receiving the altered dataset can determine the authoritativeness of the data.  

14.1.1 Provenance Tracking 

The purpose of the Data Provenance module is to generate provenance metadata based on 
the alterations made to message content made by the DMS Filtering Module. The 
information contained in the metadata is used by the client to determine the 
authoritativeness of the received message. If the received message is from an unapproved 
source or has been altered in a way that is not approved for use by the client, the message 
is ignored.  Additionally, provenance metadata can be centrally stored to provide a log 
that tracks the entities involved in the creation and altering of message transmitted to 
clients.  

14.1.2 Recommended Approach 

During session negotiation, a client configuring the Validity Policy in the DMS will 
specify whether or not the DMS is to perform Provenance Tracking (ON/OFF).  Once 
enabled, this module inserts provenance metadata into the SOAP headers of each 
message. Provenance metadata is generated using the ISO 19115 and ISO 19130 
standards as a common format.  ISO19115/19139 provenance metadata contain elements 
that describe the lineage of a dataset such as the originating source and alterations made. 
In this case, the source of the dataset is provided in the message received by the DMS. If 
the DMS receives a message that does not include source provenance metadata in the ISO 
19115/19139 format, a LI_Source (“Source Unknown”) metadata will be inserted into the 
SOAP message header by the Provenance Module.  To track these changes made by the 
DMS Filtering Module, the Provenance Module will generate a LI_ProcessStep metadata 
element.  The LI_ProcessStep metadata type is used to describe an alteration to the 
message (e.g. filtering by the DMS).  Once generated, the LI_ProcessStep() metadata is 
inserted into the message’s SOAP header and transmitted to the aircraft client. 

14.2 Implementation 

If enabled, the Provenance Module tracks the provenance of messages being sent to the 
client.  Incoming messages are parsed to identify the presence of LI_Source metadata in 
the SOAP message header. Messages containing LI_Source metadata, the metadata 
generated by the Provenance Module is added as a child of the LI_Source metadata. If the 
message SOAP header does not contain a LI_Source metadata, the Provenance Module 
adds a LE_Lineage with a LI_Source (“Source Unknown”) child to the SOAP message 
header.  The DMS generates LI_ProcessStep provenance metadata for messages that have 
their content altered by the Filtering Module. The LI_ProcessStep contains the XLST 
string used by the Filtering Module to alter message content.  Also included in the 
metadata is a plain text description of the filtering type (i.e. removed whitespace). The 
LI_ProcessStep metadata is then inserted into the message SOAP header as a child of the 
LI_Source metadata and the message is transmitted to the client.  



OGC 12-163 

 77 
 

<ns2:LI_Lineage> 
 <ns2:LI_ProcessStep id="PUBLISHER"> 
 ... 
 <ns2:description> 
     <ns3:CharacterString>publication of feature 
data</ns3:CharacterString> 
 </ns2:description> 
 ... 
 <ns2:CI_ResponsibleParty>         
     <ns2:organisationName>         
         <ns3:CharacterString>COMSOFT GmbH</ns3:CharacterString>   
     </ns2:organisationName> 
 ... 
 <ns2:LI_ProcessStep id="FILTER"> 
     <ns2:description> 
 ... 
 <ns2:CI_ResponsibleParty>               
        <ns2:organisationName> 
          <ns3:CharacterString>HarrisCorporation></ns3:CharacterString> 
        </ns2:organisationName> 
 ... 
 <ns2:description>           
    ... 
        &lt;!-- Strip white space from all elements --&gt;  
        &lt;!-- Copy the xmlover and perform further processing below  
        &lt;!-- Remove allgml namespace nodes --&gt;  
        &lt;!-- Remove all line breaks --&gt;  
        &lt;!-- Remove all self closing nodes--&gt; &  
        &lt;!-- Remove all empty nodes--&gt;  

14.3 Lessons Learned  

Standardization of the metadata format and which parties are responsible for providing 
specific metadata elements is important in building a complete and accurate provenance 
record. It is our recommendation that the system creating the original message be 
responsible for the generation of the LI_Source metadata element. All other parties 
involved with the handling or alteration of the message should then add LI_ProcessStep 
metadata elements under the LI_Source element. This will provide the client with the 
most complete description of the message provenance. 

14.4 Future Work 

The creation of a centralized provenance metadata storage database that would enable the 
tracking of message provenance by third party stakeholders was discussed during the 
OWS-9 development.  This method has many benefits including the reduction of SOAP 
message header size by only including a URL link the message provenance metadata 
instead of including the metadata directly in the header. The centralized metadata storage 
could also act as a living record, detailing the messages where received, and possible 
altered, by stakeholders.  The creation of this database will require close synchronization 
between stakeholders, but will benefit the end user greatly.  



OGC 12-163 

78  
 

15 DMS Metadata Provisioning 

According to the OWS-9 RFQ Annex B, the following requirements have been identified 
for metadata provisioning: 

 Investigate, test, demonstrate, and document the inclusion of arbitrary header and 
metadata fields in messages exchanged between DMS and client/dispatcher 

 Store information within fields to support data synchronization 

 Store information within fields to support validation 

 Store information within fields to support filtering 

 Store information within fields to support prioritization 

 Store information within fields to support security 

 Store information within fields to support authoritativeness 

 Store information within fields to support data link SLA provisioning 

15.1 Scope of Work 

Arbitrary inclusion of headers for messages exchanged between DMS and Client is 
achieved through the use of SOAP as the underlying protocol. This simplifies the 
specification, for instance for reliable communications, as standardized mechanisms, i.e. 
WS-ReliableMessaging can be leveraged for use by the DMS. 

15.1.1 Reliable Messaging Metadata 

The WS-ReliableMessaging metadata are defined in the schema located at the following 
URI: 

http://docs.oasis-open.org/ws-rx/wsrm/200608/wsrm-1.1-schema-200608.xsd  

Some message exchange examples following this schema is provided in Section 9.2.2. 

 

15.1.2 Validation Metadata 

Generation of metadata by the Validation Module occurs when a client has configured 
the Validation Module to flag non-valid messages before they are transmitted to the 
client. The metadata is inserted into the SOAP message headers for interception by the 
client.  Any example of the metadata date generated by the Validation Module is 
provided below: 



OGC 12-163 

 79 
 

<Valid>False</Valid> --- *Non-valid message metadata tag* 

 

15.1.3 Provenance Metadata 

The generation of provenance metadata by the Provenance Module follows the guidance 
of the ISO19115/19139 standard. An example of the metadata generated by the 
Provenance Module is given below: 

<ns2:LI_Lineage> 
 <ns2:LI_ProcessStep id="PUBLISHER"> 
 ... 
 <ns2:description> 
     <ns3:CharacterString>publication of feature 
data</ns3:CharacterString> 
 </ns2:description> 
 ... 
 <ns2:CI_ResponsibleParty>         
     <ns2:organisationName>         
         <ns3:CharacterString>COMSOFT GmbH</ns3:CharacterString>   
     </ns2:organisationName> 
 ... 
 <ns2:LI_ProcessStep id="FILTER"> 
     <ns2:description> 
 ... 
 <ns2:CI_ResponsibleParty>               
        <ns2:organisationName> 
          <ns3:CharacterString>HarrisCorporation></ns3:CharacterString> 
        </ns2:organisationName> 
 ... 
 <ns2:description>           
    ... 
        &lt;!-- Strip white space from all elements --&gt;  
        &lt;!-- Copy the xmlover and perform further processing below  
        &lt;!-- Remove allgml namespace nodes --&gt;  
        &lt;!-- Remove all line breaks --&gt;  
        &lt;!-- Remove all self closing nodes--&gt; &  
        &lt;!-- Remove all empty nodes--&gt;  

 

15.1.4 Filtering Metadata 

The DMS may proceed to the following actions that would require metadata provision: 

 Extraction 
 Densification 
 Provider selection 

Extraction and Densification may imply feature modifications; therefore the metadata 
associated may belong to provenance metadata. 



OGC 12-163 

80  
 

Regarding provider selection, the DMS shall be able to add metadata to the message, 
stating the list of initial providers in concurrence and the provider that was eventually 
selected based on the client’s choices. 

Those have not been implemented in OWS-9 and may could be considered for future 
work, if their relevance is confirmed. 

16 AIXM/WXXM Metadata Compliance 

The AIXM/WXXM Metadata Compliance is a requirement for the Provenance Tracking 
Module and the Operator Configuration Module. The provenance metadata generated by 
the Provenance Tracking Module and the Operator Configuration Module must conform 
to ISO 19115 and ISO 19139 requirements which is in line with the metadata 
representation of AIXM and WXXM. Developing the metadata generated by the 
Provenance Tracking Module and the Operator Configuration Module to be in line with 
the AIXM and WXXM metadata profile currently under development will allow for 
compatibly.  

17 Appendix: Systems Rules Model Analysis 

This section details each of the systems rules models and the analysis behind each of the 
requirements outlined in the RFQ Section 10 Appendix.  The basis of analysis is from an 
FAA SWIM (Harris NEMS) perspective as well as a SESAR SWIM perspective.  Harris 
services the FAA NAS SWIM program office through the deployment of the NAS 
Enterprise Messaging Service (NEMS).  The NEMS is the implementation of the SWIM 
enterprise service within the NAS. 

The SESAR SWIM perspective is represented by ATMOSPHERE and TriaGnoSys. 

17.1 SRM 10.1 – Maintain Data Synchronization between Ground and Aircraft Users 

Configuration Options  Context / Description / Rationale 

Send copies to the dispatch client of all 
data sent to the aircraft 

Ensures all parties receive the same data. 

Send the type or class of data sent to the 
aircraft to the dispatch client with sufficient 
information to enable the dispatch client to 
request the data. Could Be implemented by 
sending unique “hash tag---­‐like” metadata 
to the dispatch client of all the data sent to 
the aircraft. 

Minimizes bandwidth by sending only the 
types, classes, and metadata to the 
dispatch client. 

Send copies to the dispatch client of 
selected types or classes of data sent to the 

Enables the dispatch client to subscribe to 
copies of the data sent to the aircraft for 



OGC 12-163 

 81 
 

aircraft. discrete sets of data or data products, e.g. 
NOTAMs Or weather. 

 

17.2 SRM 10.2 – Perform Data Validation 

Metric  Definition(s) Requirements 

Timeliness #1 

 

Data is delivered 
within its valid 
timeframe 

 

DMS and EFB software shall evaluate 
message content for start and end 
date/times to determine whether the 
message data needs to be flagged when 
sent to the aircraft or presented to the 
user. 

Note – applying this evaluation at the 
aircraft will identify messages that are 
within valid time frame when transmitted 
but not when received at the aircraft. 

Software shall enable the user to set a 
parameter for acceptable range of 
variance from valid time frame for 
transmitting information to the aircraft. 

 Software shall set the Data Validation 
Data element appropriate valid time 
frame code as noted below: 

o Within valid time frame 

o Outside valid time frame 

 Software shall maintain percent of 
failures and reports via the 
Monitor/Report Network Performance 
function as a percent per 1,000 
messages:  

 1,000 minus # of out-of-valid time frame 
msgs 

Divided by 

1,000 



OGC 12-163 

82  
 

Timeliness #2 Data represents the 
most up-to-date 
information 

  DMS software shall track and 
reference all updates using the time 
they are issued (regardless of the 
effective time(s) of the changes) until 
the time of reception to identify the 
most up-to-date information. 

 DMS and EFB software shall transmit 
new or updated information to the 
cockpit as soon as it becomes available 
at the approved source. 

 User shall be enabled to set a parameter 
for acceptable range of variance from 
time for transmitting information to the 
aircraft as measured from the issue 
date/time of the message until received. 

 DMS software shall populate the Data 
Validation Data element code with 
appropriate timeliness factor code, as 
noted below: 

o Meets timeliness factor 

o Exceeds timeliness factor 

 The network performance metric shall 
be defined as communications 
performance for transmission of 
information from the data source to the 
cockpit. This performance metric will 
be defined by intended function and 
operational use. 

 Software shall determine whether 
messages meet currency time frame 
requirement as measured from issue 
date / time through delivery date / time 
to aircraft. Software shall maintain 
percent of failures and report via the 
Monitor/Report Network Performance 
function: 

 1,000 minus # of msgs not meeting 



OGC 12-163 

 83 
 

time frame 

Divided by 

1,000 

Timeliness #3 Subscribed update 
intervals are being 
complied with 

 Software shall monitor update intervals 
to ensure they are being complied with 
using transmission date time groups 
(DTGs) as the criteria for determining 
the actual intervals. 

 Software shall populate the Data 
Validation Data element code with 
appropriate timeliness factor code, as 
noted below: 

o Meets subscribed interval 

o Exceeds subscribed interval 

 User shall be enabled to set a parameter 
for acceptable range of variance from 
subscribed update intervals 

 Software maintains percent of failures 
and reports via the Monitor/Report 
Network Performance function: 

1,000 minus # of subscription intervals 
missed by more than __seconds 

Divided by 

1,000 

Lost Data -applies to 
all modes of 
operation 

 Broadcast 

 Demand 

 Contract 

Determine whether 
any messages or 
data sets were lost 

 DMS software shall evaluate message 
content and context to determine that a 
message has been lost, e.g., refers to 
prior content such as NOTAM, TFR 
that has not been received, and 
populates the lost data code in the Data 
Validation Data Set. 

 Software shall populate the Data 
Validation Data element code with 
appropriate lost data code, as noted 



OGC 12-163 

84  
 

below: 

o No lost data 

o Previous message not received 

 Software shall evaluate the frequency 
at which a message refers to prior 
content (e.g., NOTAM, SIGMET, TFR, 
etc.) that has not been received. 
Software maintains percent of failures 
and reports via the Monitor/Report 
Network Performance function: 

1,000minus # of lost messages/data sets 

Divided by 

1,000 

 

17.3 SRM 10.3 – Perform Data Filtering 

Configuration Options Context / Description / Rationale 
By message type or class of data Align with the Message Types from 

Populate Priority and Security Data Fields 

By issue time for types for data–range of 
parameters 

Range of parameters associated with the 
Message Types 

By effective time for types of data-range 
of parameters 

Range of parameters associated with the 
Message Types 

If multiple values are available, enable 
selection of average value, standard 
deviation value, range of values, preferred 
provider(s) 

For example, if multiple sensor sources are 
available and provided for an area, enable 
the user to select a means to reduce the 
data to a relevant value, e.g., multiple 
temperature sensors at an airport. 

Enable selection or input of a specific geo-
reference for sensor data 

For example, user might select RVR For 
the eastern---­‐most of two parallel runways 
because the swamp outside the airport 
tends to produce mist that reduces visibility 
for that runway. 



OGC 12-163 

 85 
 

By expiration time - Range of parameters Range of parameters associated with the 
Message Types 

Enable selection of any data within a geo-
referenced area, e.g. X miles either side of 
route and including vertical range for a 3-
D area 

The AOC can set this based on a pilot 
profile and can upload to the EFB. This 
geo-referenced area can also be pilot-
selectable. 

Enable selection of “Trend” For a specific 
event 

This rule allows an operator to select a data 
point, e.g. weather event, and indicate how 
much history of the event is desired for a 
trending display. 

 
17.4 SRM 10.4 – Manage Subscription and Data Request Configurations 

System Rule Context / Description / Rationale 
DMS and EFB systems shall contain 
configurable profiles for subscriptions and 
data requests that are managed by both the 
aircrew and the dispatcher 

Subscriptions have a couple of 
characteristics that have an impact: 

 They publish a complete stream of 
data. 

 They publish updates to a data set. 

In the latter case, the subscriber must 
perform a data request to ensure it has a 
current copy of the complete data set that 
can then be updated. The Profiles 
associated with this system rule enable the 
user to designate which subscriptions 
require a “pre---­‐load” Of the complete data 
set and then to request that data. 

Configuration profiles shall be capable of 
alignment with specific flight plans. 

Configuration profiles will be used 
repetitively for common routes. 

Users shall be able to store profiles keyed 
at least to flight or route and pilot. 

Configuration profiles will be used 
repetitively for common routes and pilots 
may have specific needs for specific data 
or different parameters, e.g., miles to either 
side of the route. 

Configuration profiles shall enable the 
user to plan deviations from a flight plan 
or establish ad hoc situations for obtaining 

As part of both pre-­‐flight and en route 
strategic planning, dispatchers and pilots 
will need to obtain data that supports these 



OGC 12-163 

86  
 

needed flight planning information. planning activities. 

Update interval timeframes shall be 
configurable by subscription, e.g., NAS 
program or other source of data 

The user will establish update intervals that 
support his or her need for frequency of 
data. 

Request-response configurations shall be 
enabled for those subscriptions that 
require a pre-­‐load of the data when 
updates only are issued with the 
subscription 

Data request-­‐response configurations are 
important because in many instances 
activation of a subscription only provides 
updates. In Those instances, activation of 
the subscription must also be accompanied 
for a data request to pre-­‐load a baseline of 
the data. 

User shall be able to select data sets that 
are not on the flight plan, e.g., select 
specific items or events, or expand the 
geospatial scope of the subscription. 

As part of both pre-flight and en route 
strategic planning, dispatchers and pilots 
will need to be obtain data that support 
these planning activities. 

Subscription parameters associated with a 
configuration profile shall be capable of 
being downloaded to an EFB. 

In consideration of aircrew workload, 
subscription profiles need to be pre-loaded 
into the EFB. 

 

The OWS-9 RFQ CFP Annex B System Rules Model (SRM) defines the following 
system rules for the Data Prioritization Module 

17.5 SRM 10.5 – Populate Priority and Security Data Fields 

Title System Rules  Context Description / 
Rationale Message 
Importance 

Message 
Importance / 
Priority 

 High-importance and short-to-expire 
messages shall be sent before low 
importance and long-to-expire 
messages. 

 Software shall evaluate message 
content to determine its priority and 
populate the appropriate field in the 
Data Validation Data Set: 

o Evaluate expiration time for 
less than specified number of 
minutes 

o Evaluate by Message Type to 
set priority 

In a bandwidth - restricted 
environment, it is important to 
identify messages that have 
greater priority based on their 
importance and type. 
 



OGC 12-163 

 87 
 

o Evaluate by request priority 
to set delivery priority 

Message 
Type 
 

 Software shall determine type of 
message from the header 
information or content and assign 
appropriate code as noted in the 
following examples: 

o Airport conditions, e.g., 
braking action, congestion 

o NAS Equipment Status 
o  NAVAID Status 
o  NOTAM 
o SAA Status / Schedule 
o Runway configuration data 
o Etc. 

In order to support the 
Message Importance / Priority 
metric, the types of messages 
need to be defined. 
 

Security 
Level 
 

 Software shall determine how data 
may be used, displayed, or 
retransmitted based on the terms of 
the data exchange agreement with 
the data provider 

 Software shall populate a security 
code in the appropriate field in the 
Data Validation Data set as noted in 
the following examples: 
o Encryption required 
o Company proprietary 
o Limited data redistribution 
o Classified – Secret 
o etc. 

 

The data provider may impose 
restrictions on the use and 
redistribution of data, aviation 
operators may impose 
limitations on distribution and 
use of their data and the 
operational environment may 
require additional security 
restrictions. 
 
This field may be populated by 
either the DMS or the aircraft: 
 

 DMS to accommodate the 
terms of its data 
distribution agreements or 
the need to safeguard 
company proprietary data 

 Aircraft primarily to 
safeguard company 
proprietary data being sent 
from the aircraft to the 
DMS and potentially to a 
NAS program. 

Data Link 
SLA 
 

 DMS software shall determine the 
data link that is being used to 
transmit the message and populate 
the field as noted in the following 
examples: 

o Vendor SLA1 

This code expresses the terms 
of the data link type that is 
associated with a specific 
message and represents the 
SLA level for the reliability, 
consistence, validity, etc. 



OGC 12-163 

88  
 

o Vendor SLA2 
o Vendor SLAn 

 Vendor SLA1 through n – indicates 
the established performance 
associated with specific transmission 
technologies that are being used to 
transmit data to and from the 
aircraft. 

metrics. This is a function of 
the technology and the 
associated negotiated SLA 
That is used for transmitting 
the message. 

 

17.6 SRM 10.6 – Data Provenance 

System Rule  Context / Description / Rationale 
The DMS software shall include metadata 
describing the authoritativeness of the 
source in messages sent to the aircraft 

This allows the onboard software to make 
intelligent decisions about how the data is 
presented to the flight crew (i.e., If the data 
is not sourced with authority, inform the 
crew in some manner). 

The DMS software shall provide a 
mechanism for recording provenance data. 

There is a need for historical recall of data 
and metadata sent and received from 
aircraft for many purposes (e.g., Accident 
investigation). 

The DMS provider shall establish a method 
for secure provenance between the NESG 
and the aircraft. 

This ensures all points on the length of the 
data exchange can trust that the data 
received continues to have integrity (i.e., 
lack of corruption intentional or 
accidental). Additionally this ensures that 
when there is a breakdown in integrity, it 
can be identified where it occurred.  
 
In this instance secure provenance refers to 
providing integrity and confidentiality 
guarantees to information requiring 
provenance. In other words, secure 
provenance means to ensure that the data 
cannot be altered, and users can trace who 
else has performed actions on the data. 

The DMS Provider shall enable operators 
to configure what type or class of 
information will have provenance 
associated with it. 

In a bandwidth intensive environment 
some operators may elect to conserve 
bandwidth by limiting the types and classes 
of data that has provenance associated with 
it. It should be noted that some types and 
classes of data may eventually become 
required by regulation for security and 
safety purposes. 

 
 

- end of document - 


