
 

Open Geospatial Consortium  
Approval Date: 2012-07-10 

Publication Date:  2012-07-12 

External identifier of this OGC® document: http://www.opengis.net/doc/IS/wcs-core-2.0.1 

Reference number of this Document: OGC 09-110r4 

Version: 2.0.1 

Category: OGC® Interface Standard 

Editor:  Peter Baumann 

OGC® WCS 2.0 Interface Standard- Core:  
Corrigendum 

 

 

Copyright © 2012 Open Geospatial Consortium. 
To obtain additional rights of use, visit http://www.opengeospatial.org/legal/. 

 

Warning 

This document is an OGC Member approved corrigendum to existing OGC standard. This 
document is available on a royalty free, non-discriminatory basis. Recipients of this document 
are invited to submit, with their comments, notification of any relevant patent rights of which 
they are aware and to provide supporting documentation. 

 

 

 

 

 

Document type: OGC® Interface Standard 
Document subtype: Corrigendum 
Document stage: Approved for public release 
Document language: English 
 



OGC 09-110r4 

ii Copyright © 2012 Open Geospatial Consortium. 
 

License Agreement 

Permission is hereby granted by the Open Geospatial Consortium, ("Licensor"), free of charge and subject to the terms set forth below, 
to any person obtaining a copy of this Intellectual Property and any associated documentation, to deal in the Intellectual Property 
without restriction (except as set forth below), including without limitation the rights to implement, use, copy, modify, merge, publish, 
distribute, and/or sublicense copies of the Intellectual Property, and to permit persons to whom the Intellectual Property is furnished to 
do so, provided that all copyright notices on the intellectual property are retained intact and that each person to whom the Intellectual 
Property is furnished agrees to the terms of this Agreement. 

If you modify the Intellectual Property, all copies of the modified Intellectual Property must include, in addition to the above copyright 
notice, a notice that the Intellectual Property includes modifications that have not been approved or adopted by LICENSOR. 

THIS LICENSE IS A COPYRIGHT LICENSE ONLY, AND DOES NOT CONVEY ANY RIGHTS UNDER ANY PATENTS THAT 
MAY BE IN FORCE ANYWHERE IN THE WORLD. 

THE INTELLECTUAL PROPERTY IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE, AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. THE COPYRIGHT HOLDER OR HOLDERS INCLUDED 
IN THIS NOTICE DO NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THE INTELLECTUAL PROPERTY WILL 
MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE INTELLECTUAL PROPERTY WILL BE 
UNINTERRUPTED OR ERROR FREE. ANY USE OF THE INTELLECTUAL PROPERTY SHALL BE MADE ENTIRELY AT 
THE USER’S OWN RISK. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY CONTRIBUTOR OF INTELLECTUAL 
PROPERTY RIGHTS TO THE INTELLECTUAL PROPERTY BE LIABLE FOR ANY CLAIM, OR ANY DIRECT, SPECIAL, 
INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM ANY ALLEGED 
INFRINGEMENT OR ANY LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
OR UNDER ANY OTHER LEGAL THEORY, ARISING OUT OF OR IN CONNECTION WITH THE IMPLEMENTATION, USE, 
COMMERCIALIZATION OR PERFORMANCE OF THIS INTELLECTUAL PROPERTY. 

This license is effective until terminated. You may terminate it at any time by destroying the Intellectual Property together with all 
copies in any form. The license will also terminate if you fail to comply with any term or condition of this Agreement. Except as pro-
vided in the following sentence, no such termination of this license shall require the termination of any third party end-user sublicense 
to the Intellectual Property which is in force as of the date of notice of such termination. In addition, should the Intellectual Property, or 
the operation of the Intellectual Property, infringe, or in LICENSOR’s sole opinion be likely to infringe, any patent, copyright, trade-
mark or other right of a third party, you agree that LICENSOR, in its sole discretion, may terminate this license without any compensa-
tion or liability to you, your licensees or any other party. You agree upon termination of any kind to destroy or cause to be destroyed the 
Intellectual Property together with all copies in any form, whether held by you or by any third party. 

Except as contained in this notice, the name of LICENSOR or of any other holder of a copyright in all or part of the Intellectual Proper-
ty shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Intellectual Property without prior 
written authorization of LICENSOR or such copyright holder. LICENSOR is and shall at all times be the sole entity that may authorize 
you or any third party to use certification marks, trademarks or other special designations to indicate compliance with any LICENSOR 
standards or specifications. 

This Agreement is governed by the laws of the Commonwealth of Massachusetts. The application to this Agreement of the United 
Nations Convention on Contracts for the International Sale of Goods is hereby expressly excluded. In the event any provision of this 
Agreement shall be deemed unenforceable, void or invalid, such provision shall be modified so as to make it valid and enforceable, 
and as so modified the entire Agreement shall remain in full force and effect. No decision, action or inaction by LICENSOR shall be 
construed to be a waiver of any rights or remedies available to it. 

None of the Intellectual Property or underlying information or technology may be downloaded or otherwise exported or reexported in 
violation of U.S. export laws and regulations. In addition, you are responsible for complying with any local laws in your jurisdiction 
which may impact your right to import, export or use the Intellectual Property, and you represent that you have complied with any 
regulations or registration procedures required by applicable law to make this license enforceable. 

 



OGC 09-110r4 

iii Copyright © 2012 Open Geospatial Consortium. 
 

Content Page 
4.1 coverage ...................................................................................................... 10 
4.2 GML coverage…. ........................................................................................ 10 
4.3 offered coverage .......................................................................................... 10 
4.4 (coverage) subsetting ................................................................................... 10 
4.5 (coverage) trimming .................................................................................... 10 
4.6 (coverage) slicing ......................................................................................... 10 
4.7 Native Format .............................................................................................. 11 
5.1 Use of term “coverage” ................................................................................ 11 
5.2 UML notation .............................................................................................. 11 
5.3 Data dictionary tables................................................................................... 11 
5.4 Namespace prefix conventions ..................................................................... 12 
5.5 XPath / Schematron notation ........................................................................ 12 
5.6 Multiple representations ............................................................................... 12 
6.1 Overview ..................................................................................................... 12 
6.2 OfferedCoverage .......................................................................................... 13 
6.3 Coverage ...................................................................................................... 14 
6.4 ServiceParameters ........................................................................................ 15 
6.5 ServiceMetadata........................................................................................... 16 
7.1 WCS operation types ................................................................................... 18 
7.2 WCS service handling package .................................................................... 19 
8.1 Overview ..................................................................................................... 20 
8.2 GetCapabilities operation ............................................................................. 20 

8.2.1 GetCapabilities request........................................................................... 20 
8.2.2 GetCapabilities response ........................................................................ 20 
8.2.3 Sample GetCapabilities request and response ......................................... 24 
8.2.4 GetCapabilities exceptions ..................................................................... 25 

8.3 DescribeCoverage operation ........................................................................ 25 
8.3.1 DescribeCoverage request ...................................................................... 26 
8.3.2 DescribeCoverage response .................................................................... 26 
8.3.3 DescribeCoverage exceptions ................................................................. 30 

8.4 GetCoverage operation................................................................................. 30 
8.4.1 GetCoverage request .............................................................................. 31 
8.4.2 GetCoverage response ............................................................................ 34 
8.4.3 GetCoverage exceptions ......................................................................... 38 

8.5 Information Coherence ................................................................................ 39 
9.1 Overview ..................................................................................................... 39 
9.2 Protocol binding .......................................................................................... 39 
9.3 Coverage encoding formats .......................................................................... 40 
A.1 Conformance Test Class: core ...................................................................... 42 

A.1.1 Coverage structure contains Envelope .................................................... 42 
A.1.2 Coverage structure contains srsName ..................................................... 42 
A.1.3 Coverage structure contains axisLabels .................................................. 42 
A.1.4 Coverage element name dictionary ......................................................... 43 
A.1.5 Coverage element name lookup .............................................................. 44 



OGC 09-110r4 

iv Copyright © 2012 Open Geospatial Consortium. 
 

A.1.6 ServiceMetadata structure ............................................................. 44 
A.1.7 GetCapabilities: Profile lists valid external conformance classes ...... 44 
A.1.8 GetCapabilities response contents: OperationsMetadata ......................... 45 
A.1.9 Formats supported .................................................................................. 45 
A.1.10 Request base .......................................................................................... 45 
A.1.11 Service name .......................................................................................... 45 
A.1.12 Version number...................................................................................... 46 
A.1.13 Correct GetCapabilities request structure ............................................... 46 
A.1.14 Correct GetCapabilities response structure ............................................. 46 
A.1.15 GetCapabilities response contents: service metadata .............................. 47 
A.1.16 GetCapabilities response contents: Coverage summary .......................... 47 
A.1.17 DescribeCoverage supported .................................................................. 47 
A.1.18 Correct DescribeCoverage request structure ........................................... 48 
A.1.19 Valid coverage identifiers in DescribeCoverage request ......................... 48 
A.1.20 Correct DescribeCoverage response structure ........................................ 48 
A.1.21 DescribeCoverage returns information on all coverages requested ......... 48 
A.1.22 Correct DescribeCoverage response contents ......................................... 49 
A.1.23 DescribeCoverage srsName value .......................................................... 49 
A.1.24 DescribeCoverage exceptions ................................................................. 50 
A.1.25 GetCoverage supported .......................................................................... 50 
A.1.26 GetCoverage request structure................................................................ 50 
A.1.27 GetCoverage request addresses existing coverage .................................. 51 
A.1.28 GetCoverage: acceptable format............................................................. 51 
A.1.29 GetCoverage: acceptable mediaType...................................................... 51 
A.1.30 GetCoverage request parameter dimension ........................................ 52 
A.1.31 No duplicate dimension subsetting in GetCoverage ................................ 52 
A.1.32 GetCoverage trimming within coverage limits ....................................... 53 
A.1.33 GetCoverage slicing within coverage limits ........................................... 53 
A.1.34 GetCoverage response structure ............................................................. 53 
A.1.35 Correct coverage representation in GetCoverage result .......................... 53 
A.1.36 Correct multipart coverage encoding in GetCoverage result ................... 54 
A.1.37 Correct coverage contents in GetCoverage result ................................... 54 
A.1.38 GetCoverage trimming operation ........................................................... 55 
A.1.39 GetCoverage slicing operation ............................................................... 55 
A.1.40 Dimension subsetting sequence invariance in GetCoverage .................... 56 
A.1.41 GetCoverage exceptions ......................................................................... 56 
A.1.42 Information coherence across request types ............................................ 56 
A.1.43 Protocol binding extensions.................................................................... 57 

Tables Page 
Table 1 — Namespace mappings............................................................................. 12 
Table 2 — WCS CoverageOfferings components ........................................ 13 

Table 3 — WCS WCS OfferedCoverage components ................................... 14 

Table 4 — WCS ServiceParameters components ....................................... 15 



OGC 09-110r4 

v Copyright © 2012 Open Geospatial Consortium. 
 

Table 5 — WCS CoverageSubtype components ............................................. 15 

Table 6 — WCS ServiceMetadata additional components ......................... 17 

Table 7 — WCS RequestBase components ....................................................... 19 

Table 8 — WCS GetCapabilities components ............................................. 20 

Table 9 — WCS Capabilities components ................................................... 21 

Table 10 — WCS CoverageSummary additional components  (shaded 
components originate from OWS Common) ................................................................... 23 

Table 11 — WCS DescribeCoverage components ........................................... 26 

Table 12 — WCS CoverageDescriptions components ................................. 28 

Table 13 — WCS CoverageDescription components ................................... 28 

Table 14 — WCS ServiceParameters components ........................................ 29 

Table 15 — Exception codes for DescribeCoverage operation ........................ 30 

Table 16 — WCS GetCoverage operation request............................................... 32 

Table 17 — WCS DimensionSubset structure .................................................. 33 

Table 18 — WCS DimensionTrim structure ....................................................... 33 

Table 19 — WCS DimensionSlice structure ..................................................... 34 

Table 20 — Exception codes for GetCoverage operation .................................... 38 

 



OGC 09-110r4 

vi Copyright © 2012 Open Geospatial Consortium. 
 

i. Preface 

This document specifies the service core of an OGC Web Coverage Service (WCS). As such, 
this standard is based on the GML Application Schema for Coverages [OGC 09-146r1], 
OWS Common [OGC 06-121r9], and OGC Abstract Topic 6 [OGC 07-011]. 

Suggested additions, changes, and comments on this draft document are welcome and en-
couraged. Such suggestions may be submitted by email message or by making suggested 
changes in an edited copy of this document. 

Attention is drawn to the possibility that some of the elements of this document may be the 
subject of patent rights. The Open Geospatial Consortium shall not be held responsible for 
identifying any or all such patent rights. 

Recipients of this document are requested to submit, with their comments, notification of any 
relevant patent claims or other intellectual property rights of which they may be aware that 
might be infringed by any implementation of the standard set forth in this document, and to 
provide supporting documentation. 

ii. Terms and definitions 

This document uses the standard terms defined in Subclause 5.3 of [OGC 06-121r9], which is 
based on the ISO/IEC Directives, Part 2, Rules for the structure and drafting of International 
Standards. In particular, the word “shall” (not “must”) is the verb form used to indicate a re-
quirement to be strictly followed to conform to this standard. 

iii. Submitting organizations 

The following organizations have submitted this Interface Specification to the Open Geospa-
tial Consortium, Inc.: 

• Jacobs University Bremen 
• rasdaman GmbH 
• National Center for Atmospheric Re-

search (NCAR) 
• Oracle USA 
• PCI Geomatics Inc. 
• ERDAS, Inc. 

• EOX IT Services GmbH 
• Spot Image 
• BAE Systems - C3I Systems 
• Natural Environment Research Council 

(NERC) 
• George Mason University 

 



 OGC 09-110r4 

 

vii Copyright © 2012 Open Geospatial Consortium. 
 

iv. Document Contributor Contact Points 

 

 

 

v. Revision history 
Date Release Author Paragraph 

modified 
Description 

2009-11-08 2.0.0 Peter Baumann, 
Andrei Aiordachioiae 

All Created 

2012-02-06 2.0.1 Peter Baumann, Jinsongdi 
Yu, Stephan Meissl 

Many corrigenda 

vi. Changes to the OGCÒÒ Abstract Specification 

The OGC® Abstract Specification does not require any changes to accommodate the technical 
contents of this (part of this) document. 

vii.  Future Work 

Based on this WCS core interface standard, several extensions are foreseen; see [6] for a ten-
tative list. 

 

Name Organization  
Peter Baumann Jacobs University Bremen, rasdaman GmbH 
Jinsongdi Yu Jacobs University Bremen 
Max Martinez ERDAS, Inc. 
Stephan Meissl EOX IT Services GmbH 



OGC 09-110r4 
 

viii Copyright © 2012 Open Geospatial Consortium. 
 

Introduction 

The OGC Web Coverage Service (WCS) supports electronic retrieval of geospatial data as 
"coverages" – that is, digital geospatial information representing space/time-varying phenom-
ena. 

This document specifies the WCS core; every implementation of a WCS shall adhere to this 
standard. This standard defines only basic requirements. Extensions to the core define exten-
sions to meet additional requirements, such as the response encoding. Indeed, additional ex-
tensions are required in order to completely specify a WCS for implementation. 

A WCS provides access to coverage data in forms that are useful for client-side rendering, as 
input into scientific models, and for other clients. The WCS may be compared to the OGC 
Web Feature Service (WFS) [4] and the Web Map Service (WMS) [5]. As WMS and WFS 
service instances, a WCS allows clients to choose portions of a server's information holdings 
based on spatial constraints and other query criteria. 

Unlike WMS, which returns spatial data to be portrayed as static maps (rendered as pictures 
by the server), the Web Coverage Service provides available data together with their detailed 
descriptions; defines a rich syntax for requests against these data; and returns data with its 
original semantics (instead of pictures) which may be interpreted, extrapolated, etc., and not 
just portrayed. 

Unlike WFS, which returns discrete geospatial features, the Web Coverage Service returns 
coverages representing space/time-varying phenomena that relate a spatio-temporal domain to 
a (possibly multidimensional) range of properties. As such, WCS focuses on coverages as a 
specialized class of features and, correspondingly, defines streamlined functionality. 

WCS 2.0 uses the coverage model of the GML Application Schema for Coverages [OGC 09-
146r1] which has been developed with the goal that coverages handled by a WCS can be 
more easily interchanged with other OGC services. WCS 2.0 supports all coverage types sup-
ported by said Application Schema; it is not constrained to quadrilateral grid coverages like 
previous WCS versions. 

Explanations and best practices for users and implementers of WCS 2.0 are provided in [6]. 

 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  9 
 

OGC® WCS 2.0 Interface Standard- Core 

1 Scope 

This document specifies how a Web Coverage Service (WCS) offers multi-dimensional cov-
erage data for access over the Internet. This document specifies a core set of requirements that 
a WCS implementation must fulfil. WCS extension standards add further functionality to this 
core; some of these are required in addition to the core to obtain a complete implementation. 
This document indicates which extensions, at a minimum, need to be considered in addition 
to this core to allow for a complete WCS implementation. 

This core does not prescribe support for any particular coverage encoding format. This also 
holds for GML as a coverage delivery format: while GML constitutes the canonical format 
for the definition of WCS, it is not required by this core that a concrete instance of a WCS 
service implements the GML coverage format. WCS extensions specifying use of data encod-
ing formats in the context of WCS are designed in a way that the GML coverage information 
contents specified in this core is consistent with the contents of an encoded coverage. 

2 Conformance 

Standardization target are WCS 2.0 implementations (currently: servers).  

This document establishes a single requirements class, core, of  
http://www.opengis.net/spec/WCS/2.0/req/core with a single pertaining conformance class, 
core, with URI http://www.opengis.net/spec/WCS/2.0/conf/core. Requirements and conform-
ance test URIs defined in this document are relative paths to be appended to 
http://www.opengis.net/spec/WCS/2.0/. 

Annex A lists the conformance tests which shall be exercised on any software artefact claim-
ing to implement an OGC WCS.  

3 Normative references 

This OGC WCS 2.0 Core specification consists of the present document and an XML Sche-
ma. The complete specification is identified by OGC URI 
http://www.opengis.net/spec/WCS/2.0, the document has OGC URI 
http://www.opengis.net/doc/IS/wcs-core-2.0.1.  

The complete specification is available for download from 
http://www.opengis.net/spec/WCS/2.0; additionally, the XML Schema is posted online at 
http://schemas.opengis.net/wcs/2.0/  as part of the OGC schema repository. In the event of a 
discrepancy between bundled and schema repository versions of the XML Schema files, the 
schema repository shall be considered authoritative. 

The following normative documents contain provisions that, through reference in this text, 
constitute provisions of this specification. For dated references, subsequent amendments to, 
or revisions of, any of these publications do not apply. For undated references, the latest edi-
tion of the normative document referred to applies. 



OGC 09-110r4 
 

10 Copyright © 2012 Open Geospatial Consortium. 
 

OGC 07-036, Geography Markup Language (GML) Encoding Standard, version 3.2.1  
Conformance classes used: 

• GML writing 

OGC 06-121r9, OGC Web Service Common Specification, version 2.0  
Conformance classes used: 

• GetCapabilities operation (Clause 7) 

OGC 09-146r2, OGC® GML Application Schema for Coverages, version 1.0 
Conformance classes used: 

• gml-coverage 

4 Terms and definitions 

For the purposes of this document, the terms and definitions given in the above references 
apply. In addition, the following terms and definitions apply. 

4.1 coverage 

feature that acts as a function to return values from its range for any direct position within its 
spatiotemporal domain [OGC 07-011] 

4.2 GML coverage…. 

feature which is a concrete subclass (specialization) of gmlcov:AbstractCoverage 

NOTE The term “GML coverage” does not imply that such a coverage always needs to be represent-
ed by a GML document; a coverage can well be represented by some well-known encoding different from 
GML as long as the data model contents is semantically equivalent. 

4.3 offered coverage 

extended →GML coverage structure, stored on a WCS server and accessible by clients via 
WCS operations, which additionally carries WCS service relevant information 

4.4 (coverage) subsetting 

operation on →GML coverages which, for a coverage provided, extracts part or all of its 
cell/value pairs and returns a →GML coverage containing these cell/value pairs 

4.5 (coverage) trimming 

→ GML coverage subsetting operation which returns a →coverage with the same number of 
dimensions as the input → GML coverage 

4.6 (coverage) slicing 

→ GML coverage subsetting operation which returns a → GML coverage with a reduced 
number of dimensions as compared to the input → GML coverage 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  11 
 

4.7 Native Format 

encoding format where, in a GetCoverage request, the range set values can be obtained unal-
tered  

5 Conventions 

5.1 Use of term “coverage” 

The definition of “coverage” in Subclause 4.1 is the generic one provided by Abstract Topic 6 
[OGC 07-011]. The term “GML coverage” is coined to denote the concrete data structure 
definition provided in the document on hand, relying on the GML Application Schema for 
Coverages [OGC 09-146r1] and SWE Common [OGC 08-094]. 

For the remainder of this document, “coverage” shall be understood as shorthand for “GML 
coverage” unless explicitly stated otherwise. 

5.2 UML notation 

Unified Modeling Language (UML) static structure diagrams appearing in this specification 
are used as described in Subclause 5.2 of OGC Web Service Common [OGC 06-121r9]. Fur-
ther, the following conventions hold: 

• UML elements having a package name of “OWS Common” are those defined in the 
UML model of OWS Common [OGC 06-121r9]. 

• UML elements having a package name of GML are those defined in the UML model 
of GML [OGC 07-036]. 

• UML elements having a package name of “SWE Common” are those defined in the 
UML model of SWE Common [OGC 08-094]. 

• UML elements having a package name of GMLCOV are those defined in the UML 
model of the GML Application Schema for Coverages [OGC 09-146r1]. 

• UML elements not qualified with a package name are those defined in this Standard. 

• UML data type Any is used here as an equivalence to XML’s xsd:any. 

5.3 Data dictionary tables 

The UML model data dictionary is specified herein in a series of tables. The contents of the 
columns in these tables are described in Subclause 5.5 of [OGC 06-121r9]. The contents of 
these data dictionary tables are normative, including any table footnotes. 

For the reader’s convenience, table rows describing inherited components are shaded. 



OGC 09-110r4 
 

12 Copyright © 2012 Open Geospatial Consortium. 
 

5.4 Namespace prefix conventions 

The following namespaces are used in this document. The prefix abbreviations used consti-
tute conventions used here, but are not normative. The namespaces to which the prefixes refer 
are normative, however. 
 

Table 1 — Namespace mappings 

Prefix Namespace URI Description 

xsd http://www.w3.org/2001/XMLSchema  XML Schema 

gml http://www.opengis.net/gml/3.2  GML 3.2.1 

gmlcov http://www.opengis.net/gmlcov/1.0 GML Application Schema for Coverages 
1.0 

wcs http://www.opengis.net/wcs/2.0 WCS 2.0 

 
5.5 XPath / Schematron notation 

Requirements on the contents of XML documents, derivation of complex entities, and the 
contents of WCS responses are specified herein using XPath 2.0 and Schematron. 

5.6 Multiple representations 

When multiple representations of the same information are given in a specification document, 
then reference to the XML schema takes precedence. 

6 WCS data model 

6.1 Overview 

This clause specifies the underlying coverage data model used in the later clauses of this 
standard. For reasons of extensibility and flexibility, many components of the core GML 
structure CoverageOfferings introduced in this standard are left underspecified (e.g., in 
terms of multiplicity of the elements or proper semantics and use of a component), sometimes 
even in cases where other standards applying (like OWS Common and SWE Common) leave 
such details open. Any item thus underspecified can be handled arbitrarily by implementa-
tions – among others, a server is free to deliver optional elements or not, and a client is free to 
ignore optional elements when present. Note, however, that WCS extensions may regulate 
further syntax and semantics of such underspecified items. 

A WCS server offers a – possibly empty – set of coverage objects. The offering of a WCS 
server is described by a single instance of type CoverageOfferings. The components of 
CoverageOfferings are as shown in Figure 1 and Table 2. 

NOTE For brevity, the substructures of domainSet, rangeType, and rangeSet have been 
omitted in Figure 1. OGC document [OGC 09-146r1] contains their complete definitions. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  13 
 

 

Figure 1 — WCS CoverageOfferings UML class diagram 

Table 2 — WCS CoverageOfferings components 

Name Definition Data type Multiplicity 
offered-
Coverage 

Set of coverages offered by 
this service 

OfferedCoverage zero or more  
(optional) 

service-
Metadata 

Information specific to this 
WCS service as a whole 

ServiceMetadata one  
(mandatory) 

 

6.2 OfferedCoverage 

An OfferedCoverage contains a coverage as specified in the GML Application Schema 
for Coverages [OGC 09-146r1] and the further standards referenced therein. The components 
of an OfferedCoverage are detailed in Figure 1 and Table 3. 



OGC 09-110r4 
 

14 Copyright © 2012 Open Geospatial Consortium. 
 

Table 3 — WCS WCS OfferedCoverage components 

Name Definition Data type Multiplicity 
coverage The coverage  GMLCOV::Coverage one  

(mandatory) 

service-
Parameters 

Service parameters individual 
for the coverage on hand 

ServiceParameters one  
(mandatory) 

 

Coverages are uniquely identified within a service through the GML::Id attribute of the root 
of the coverage component. The corresponding requirement is stated in Subclause 8.5. 

NOTE Class GMLCOV::AbstractCoverage inherits this attribute from class GML::Abs-
tractFeature according to GML [OGC 07-036] and the GML Application Schema for Coverages 
[OGC 09-146r1]. 

6.3 Coverage 

Coverages offered through a WCS need to fulfil particular requirements to allow for the WCS 
operations. Concretely, coordinate-based subsetting is based on the gml:Envelope struc-
ture of a coverage; to this end, this optional GML element is made mandatory in this Core. 
The gml:Envelope is part of the gml:boundedBy element which is defined in gml:Ab-
stractFeature, cf. [OGC 09-146r1]. As both DescribeCoverage and GetCoverage re-
sponses inherit from gml:AbstractFeature, the gml:boundedBy element can be pro-
vided by both. 

Requirement 1 /req/core/structure-boundedBy: 
The coverage element of every OfferedCoverage shall contain a valid 
gml:boundedBy element. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage 

NOTE Requirements on the contents of this element are specified in [OGC 07-036]. 

Additionally, this gml:boundedBy element shall specify an srsName attribute. 

Requirement 2 /req/core/structure-with-srsName: 
The srsName attribute in the gml:Envelope element of the gml:boundedBy element of 
the coverage element of an OfferedCoverage shall not be empty. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage 

NOTE Requirements on the contents of this attribute are specified in [OGC 07-036]. 

The gml:boundedBy element of a coverage shall specify an axisLabels attribute con-
taining the coverage’s dimension axis names. This is necessary as domain subsetting refers to 
them. 

Requirement 3 /req/core/structure-with-axisLabels: 
The axisLabels attribute in the gml:Envelope element of the gml:boundedBy ele-
ment of the coverage element of an OfferedCoverage shall not be empty. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  15 
 

NOTE Requirements on the contents of this attribute are specified in [OGC 07-036]. 

It follows the construction rules given in OWS Common [OGC 06-121r9]. 

6.4 ServiceParameters 

WCS ServiceParameters include coverage-specific information about functionality the 
server can offer on a particular coverage (as opposed to the overall service description pro-
vided by ServiceMetadata, see Subclause 6.5). The definition of ServiceParamet-
ers is shown in Figure 1 and Table 4 and Table 5. 

The Native Format of a coverage is a provider-chosen encoding format which allows to en-
code the coverage on hand in a way that all range set values can be obtained unaltered. 

The coverage subtype and coverage subtype parent together represent a list, modelled as re-
cursive elements, which establish the subtype path from the coverage’s most concrete type 
through its parent type, up to (but excluding) the AbstractCoverage type. 

Requirement 4 /req/core/coverageSubtype-content: 
The coverageSubtype and coverageSubtypeParent components in the ServicePara-
meters of an OfferedCoverage shall be constructed as given in Table 4 and Table 5 and 
the respective XML Schema being part of this standard.  

Table 4 — WCS ServiceParameters components 

Name Definition Data type Multiplicity 
native-
Format 

MIME type identifier of the 
coverage’s Native Format 

anyURI one 
(mandatory) 

coverage-
Subtype 

Coverage type name QName one 
(mandatory) 

coverage-
Subtype-
Parent 

Recursive list of the cover-
age’s supertypes 

CoverageSubtype
Parent 

zero or one 
(optional) 

extension Any kind of ancillary data Extension zero or one 
(optional) 

 

Table 5 — WCS CoverageSubtypeParent components 

Name Definition Data type Multiplicity 
coverage-
Subtype 

Coverage type name (i.e., 
element name of the root of 
the coverage) 

QName one 
(mandatory) 

coverage-
Subtype-
Parent 

Recursive list of the cover-
age’s supertypes 

CoverageSubtype
Parent 

zero or one 
(optional) 



OGC 09-110r4 
 

16 Copyright © 2012 Open Geospatial Consortium. 
 

Component CoverageSubtype characterizes the type of the OfferedCoverage by indi-
cating the coverage type, optionally together with (part or all of) its subtype hierarchy in the 
coverageSubtypeParent component. This information is delivered in GetCapabilities and De-
scribeCoverage to allow clients an estimation of the amount of data to be expected in the do-
main and range set.  

NOTE Both domain set and range set of a coverage can become quite large; which of these can be-
come unwieldy for complete transfer is determined by the type of the coverage. In gridded coverages, for 
example, the range set usually is the large part. In multi-solid coverages the domain set may become large 
while the range set usually will be small. 

Example For a coverage of type RectifiedGridCoverage of supertype Abstract-
DiscreteCoverage of supertype AbstractCoverage the following is an admissible cov-
erageSubtype hierarchy: 

<wcs:CoverageSummary> 
    <wcs:CoverageId>someCoverage</wcs:CoverageId> 
    <wcs:CoverageSubtype>RectifiedGridCoverage</wcs:CoverageSubtype> 
    <wcs:CoverageSubtypeParent> 
        <wcs:CoverageSubtype>AbstractDiscreteCoverage</wcs:CoverageSubtype> 
        <wcs:CoverageSubtypeParent> 
            <wcs:CoverageSubtype>AbstractCoverage</wcs:CoverageSubtype> 
        </wcs:CoverageSubtypeParent> 
    </wcs:CoverageSubtypeParent> 
</wcs:CoverageSummary> 

NOTE A hierarchy does not have to run up to AbstractCoverage, it can stop at any level 
earlier in the hierarchy. 

Normally, the coverage type will be given by one of the concrete (instantiatable) coverage 
types defined in the GML Application Schema for Coverages [OGC 09-146r1]. However, 
WCS extensions may derive further coverage types, and these are candidates for the Cover-
ageSubtype as well. 

Requirement 5 /req/core/coverageSubtype-reference: 
The content model definition of the coverage type referenced in the coverageSubtype in 
the ServiceParameters of an OfferedCoverage shall either be normatively refer-
enced by this WCS Core or by a WCS extension requirements class supported by the server. 

Component extension is provided as a canonical place for extensions to define coverage-
specific service quality information which is not part of Coverage. It follows the construc-
tion rules given in OWS Common [OGC 06-121r9].  

The ServiceParameters section is delivered – in different shapes – in both GetCapabili-
ties and DescribeCoverage response, but is not included in the coverage when delivered via 
GetCoverage. 

6.5 ServiceMetadata 

WCS ServiceMetadata provide service details plus information about the concrete ser-
vice capabilities of the WCS service as a whole (as opposed to coverage-specific Service-
Parameters, see Subclause 6.4). The WCS ServiceMetadata component extension 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  17 
 

defines a canonical place for additional information provided, e.g., by WCS extension stand-
ards. This structure is shown in Figure 1, Table 6, and Table 10. 

NOTE The definition of ServiceMetadata is local to WCS and has nothing to do with the 
OWS Common [OGC 06-121r9] element of the same name. 

Requirement 6 /req/core/serviceMetadata-structure: 
The ServiceMetadata structure shall adhere to Figure 2 and Table 6. 

  

Figure 2 — WCS ServiceMetadata UML class diagram 

Table 6 — WCS ServiceMetadata additional components 

Name Definition Data type Multiplicity 
formatSupported Coverage encoding formats 

supported by this server  
MimeType one or more 

(optional) 

extension Any kind of ancillary in-
formation about the service 

Extension zero or one 
(optional) 

 

Among other information, the URI identifiers of all conformance classes of OGC standards 
supported in addition to this WCS Core are published by the server. 

Requirement 7 /req/core/conformance-class-in-profile: 
Each element in the Profile list of the ServiceIdentification shall be the identifier 
of an OGC Interface Standard conformance class. 

NOTE Typically, these will be WCS extensions and application profiles. 

The operations metadata specified in OWS Common [OGC 06-121r9] describe the request 
types supported by the server. For the WCS Core, these are GetCapabilities, DescribeCover-
age, and GetCoverage; extensions may add further request types to this list. 

Requirement 8 /req/core/operationsMetadata: 
The OperationsMetadata component shall contain three Operation instances with 
case-sensitive name values “GetCapabilities”, “DescribeCoverage”, and “GetCoverage”, 
respectively. 



OGC 09-110r4 
 

18 Copyright © 2012 Open Geospatial Consortium. 
 

NOTE 1 Further operation instances can be present, this is only a minimum requirement of this WCS 
Core – extensions may add further request types. 

NOTE 2 See [OGC 06-121r9] for proper use of the many optional elements in an OWS Common  
OperationsMetadata structure. 

NOTE 3 OWS Common 2.0 [OGC 06-121r9], for historical reasons, uses different names for Service-
Metadata.  In said standard, Figure 3 uses “OWSServiceMetadata“, Table 8 uses "service metada-
ta document", and owsGetCapabilities.xsd uses "CapabilitiesBaseType". (The name Capab-
ilitiesBaseType is used because the XML encoding of service metadata is commonly named 
Capabilities, and the suffix "Base" is used because it does not include any Contents, since not 
all services have Contents).  Except for not including Contents in the XML Schema, all three names 
mean the same service metadata.   

The Capabilities document lists all coverage encoding formats, identified by their MIME 
type, in which the server on hand can return coverages. 

Requirement 9 /req/core/formats-supported: 
Each wcs:formatSupported elements shall hold one MIME type identifier. 

NOTE 1 MIME type identifiers should be those specified in some OGC coverage format encoding 
conformance class, although implementations may support additional formats.  

NOTE 2 Only those formats listed in the wcs:formatSupported element can effectively used 
by clients (see Requirement 28), independent from the format encoding extensions listed in the 
ows:Profile elements. 

7 WCS  service model 

7.1 WCS operation types 

The WCS interface herein specified supports retrieval of geospatial coverage data – that is, 
digital geospatial information representing space/time-varying phenomena [OGC 07-011]. To 
this end, the WCS interface specifies the following operations that may be invoked by a WCS 
client and performed by a WCS server: 

a) GetCapabilities – This operation allows a client to request information about the 
server’s capabilities and coverages offered (see Subclause 8.2). 

b) DescribeCoverage – This operation allows a client to request detailed metadata on 
selected coverages offered by a server (see Subclause 8.3). 

c) GetCoverage – This operation allows a client to request a coverage comprised of se-
lected range properties at a selected set of spatio-temporal locations, expedited in some 
coverage encoding format (see Subclause 8.4). 

NOTE Extensions to this WCS Core may add further operation types. 

A client should first, during a sequence of WCS requests, issue a GetCapabilities request to 
the server to obtain an up-to date listing of available data. Then, it may issue a DescribeCov-
erage request to find out more details about particular coverages offered. To retrieve a cover-
age or a part thereof, a client will issue a GetCoverage request.  

NOTE A WCS server can change its offering at any time, in particular: between a GetCapabilities, a 
subsequent DescribeCoverage, and a subsequent GetCoverage request. Such a change in the service of-
fering can be effected, e.g., through an intervening WCS-T [2] request. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  19 
 

7.2 WCS service handling package 

The DescribeCoverage and GetCoverage request types make use of the RequestBase 
structure which mimics the OWS Common [OGC 06-121r9] RequestBase data structure, 
with the following adaptations, as shown in in Figure 3 and Table 7: 

• Attributes service contains the WCS service name, which is fixed to the string 
“WCS”. 

• Attributes version contains the WCS version number, which is fixed to the string 
“2.0.1”. 

• Extension is a placeholder for further request parameters defined by WCS exten-
sion standards. 

  

Figure 3 — WCS RequestBase data structure UML class diagram 

Table 7 — WCS RequestBase components 

Name Definition Data type Multiplicity 
service Service name String,  

fixed to “WCS” 
one  

(mandatory) 

version  Coverage identifiers String, 
fixed to “2.0.1” 

one  
or more 

(mandatory) 

extension Any ancillary information to be 
sent from client to server 

Any zero or more 
(optional) 

 

Requirement 10 /req/core/requestbase: 
All WCS requests, except GetCapabilities, shall use a data structure which is a subtype of 
RequestBase. 

NOTE This applies not only to the request types in the Core, but to any request type supported by the 
service on hand. 

Requirement 11 /req/core/service-name: 
For all WCS request types, the request service parameter shall have a fixed value of 
“WCS”. 



OGC 09-110r4 
 

20 Copyright © 2012 Open Geospatial Consortium. 
 

Requirement 12 /req/core/version-number: 
For all WCS request types, the request version parameter shall have a fixed value of 
“2.0.1”. 

8 WCS operations 

8.1 Overview 

In this Clause, the WCS core operations GetCapabilities, DescribeCoverage, and GetCover-
age are specified. Their definitions are based on the GML structure specified in Clause 6. 

8.2 GetCapabilities operation 

A GetCapabilities operation, as required by OWS Common [OGC 06-121r9], allows a WCS 
client to retrieve service and coverage metadata offered by a WCS server. 

8.2.1 GetCapabilities request 

Requirement 13 /req/core/getCapabilities: 
A GetCapabilities request shall consist of a GetCapabilities structure as defined in 
Figure 4 and Table 8. 

 

Figure 4 — WCS GetCapabilities operation request UML class diagram 

Table 8 — WCS GetCapabilities components 

Name Definition Data type Multiplicity 
service Service name String,  

fixed to “WCS” 
one  

(mandatory) 

 

8.2.2 GetCapabilities response 

The GetCapabilities response document consists of a service metadata section and an optional 
contents section. Service metadata are those defined in the serviceMetadata component 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  21 
 

of the server’s coverage offering. The contents section delivers information about the cover-
age offering of the server. Figure 5 and Table 9 show this structure. 

Requirement 14 /req/core/wcsServiceMetadata-structure: 
The response to a successful GetCapabilities request shall consist of a Capabilities 
structure as defined in Figure 5, Table 9, Figure 6, and Table 10. 

 

 

Figure 5 — WCS Capabilities UML class diagram 

Table 9 — WCS Capabilities components 
Name Definition Data type Multiplicity 

service-
Metadata 

Service metadata and func-
tionality specific information 

ServiceMetadata one 
(mandatory) 

contents Information about coverages 
offered by this service 

Contents zero or one 
(optional) 

 

The Contents section provides details about the coverages offered by the service. Its struc-
ture is derived from the Contents definition in OWS Common [OGC 06-121r9] along the 
mechanism prescribed there: 



OGC 09-110r4 
 

22 Copyright © 2012 Open Geospatial Consortium. 
 

 

  

Figure 6 — WCS Contents and CoverageSummary UML class diagram 

a) DatasetSummary is renamed to CoverageSummary. 

b) This CoverageSummary is extended (over DatasetSummary) with two addition-
nal components: coverageId for the coverage identification and the coverage-
Subtype/coverageSubtypeParent for unambiguously describing the coverage’s 
type. 

c) The DatasetSummary attribute identifier is omitted (ie, set to cardinality zero 
in the XML Schema). Identification of items (i.e., coverages) offered is done through 
coverageId instead (see Figure 6 and Table 10). 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  23 
 

Table 10 — WCS CoverageSummary additional components  
(shaded components originate from OWS Common) 

Name Definition Data type Multiplicity 

coverageId Identifier of a coverage of-
fered by the service on hand 

NCName one 
(mandatory) 

coverage-
Subtype 

Type name of the coverage 
on hand 

QName one 
(mandatory) 

coverage-
Subtype-
Parent 

Recursive list of the cover-
age’s supertypes 

CoverageSubtype-
Parent 

zero or one 
(optional) 

extension Further metadata Extension zero or one 
(optional) 

wgs84-
BoundingBox  

 

Minimum bounding rectangle 
surrounding dataset, using 
WGS 84 CRS with decimal 
degrees and longitude before 
latitude 

OWS Common:: 
WGS84BoundingBox 

zero or more  
(optional) 

boundingBox  

 

Minimum bounding rectangle 
surrounding dataset, in avail-
able CRS 

OWS Common:: 
BoundingBox 

zero or more  
(optional) 

metadata Reference to more metadata 
about this dataset 

OWS Common:: 
Metadata 

zero or one  
(optional) 

 

NOTE OWS Common [OGC 06-121r9] Table 21 footnotes contain further normative rules for wgs-
84BoundingBox and boundingBox. See OWS Common [OGC 06-121r9] for more details on 
the proper use of the many optional elements in an OWS Common Contents structure. 

Requirement 15 /req/core/wcsServiceMetadata-contents: 
If present in the response to a successful GetCapabilities request, the Contents section 
components, where present, shall be populated using the semantics specified by OWS 
Common [OGC 06-121r9]. 
Dependency: [OGC 06-121r9] Clause 7 (http://www.opengis.net/doc/OWS/2.0/clause/7) 

Whether  a Contents section is provided in the response is up to the server.  If it is provid-
ed then all coverage identifiers reported shall be valid: 

Requirement 16  /req/core/coverageSummary: 
In the response to a successful GetCapabilities request containing a CoverageSummary 
section, each coverage identifier listed shall refer to a coverage offered by the server. 

NOTE There may be coverages which are not reported via GetCapabilities, but nevertheless accessi-
ble through DescribeCoverage and GetCoverage. 



OGC 09-110r4 
 

24 Copyright © 2012 Open Geospatial Consortium. 
 

8.2.3 Sample GetCapabilities request and response 

Example A GetCapabilities request may look like this: 
  http://www.acme.com/wcs?SERVICE=WCS 
   &ACCEPTVERSIONS=2.0.1 
   &REQUEST=GETCAPABILITIES 

Example The response to a valid GetCapabilities may look like this: 

<?xml version="1.0" encoding="UTF-8"?> 
<wcs:Capabilities  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' 
   xmlns:ows='http://www.opengis.net/ows/2.0' 
   xmlns:wcs='http://www.opengis.net/wcs/2.0' 
   xmlns:gml='http://www.opengis.net/gml/3.2' 
   xmlns='http://www.opengis.net/ows/2.0' 
   xmlns:xlink='http://www.w3.org/1999/xlink' 
   xsi:schemaLocation='www.opengis.net/wcs/2.0 http://schemas.opengis.net/wcs/2.0/wcsAll.xsd' 
   version="2.0.1"> 
    <ServiceIdentification> 
        <Title>rasdaman</Title> 
        <Abstract>WCS Server developed at Jacobs University</Abstract> 
        <ServiceType>OGC WCS</ServiceType> 
        <ServiceTypeVersion>2.0.1</ServiceTypeVersion> 
        <Profile> 
            http://www.opengis.net/spec/WCS/2.0/conf/core 
        </Profile> 
        <Profile> 
            http://www.opengis.net/spec/WCS_service-model_processing/1.1/conf/processing 
        </Profile> 
        <Profile> 
            http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0/conf/get-kvp 
        </Profile> 
        <Profile> 
            http://www.opengis.net/spec/WCS_coverage-encoding_netcdf/1.0/conf/netcdf 
        </Profile> 
    </ServiceIdentification> 
    <ServiceProvider> 
        <ProviderName>Jacobs University Bremen</ProviderName> 
        <ProviderSite xlink:href="http://www.jacobs-university.de/"/> 
        <ServiceContact> 
            <IndividualName>Andrei Aiordachioaie</IndividualName> 
            <PositionName>Developer</PositionName> 
            <ContactInfo> 
                <Phone> 
                    <Voice></Voice> 
                </Phone> 
            </ContactInfo> 
        </ServiceContact> 
    </ServiceProvider> 
    <OperationsMetadata> 
        <Operation name="GetCapabilities"> 
            <DCP> 
                <HTTP> 
                    <Get xlink:href="http://server:port/GetCapabilitiesURL"/> 
                </HTTP> 
            </DCP> 
        </Operation> 
        <Operation name="DescribeCoverage"> 
            <DCP> 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  25 
 

                <HTTP> 
                    <Get xlink:href="http://server:port/DescribeCoverageURL"/> 
                </HTTP> 
            </DCP> 
        </Operation> 
        <Operation name="GetCoverage"> 
            <DCP> 
                <HTTP> 
                    <Get xlink:href="http://server:port/GetCoverageURL"/> 
                </HTTP> 
            </DCP> 
        </Operation> 
    </OperationsMetadata> 
   <wcs:ServiceMetadata> 
       <wcs:formatSupported>image/tiff</wcs:formatSupported> 
   </wcs:ServiceMetadata> 
    <wcs:Contents> 
        <wcs:CoverageSummary> 
            <wcs:CoverageId>C0001</wcs:CoverageId /> 
            <wcs:CoverageSubtype>GridCoverage</wcs:CoverageSubtype> 
        </wcs:CoverageSummary> 
        <wcs:CoverageSummary> 
            <wcs:CoverageId>C0002</wcs:CoverageId /> 
            <wcs:CoverageSubtype>MultiPointCoverage</wcs:CoverageSubtype> 
        </wcs:CoverageSummary> 
        <wcs:CoverageSummary> 
            <wcs:CoverageId>C0003</wcs:CoverageId /> 
            <wcs:CoverageSubtype>MultiCurveCoverage</wcs:CoverageSubtype> 
        </wcs:CoverageSummary> 
        <wcs:CoverageSummary> 
            <wcs:CoverageId>C0004</wcs:CoverageId /> 
            <wcs:CoverageSubtype>MultiSurfaceCoverage</wcs:CoverageSubtype> 
        </wcs:CoverageSummary> 
        <wcs:CoverageSummary> 
            <wcs:CoverageId>C0005</wcs:CoverageId /> 
            <wcs:CoverageSubtype>MultiSolidCoverage</wcs:CoverageSubtype> 
        </wcs:CoverageSummary> 
    </wcs:Contents> 
</wcs:Capabilities> 

8.2.4 GetCapabilities exceptions 

When a WCS server encounters an error while performing a GetCapabilities operation, it 
shall return an exception report message as set forth in Subclause 7.4.1 of [OGC 06-121r9]. 

8.3 DescribeCoverage operation 

A DescribeCoverage request provides a list of coverage identifiers and prompts the server to 
return, for each identifier, a description of the corresponding coverage. 

NOTE A GetCapabilities request allows retrieval of the identifiers of coverage objects currently 
offered by the WCS service. However, a client is not required to retrieve identifiers via a GetCapabilities 
request.  Alternative means of retrieving these identifiers, not defined in this standard, are allowed. 

Requirement 17 /req/core/describeCoverage: 
Every WCS server shall offer the DescribeCoverage operation. 



OGC 09-110r4 
 

26 Copyright © 2012 Open Geospatial Consortium. 
 

8.3.1 DescribeCoverage request  

The DescribeCoverage request structure is derived from RequestBase, extended with a 
non-empty list of coverage identifiers. This structure is shown in 7 and Table 11. 

Requirement 18 /req/core/describeCoverage-request-structure: 
A DescribeCoverage request shall consist of a data structure as defined in 7 and Table 11. 

The concrete representation of this structure depends on the protocol binding chosen. 

Requirement 19 /req/core/describeCoverage-valid-identifier: 
Each coverage identifier in the list submitted in a DescribeCoverage request shall identify an 
OfferedCoverage object available on the server addressed. 

8.3.2 DescribeCoverage response 

The response to a successful DescribeCoverage request contains a list of coverage metadata, 
one for each coverage identifier passed in the request. 

Requirement 20 /req/core/describeCoverage-response-structure: 
The response to a successful DescribeCoverage request shall consist of a CoverageDe-
scriptions element as described in Figure 8, Table 12, Table 13, and Table 14.  

  
Figure 7 — WCS DescribeCoverage operation request UML class diagram 

Table 11 — WCS DescribeCoverage components 

Name Definition Data type Multiplicity 
service Service identifier String,  

fixed to “WCS” 
one 

(mandatory) 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  27 
 

version WCS service version 
indicator 

String,  
fixed to a pattern of three 
dot-separated decimal digits 

one 
(mandatory) 

extension Any ancillary information 
to be sent from client to 
server 

Extension zero or one 
(optional) 

coverageId  Coverage identifiers NCName one or more  
(mandatory) 

 

Requirement 21 /req/core/describeCoverage-response-list-size: 
The response to a successful DescribeCoverage request with n coverage identifiers shall 
contain a CoverageDescriptions element consisting of n CoverageDescription 
items as specified in Figure 8 and Table 12. 

NOTE For brevity, the substructures of domainSet and rangeType have been omitted in 
Figure 8. OGC document [OGC 09-146r1] contains their complete definitions. 

  

Figure 8 — WCS CoverageDescriptions UML class diagram 

Table 12 lists the components of a CoverageDescriptions list, Table 13 those of a sin-
gle CoverageDescription. 



OGC 09-110r4 
 

28 Copyright © 2012 Open Geospatial Consortium. 
 

Table 12 — WCS CoverageDescriptions components 

Name Definition Data type Multiplicity 
coverage-
Description 

description of a coverage Coverage-
Description 

zero or more  
(mandatory) 

 

NOTE While an empty list of coverage descriptions cannot occur in the context of the De-
scribeCoverage request due to Requirement 18, this data structure is also used in different 
contexts by other specifications of the WCS family where zero elements can be a valid result 
– hence, it is defined as being able to be empty. 

Table 13 — WCS CoverageDescription components 

Name Definition Data type Multiplicity 
coverageId Identifier of the coverage 

described 
NCName one 

(mandatory) 
coverage-
Function 

GML 3.2.1 coverage func-
tion to describe how range 
values at coverage locations 
can be obtained 

GML:: 
CoverageFunction 

zero or one  
(optional) 

domainSet Domain description of this 
coverage 

GML::DomainSet one  
(mandatory) 

rangeType Range structure description 
of this coverage 

SWE Common:: 
DataRecord 

one  
(mandatory) 

service-
Parameters 

Service-specific parameters 
of this coverage 

Service-
Parameters 

one  
(mandatory) 

extension Application specific metada-
ta 

Extension zero or more  
(optional) 

 

Requirement 22 /req/core/describeCoverage-response-contents: 
The response to a successful DescribeCoverage request containing n identifiers id1, …, idn 
shall contain, for each identifier idi passed (1≤i≤n), a wcs:coverageDescription 
consisting of the metadata of the coverage identified by idi, that is: the complete 
wcs:CoverageOffering minus the coverage rangeSet. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage 

NOTE 1 GML [OGC 07-036] allows, among others, the domain set of a coverage to be referenced 
externally, using xlink:href. This feature may be useful when the coverage domain set becomes 
unwieldy in size, which can occur particularly with multi-point/curve/surface/ solid-coverages. 

NOTE 2 While Requirement 19 does not exclude duplicate coverage identifiers the resulting descrip-
tion list in such a situation might not always look as naively expected. For example, a request with identi-
fiers (1,1,2) can yield a coverage description sequence (1,2,2) which is valid. 

Requirement 23  /req/core/describeCoverage-response-srsName: 
If a geometric or temporal object in the domainSet of a coverageDescription specif-



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  29 
 

ies an srsName attribute, the value of this attribute shall be identical to the srsName 
attribute of the boundedBy element of the containing coverageDescription. 

Table 14 — WCS ServiceParameters components 

Name Definition Data type Multiplicity 
coverage-
Subtype 

Type name of the coverage 
on hand 

QName one 
(mandatory) 

coverage-
Subtype-
Parent 

Recursive list of the cover-
age’s supertypes 

CoverageSubtype-
Parent 

zero or one 
(optional) 

native-
Format 

MIME type identifier of the 
coverage’s Native Format 

anyURI one 
(mandatory) 

extension Any ancillary information to 
be sent from client to server 

Extension zero or one 
(optional) 

 

Example The response to a valid DescribeCoverage request for coverage with id C0001 might be: 

<?xml version="1.0" encoding="UTF-8"?> 
<wcs:CoverageDescriptions  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' 
    xmlns='http://www.opengis.net/gml/3.2' 
    xmlns:gml='http://www.opengis.net/gml/3.2' 
    xmlns:gmlcov='http://www.opengis.net/gmlcov/1.0' 
    xmlns:swe='http://www.opengis.net/swe/2.0' 
    xsi:schemaLocation='http://schemas.opengis.net/swe/2.0 
        http://schemas.opengis.net/sweCommon/2.0/swe.xsd 
        http://www.opengis.net/wcs/2.0 http://www.opengis.net/wcs/2.0/wcsAll.xsd' 
    xmlns:wcs='http://www.opengis.net/wcs/2.0'> 
    <wcs:CoverageDescription gml:id="CD0001"> 
        <gml:boundedBy> 
            <gml:Envelope srsName="http://www.opengis.net/def/crs/EPSG/0/4326" 
                axisLabels="Lat Long" uomLabels="deg deg" srsDimension="2">  
                <gml:lowerCorner>1 1</gml:lowerCorner> 
                <gml:upperCorner>5 3</gml:upperCorner> 
            </gml:Envelope> 
        </gml:boundedBy> 
        <wcs:CoverageId>C0001</wcs:CoverageId/> 
        <domainSet> 
            <Grid gml:id="gr0001_C0001" dimension="2"> 
                <limits> 
                    <GridEnvelope><!-- This is a 5-by-3 matrix --> 
                        <low>1 1</low> 
                        <high>5 3</high> 
                    </GridEnvelope> 
                </limits> 
                <axisLabels>Lat Long</axisLabels> 
            </Grid> 
        </domainSet> 
        <gmlcov:rangeType> 
            <swe:DataRecord> 
                <swe:field name="singleBand"> 
                   <swe:Quantity definition="http://opengis.net/def/property/OGC/0/Radiance"> 
                           <swe:description>Panchromatic Channel</swe:description> 
                           <swe:uom code="W/cm2"/> 



OGC 09-110r4 
 

30 Copyright © 2012 Open Geospatial Consortium. 
 

                           <swe:constraint> 
                               <swe:AllowedValues> 
                                   <swe:interval>0 255</swe:interval> 
                                   <swe:significantFigures>3</swe:significantFigures> 
                               </swe:AllowedValues> 
                           </swe:constraint> 
                       </swe:Quantity> 
                </swe:field> 
            </swe:DataRecord> 
        </gmlcov:rangeType> 
        <wcs:ServiceParameters> 
            <wcs:CoverageSubtype>GridCoverage</wcs:CoverageSubtype> 
            <wcs:nativeFormat>image/tiff</wcs: nativeFormat> 
        </wcs:ServiceParameters> 
    </wcs:CoverageDescription> 
</wcs:CoverageDescriptions> 
 

8.3.3 DescribeCoverage exceptions 

Requirement 24 /req/core/describeCoverage-exceptions: 
When a WCS server encounters an error while performing a DescribeCoverage operation it 
shall return an exception report message constructed in accordance with Table 15 and chosen 
as follows: 
- if the error occurs while performing some extension functionality:  
 an exception as specified by the respective extension; 
- otherwise, if an error occurs which is described in column “meaning of exception 
 code” in Table 15:  
 the corresponding exception as listed in Table 15; 
- otherwise:  
 an exception as specified in Clause 8 of [OGC 06-121r9]. 
Dependency: [OGC 06-121r9] Clause 8 (http://www.opengis.net/doc/OWS/2.0/clause/8) 

Table 15 — Exception codes for DescribeCoverage operation 

exceptionCode 
value 

HTTP 
code 

Meaning of exception code locator value 

NoSuchCoverage 404 One of the identifiers passed does not 
match with any of the coverages 
offered by this server 

list of violating cov-
erage identifiers 

emptyCoverageId-
List  

404 An empty list of identifiers was 
passed as input argument, while at 
least one identifier is required 

coverageId 

 

8.4 GetCoverage operation 

A GetCoverage request prompts a WCS service to process a particular coverage selected 
from the service’s offering and return a derived coverage. The WCS Core standard defines 
the domain subsetting operation which delivers all data from a coverage inside a specified 
request envelope (“bounding box”), relative to the coverage’s envelope – more precisely, the 
intersection of the request envelope with the coverage envelope.  

Requirement 25 /req/core/getCoverage: 
Every WCS implementation shall support the GetCoverage operation. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  31 
 

Domain subsetting is subdivided into trimming and slicing. A trim operation identifies a di-
mension and a lower and upper bound (which both must lie inside the coverage’s domain) 
and delivers a coverage whose domain, in the dimension specified, is reduced to these new, 
narrower limits. The result coverage’s dimension is identical to that of the input coverage. 

A domain slice operation receives a dimension and a position (which must lie inside the cov-
erage’s domain) and delivers a coverage which is a slice of the offered coverage obtained at 
the cutting position provided. The dimension of the result coverage is reduced by one as 
compared to the original coverage.  

Both trimming and slicing can be combined arbitrarily in a request and on as many dimen-
sions as desired. However, per request at most one operation can be applied per dimension. 

8.4.1 GetCoverage request 

Requirement 26 /req/core/getCoverage-request-structure: 
A GetCoverage request shall consist of a structure as defined in Figure 9, Table 16, Table 17, 
Table 18, and Table 19. 
Dependency: [OGC 06-121r9] Clause 7 (http://www.opengis.net/doc/OWS/2.0/clause/7) 

 

Figure 9 — WCS GetCoverage operation request UML class diagram 



OGC 09-110r4 
 

32 Copyright © 2012 Open Geospatial Consortium. 
 

Table 16 — WCS GetCoverage operation request 

Name Definition Data type Multiplicity 
service Service identifier String,  

fixed to “WCS” 
one 

(mandatory) 

version WCS service version indi-
cator 

String,  
fixed to a pattern of three 
dot-separated decimal dig-
its 

one 
(mandatory) 

extension Any ancillary information 
to be sent from client to 
server 

Any  
(this mimics the XML 
wcs:Extension type 
encapsulating XML 
<any> elements) 

zero or one 
(optional) 

coverageId  Identifier of coverage evalu-
ated 

NCName one  
(mandatory) 

format MIME type identifier of the 
format in which the coverage 
returned is encoded 

anyURI zero or one 
(optional) 

mediaType If present, enforces a multi-
part encoding 

anyURI, 
fixed to “multipart/related” 

zero or one 
(optional) 

dimension-
Subset 

Subsetting specifications, one 
per subsetting dimension 

DimensionSubset  zero or more  
(optional) 

 

Requirement 27 /req/core/getCoverage-request-valid-identifier: 
The coverageId parameter value in a GetCoverage request shall be equal to the identifier 
of one of the coverages offered by the server addressed. 

The encoding format in which the coverage will be returned is specified by the combination 
of format and mediaType parameter. Admissible values (i.e, formats supported) are those 
listed in the server’s Capabilities document. Default is the coverage’s Native Format. 

Requirement 28 /req/core/getCoverage-acceptable-format: 
If a GetCoverage request contains a format parameter then this parameter shall contain a 
MIME type identifier occurring in some wcs:formatSupported element of the response 
to a successful GetCapabilities request to this server. 

NOTE The default format for the coverage response is the coverage’s Native Format. 

Requirement 29 /req/core/getCoverage-acceptable-mediaType: 
If a GetCoverage request contains a mediaType parameter then this parameter shall contain 
a MIME type identifier of fixed value “multipart/related”. 

The dimensionSubset structure consists of a set of subsetting specifications for the cov-
erage’s dimensions as described in Table 17. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  33 
 

Table 17 — WCS DimensionSubset structure 

Name Definition Data type Multiplicity 
dimension Name of dimension along which to subset NCName one  

(mandatory) 
 

Subsetting in this Core is evaluated against the gml:Envelope element contained in the 
boundedBy element of the coverage addressed. No CRS parameter is foreseen in the Core 
GetCoverage request; subsetting coordinates are always interpreted as being relative to the 
CRS in which the gml:Envelope coordinates are expressed, as listed in its srsName 
attribute (“Native CRS” of the coverage).  

NOTE A CRS is always present in a coverage as per Requirement 2. 

Subsetting dimension names refer to the coverage’s dimension names as listed in the 
gml:SRSInformationGroup of the coverage’s gml:Envelope. 

Requirement 30 /req/core/getCoverage-request-valid-dimension: 
Every dimension value in a GetCoverage request shall be equal to one of the axisLab-
els dimension names specified in the gml:SRSInformationGroup of the coverage’s 
gml:Envelope, unless the server offers a WCS CRS extension which overrides this requi-
rement. 
Dependency: [OGC 07-036] Clause 10 http://www.opengis.net/doc/GML/3.2/clause/10 

NOTE GML [OGC 07-036] states in schema file geometryBasic0d1d.xsd: “The attribute axisLabels 
is an ordered list of labels for all the axes of this CRS. The gml:axisAbbrev value should be used for 
these axis labels, after spaces and forbidden characters are removed.” 

In one single GetCoverage request, subsetting can be done at most once for every axis. 

Requirement 31 /req/core/getCoverage-request-no-duplicate-dimension: 
A GetCoverage request shall contain at most one subsetting operation for each of the dimen-
sions of the coverage addressed. 

Depending on whether the DimensionSubset is a trim or slice operation, its correspond-
ing subclasses are DimensionTrim and DimensionSlice, as shown in Table 18 and 
Table 19. 

NOTE The data type is string (and not numeric) as some axis coordinate representations, like date 
and time, have representations beyond pure digits. 

Table 18 — WCS DimensionTrim structure 

Name Definition Data type Multiplicity 
trimLow Lower bound of cutout along dimen-

sion 
String zero or one  

(optional) 
trimHigh Upper bound of cutout along dimension String zero or one  

(optional) 
 

Requirement 32 /req/core/getCoverage-request-trim-within-extent: 
Let the extent of the coverage’s gml:Envelope along the dimension specified in the trim 



OGC 09-110r4 
 

34 Copyright © 2012 Open Geospatial Consortium. 
 

request range from L to H. Then, for the trim bounds trimLow  and trimHigh the follow-
ing shall hold: L £ trimLow £ trimHigh £ H. 

Table 19 — WCS DimensionSlice structure 

Name Definition Data type Multiplicity 
slicePoint Slicing point along dimension String one  

(mandatory) 
 

Requirement 33 /req/core/getCoverage-request-slice-within-extent: 
Let the extent of the coverage’s gml:Envelope along the dimension specified in the slice 
request range from L to H. Then, for the slicing position, slicePoint, the following shall 
hold: L £ slicePoint £ H. 

NOTE Extensions to this core may add further functionality over trimming and slicing, including 
further parameters which may extend such functionality. For example, a forthcoming WCS nil values 
extension may specify, by way of an additional parameter, that bounding boxes larger than the coverage 
extent are admissible. 

8.4.2 GetCoverage response 

8.4.2.1. General coverage response structure 

The response to a successful GetCoverage request is a coverage as per [OGC 09-146r2]. The 
two subsetting operations defined in the Core, trimming and slicing, are defined for the cov-
erage subtypes GMLCOV:GridCoverage, GMLCOV:RectifiedGridCoverage, 
GMLCOV:ReferenceableGridCoverage, and GMLCOV:MultiPointCoverage; 
WCS extensions may establish trimming and slicing semantics for further coverage subtypes. 

NOTE This WCS Core and [OGC 09-146r1] refer to the DataBlock choice in the gmlcov: 
rangeSet component in the response to a successful GetCoverage request. This GML encoding is 
solely used for the purpose of defining the response semantics. It does not exclude that a server delivers a 
result coverage in some other format (defined by a WCS format extension, see Clause 9), and it does not 
even mandate that a server supports this concrete GML encoding. However, it is required that result cov-
erages, regardless of what the encoding chosen is, have a contents which is consistent with the above 
specification. 

Requirement 34 /req/core/getCoverage-response-structure: 
The contents of the response to a successful GetCoverage request shall be a concrete subtype 
of  AbstractCoverage. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage 

Further, the response is expected to be a data structure whose type is the same subtype of 
gmlcov:AbstractCoverage as the requested coverage has, unless the server offers a 
WCS extension which overrides this requirement. 

NOTE As the latter cannot be tested it is not phrased as a formal requirement. 

Requirement 35 /req/core/getCoverage-response-encoding: 
The contents of the response to a successful GetCoverage request shall be encoded as specif-
ied by the request format parameter, if this parameter is present, and in the coverage’s 
Native Format if this parameter is not present. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  35 
 

Requirement 36 /req/core/getCoverage-format-extension: 
The contents of the response to a successful GetCoverage request shall be encoded as specif-
ied in GMLCOV [OGC 09-146r2] conformance class multipart where the range set is 
encoded as specified by the format parameter or, in its absence, the coverage’s Native 
Format. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/multipart 

8.4.2.2. Complete coverage retrieval 

In this Subclause, retrieval of a complete coverage is described. This is the case whenever 
neither trimming nor slicing is specified in the corresponding GetCoverage request. 

Requirement 37 /req/core/getCoverage-response-contents: 
The response to a successful GetCoverage request with coverage identifier id shall consist 
of the coverage component of the OfferedCoverage identified by that id, unless the 
server supports a WCS extension which overrides this requirement. 

NOTE This states that a complete coverage retrieval returns the coverage identified. One deviation 
from this is specified by the WCS extension handling range subsetting; it changes this Requirement in a 
way that, for each coverage cell, also part of its range values can be retrieved. 

Example Assume an unrectified, unreferenced grid coverage with two dimensions Lat and Long, extent 
[1:3,1:5], and a single integer-valued field, singleBand. The response to a GetCoverage request selecting 
this whole coverage could be like this: 

<?xml version="1.0" encoding="UTF-8"?> 
<gmlcov:GridCoverage xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' 
    xmlns:gml='http://www.opengis.net/gml/3.2' 
    xmlns='http://www.opengis.net/gml/3.2' 
    xmlns:swe='http://www.opengis.net/swe/2.0' 
    xmlns:gmlcov='http://www.opengis.net/gmlcov/1.0' 
    xsi:schemaLocation='http://www.opengis.net/swe/2.0 
        http://schemas.opengis.net/sweCommon/2.0/swe.xsd 
        http://www.opengis.net/gmlcov/1.0 http://schemas.opengis.net/gmlcov/1.0/gmlcovAll.xsd'  
    gml:id="C0001"> 
    <gml:boundedBy> 
        <gml:Envelope srsName="http://www.opengis.net/def/crs/EPSG/0/4326" 
            axisLabels="Lat Long" uomLabels="deg deg" srsDimension="2"> 
            <gml:lowerCorner>1 1</gml:lowerCorner> 
            <gml:upperCorner>5 3</gml:upperCorner> 
        </gml:Envelope> 
    </gml:boundedBy> 
    <domainSet> 
        <Grid gml:id="gr0001_C0001" dimension="2"> 
            <limits> 
                <GridEnvelope> 
                    <low>1 1</low> 
                    <high>5 3</high> 
                </GridEnvelope> 
            </limits> 
            <axisLabels>Lat Long</axisLabels> 
        </Grid> 
    </domainSet> 
    <gml:rangeSet> 
        <DataBlock> 
            <rangeParameters/> 
            <tupleList> 



OGC 09-110r4 
 

36 Copyright © 2012 Open Geospatial Consortium. 
 

                1  2  3  4  5 
                6  7  8  9  10 
                11 12 13 14 15 
            </tupleList> 
        </DataBlock> 
    </gml:rangeSet> 
    <gmlcov:rangeType> 
        <swe:DataRecord> 
        <swe:field name="singleBand"> 
           <swe:Quantity definition="http://opengis.net/def/property/OGC/0/Radiance"> 
                   <swe:description>Panchromatic Channel</swe:description> 
                   <swe:uom code="W/cm2"/> 
                   <swe:constraint> 
                       <swe:AllowedValues> 
                           <swe:interval>0 255</swe:interval> 
                           <swe:significantFigures>3</swe:significantFigures> 
                       </swe:AllowedValues> 
                   </swe:constraint> 
               </swe:Quantity> 
        </swe:field> 
        <swe:DataRecord> 
    </gmlcov:rangeType> 
</gmlcov:GridCoverage>  

8.4.2.3. Single Dimension Trimming 

In this Subclause, the GetCoverage response is defined for the case that one trimming is in-
cluded in the request and no slicing.  

For trimming a coverage in a particular dimension, the corresponding dimension name is in-
dicated as well as the lower and upper bound of the resulting coverage. Both lower and upper 
bound are optional. A lower bound omitted shall be substituted in the server by the cover-
age’s lower bound in the dimension on hand, an upper bound omitted shall be substituted in 
the server by the coverage’s upper bound. The result coverage shall contain only those range 
values of the original coverage which lie within the effective lower and upper bound, obtained 
as described. 

Let  

id be the coverage identifier specified in the GetCoverage request; 
dname be the dimension name specified in the trim request parameter; 
tLow and tHigh be the trimLow and trimHigh parameter, resp., in the request, if 
provided 

where 

the coverage addressed is of type gmlcov:GridCoverage, gmlcov:Rectified-
GridCoverage, gmlcov:ReferenceableGridCoverage, or gmlcov:Multi-
PointCoverage. 

Let further 

c be the OfferedCoverage of the server addressed; 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  37 
 

low = tLow if specified in the request, otherwise low is set to the coverage’s lower 
bound in dimension dname; 

high = tHigh if specified in the request, otherwise high is set to the coverage’s upper 
bound in dimension dname; 

B be an envelope  equal to the domain of c, except that in dimension dname the extent 
is given by the closed interval [low,high]; 

Then, the following requirement holds: 

Requirement 38 /req/core/getCoverage-response-trimming: 
The response to a successful GetCoverage request on coverage identifier id of admissible 
type containing no slicing and exactly one trimming operation with dimension name dname, 
lower bound parameter evaluating to low, and upper bound parameter evaluating to high 
shall be a coverage identical to c, but containing all points of c with location inside B, and 
no other points.  

NOTE This requirement does not specify the actual extent of the coverage returned. Possible options 
include: the minimal bounding box of the coverage returned, or the request bounding box. Servers are 
strongly encouraged to deliver the minimal bounding box. 

8.4.2.4. Single Dimension Slicing 

In this Subclause, the GetCoverage response is defined for the case that slicing in one dimen-
sion is included in the request and no trimming.  

Let 

id be the coverage identifier specified in the GetCoverage request; 
dname be the dimension name specified in the slice request parameter; 
s be the slicePoint request parameter 

where 

the coverage addressed is of type gmlcov:GridCoverage, gmlcov:Rectified-
GridCoverage, gmlcov:ReferenceableGridCoverage, or gmlcov:Multi-
PointCoverage. 

Let further 

c be the OfferedCoverage of the server addressed; 

B be an envelope equal to the domain of c, except that in dimension dname the extent is 
given by the closed interval [s,s]. 

Then, the following requirement holds: 

Requirement 39 /req/core/getCoverage-response-slicing: 
The response to a successful GetCoverage request on coverage identifier id of admissible 
type containing no trimming and exactly one slicing operation with dimension name dname, 
and slice point s shall be a coverage identical to c, but containing exactly those cells from c 



OGC 09-110r4 
 

38 Copyright © 2012 Open Geospatial Consortium. 
 

which lie within B, with dimension dname removed from both the coverage’s domain set and 
all of the coverage’s cell coordinate positions, with the number of dimensions of the result 
coverage set to the number of dimensions of c minus 1. 

NOTE In this WCS Core, no further details are required on the CRS of the result coverage; that is 
left to a CRS extension. The only (implicit) requirement is that the result be a complete, consistent cover-
age in the sense of GML and [OGC 09-146r1], which induces a CRS definition consistent with the do-
main of the result coverage. 

8.4.2.5. Multiple and Mixed Subsetting 

A GetCoverage request may contain several subsetting operations; trimming and slicing op-
erations may be combined in a single request in any sequence. 

Requirement 40 /req/core/getCoverage-response-multiple-subsetting: 
The response to a GetCoverage request containing multiple dimensionSubset elements 
shall be identical to applying the evaluation steps in Subclauses 8.4.2.3 and 8.4.2.4 to the 
coverage addressed in any sequence. 

8.4.3 GetCoverage exceptions 

Requirement 41 /req/core/getCoverage-exceptions: 
When a WCS server encounters an error while performing a GetCoverage operation it shall 
return an exception report message constructed in accordance with Table 20 and chosen as 
follows: 
- if the error occurs while performing some extension functionality:  
 an exception as specified by the respective extension; 
- otherwise, if an error occurs which is described in column “meaning of exception 
 code” in Table 20:  
 the corresponding exception as listed in Table 20; 
- otherwise:  
 an exception as specified in Clause 8 of [OGC 06-121r9].  
Dependency: [OGC 06-121r9] Clause 8 (http://www.opengis.net/doc/OWS/2.0/clause/8) 

Table 20 — Exception codes for GetCoverage operation 

exceptionCode value HTTP 
code 

Meaning of exception code locator 
value 

NoSuchCoverage 404 The identifier passed does not match with 
any of the coverages offered by this server 

list of violating 
coverage iden-
tifiers 

InvalidAxisLabel 404 The dimension subsetting operation 
specified an axis label that does not exist in 
the Envelope or has been used more than 
once in the GetCoverage request 

List of violat-
ing dimension 
names 

InvalidSubsetting 404 Operation request contains an invalid sub-
setting value; either a trim or slice para-
meter value is outside the extent of the cov-
erage or, in a trim operation, a lower bound 
is above the upper bound 

Name of pa-
rameter with 
invalid value 

 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  39 
 

8.5 Information Coherence 

Coverages are uniquely identified within a service through their coverageId identifier – in 
other words, the information which a service delivers with respect to a given coverage identi-
fier through any of the request types specified in this document shall depend only on the val-
ue of this identifier. The identifier’s property of being the link between the request types has 
been established in requirements Requirement 19 and Requirement 27.  

Additionally, addressing a coverage by its identifier through different WCS Core request 
types shall deliver the same information with respect to the common parts. 

Requirement 42 /req/core/information-coherence: 
For every coverage identifier returned in a GetCapabilities response, DescribeCoverage and 
GetCoverage requests on such an identifier shall always deliver information about the same 
OfferedCoverage object. 

NOTE 1 The above implicitly defines that identifiers shall not be reused when inserting new coverages 
into a coverage offering. Not reusing identifiers, however, cannot be verified and, hence, cannot be a 
formal requirement,  

NOTE 2 The above holds as long as the service offering is unchanged. The service offering can be 
updated at any time, though, through successful WCS-T requests, updates by the service operator, for 
example. 

Identifiers of coverages offered by a WCS server shall be immutable over the lifetime of the 
coverage identified, and not be reused for any other coverage offered by this service in future.  

NOTE As this requirement cannot be stated formally for conformance testing based on the WCS 
request types only, it is not expressed as a requirement. 

9 Extensions 

9.1 Overview 

The specification contained in this WCS Core is not sufficient for a fully functioning WCS 
implementation. In this Clause, those additional standards are listed which, together with the 
this Core, constitute the specification of a minimal WCS-conformant implementation. These 
additional specifications are contained in the conformance classes of WCS extension stand-
ards. 

A client can verify support of a particular conformance class in a server by evaluating its 
presence in the URIs delivered in the Profile elements of the GetCapabilities response 
(see Subclause 8.2.2). 

NOTE OGC Profile and Application Profile standards establish domain-targeted specializations of 
interface standards. As such, they typically require support of particular selected extension standards by a 
conforming implementation. 

In this Clause 9, extensions are listed which WCS implementations are required to support. 

9.2 Protocol binding 

For communication between client and server, at least one protocol extension is required to be 
implemented by both. 



OGC 09-110r4 
 

40 Copyright © 2012 Open Geospatial Consortium. 
 

Requirement 43 /req/core/protocol-extension: 
For the transmission of all operation requests and responses, WCS implementations shall 
support at least one WCS protocol extension, that is: an extension whose URI starts with 
  http://www.opengis.net/spec/WCS_protocol-binding_  

Example The GET/KVP protocol encoding version 1.0 for WCS Core 2.0 is defined by URI 
 http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0  

NOTE As there is no canonical practice among and within communities dealing with coverages to 
use one particular protocol none of the protocols specified in WCS extensions is mandatory. In practice, 
this may lead to a lack of interoperability between client and server implementations. In future user 
communities might agree eventually to make on particular protocol binding mandatory. 

9.3 Coverage encoding formats 

For the transfer of coverage-valued results from server to client, at least one coverage format 
encoding extension is required to be implemented by both. This is regulated by the GML Ap-
plication Schema for Coverages [OGC 09-146r1] which specifies conformance classes for 
coverage encoding. 

NOTE Consequently, no requirement is stated here. For the handling of coverage encodings in WCS, 
see in particular Subclause 6.4. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  41 
 

Bibliography 

[1] OGC 07-067r5, Web Coverage Service Implementation Standard, version 1.1.2 

[2] OGC 07-068r4, Web Coverage Service (WCS) – Transaction operation extension, version 
1.1.4 

[3] OGC 08-059r3, Web Coverage Service (WCS) – Processing extension, version 1.0.0 

[4] OGC 04-094, Web Feature Service (WFS) Implementation Specification, version 1.1.0 

[5] OGC 06-042, Web Map Service (WMS) Implementation Specification, version 1.3.0 

[6] OGC 09-153, WCS 2.0 Overview: Core and Extensions, version 1.0.0 

[7] OGC 07-036, Geography Markup Language (GML) Encoding Standard, version 3.2.1 

[8] OGC 07-011, Abstract Specification Topic 6: The Coverage Type and its Subtypes, ver-
sion 7.0 (identical to ISO 19123:2005) 

 

 



OGC 09-110r4 
 

42 Copyright © 2012 Open Geospatial Consortium. 
 

Annex A 
(normative) 

 
Abstract test suite 

A WCS implementation must satisfy the following system characteristics to be conformant 
with this specification. 

A.1 Conformance Test Class: core 

The OGC URI identifier of this conformance class is: 
http://www.opengis.net/spec/WCS/2.0/conf/core.  

Tests identifiers below are relative to http://www.opengis.net/spec/WCS/2.0/. 

A.1.1 Coverage structure contains Envelope 

Test id: /conf/core/structure-with-boundedBy 

Test Purpose: Requirement /req/core/structure-boundedBy: 
The coverage element of every OfferedCoverage shall contain a 
valid gml:boundedBy element. 

Test method: For all coverages offered by the server under test, retrieve coverage infor-
mation via either DescribeCoverage or GetCoverage operations. Verify that 
the response contains a gml:boundedBy. Test passes if all individual 
tests pass. 

A.1.2 Coverage structure contains srsName 

Test id: /conf/core/structure-with-srsName 

Test Purpose: Requirement /req/core/structure-with-srsName: 
The srsName attribute in the gml:Envelope element of the 
gml:boundedBy element of the coverage element of an Offered-
Coverage shall not be empty. 

Test method: For all coverages offered by the server under test, retrieve gml:domain-
Set information through either DescribeCoverage or GetCoverage re-
quests. Verify that the srsName attribute in the gml:Envelope element 
refers to a valid CRS definition. Test passes if all individual tests pass. 

A.1.3 Coverage structure contains axisLabels 

Test id: /conf/core/structure-with-axisLabels 

Test Purpose: Requirement /req/core/structure-with-axisLabels: 
The axisLabels attribute in the gml:Envelope element of the 
gml:boundedBy element of the coverage element of an Offered-



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  43 
 

Coverage shall not be empty. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-
coverage 

Test method: For all coverages offered by the server under test, retrieve gml:Envolope 
information through eitherDescribeCoverage or GetCoverage requests. 
Verify that the srsName attribute refers to a valid CRS definition. Test 
passes if all individual tests pass. 

A.1.4 Coverage element name dictionary 

Test id: /conf/core/coverageSubtype-content 

Test Purpose: Requirement Error! Reference source not found. 

Test method: Send a GetCapabilities request to the server under test.  

For each coverage identifier delivered: 

• If GML is supported by the server as a coverage encoding format:  

o Send a GetCoverage request (with or without subsetting) 
indicating output format GML.  

o Verify that the coverage type returned is equal to the cover-
age’s coverageSubtype text value forming the direct 
child of the CoverageSummary element of the respective 
coverage summary in the GetCapabilities response. 

• Otherwise, if a coverage encoding format is supported by the server 
which allows to extract the coverage type: 

o Send a GetCoverage request (with or without subsetting) 
indicating said output format.  

o Verify that the coverage type returned is equal to the cover-
age’s coverageSubtype text value forming the direct 
child of the CoverageSummary element of the respective 
coverage as delivered through GetCapabilities. 

• Otherwise: 

o Do nothing (property cannot be tested). 

Overall test passes if all individual tests pass. 



OGC 09-110r4 
 

44 Copyright © 2012 Open Geospatial Consortium. 
 

A.1.5 Coverage element name lookup 

Test id: /conf/core/coverageSubtype-reference 

Test Purpose: Requirement /req/core/coverageSubtype-reference: 
The content model definition of the coverage type referenced in the cov-
erageSubtype in the ServiceParameters of an Offered-
Coverage shall either be normatively referenced by this WCS Core or by 
a WCS extension requirements class supported by the server. 

Test method: Send a GetCapabilities request to the server under test. 

For each coverageSubtype reported check that one of the following 
holds: 

• Its value is equal to one of the (non-abstract) coverage types defined 
in the GML Application Schema for Coverages [OGC 09-146r1]. 

• Its value is equal to a coverage type defined in a WCS extension, 
the associated conformance class for which has been included in the 
ows:Profiles of the server’s GetCapabilities response. 

Overall test passes if all individual tests pass. 

A.1.6 ServiceMetadata structure  

Test id: /conf/core/serviceMetadata-structure 

Test Purpose: Requirement /req/core/serviceMetadata-structure: 
The ServiceMetadata structure shall adhere to Figure 2 and Table 6. 

Test method: Send a valid GetCapabilities request to the service under test. Verify that 
the result contains an XML subtree of type ServiceMetadata. 

A.1.7 GetCapabilities: Profile lists valid external conformance classes 

Test id: /conf/core/conformance-class-in-profile 

Test Purpose: Requirement /req/core/conformance-class-in-profile: 
Each element in the Profile list of the ServiceIdentification 
shall be the identifier of an OGC Interface Standard conformance class. 

Test method: Send a valid GetCapabilities request to the service under test; for each 
ows:Profile element listed in the response, check that the correspond-
ing conformance class exists and, if so, perform its conformance tests in 
completeness. Test passes if all conformance classes listed exist and each 
check succeeds completely. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  45 
 

A.1.8 GetCapabilities response contents: OperationsMetadata 

Test id: /conf/core/operationsMetadata 

Test Purpose: Requirement /req/core/operationsMetadata: 
The OperationsMetadata component shall contain three Operation 
instances with case-sensitive name values “GetCapabilities”, “De-
scribeCoverage”, and “GetCoverage”, respectively. 

Test method: Send a GetCapabilities request to the service under test; for each operation 
listed in the OperationsMetadata part of the response (if this part is 
present), send a valid request. Check that these requests do not result in 
exceptions. Test passes if all checks are successful. 

A.1.9 Formats supported 

Test id: /conf/core/formats-supported 

Test Purpose: Requirement /req/core/formats-supported: 
Each wcs:formatSupported elements shall hold one MIME type iden-
tifier. 

Test method: Send a GetCapabilities request to the service under test. For each 
wcs:formatSupported element contained in the response, check that it 
contains exactly one MIME type identifier. 

Overall test passes if all individual tests pass. 

A.1.10 Request base 

Test id: /conf/core/requestbase 

Test Purpose: Requirement /req/core/requestbase: 
All WCS requests, except GetCapabilities, shall use a data structure which 
is a subtype of RequestBase. 

Test method: For each request type, send valid requests to server under test. Verify that 
all parameters defined in RequestBase are mandatory. 

Overall test passes if all individual tests pass. 

A.1.11 Service name 

Test id: /conf/core/service-name 

Test Purpose: Requirement NOTE This applies not only to the request types in the Core, but to 
any request type supported by the service on hand. 

/req/core/service-name: 



OGC 09-110r4 
 

46 Copyright © 2012 Open Geospatial Consortium. 
 

For all WCS request types, the request service parameter shall have a 
fixed value of “WCS”. 

Test method: For each request type, send valid requests to server under test. Modulate 
request parameter: 

• Parameter value equal to what is required. Verify that request suc-
ceeds. 

• Parameter value not equal to what is required. Verify that request 
fails. 

Overall test passes if all individual tests deliver the result expected. 

A.1.12 Version number 

Test id: /conf/core/version-number 

Test Purpose: Requirement /req/core/version-number: 
For all WCS request types, the request version parameter shall have a fixed 
value of “2.0.1”. 

Test method: For each request type, send valid requests to server under test. Modulate 
version parameter: 

• Set parameter value to what is required. Verify that request suc-
ceeds. 

• Set parameter value to a different value. Verify that request fails. 

Overall test passes if all individual tests deliver the result expected. 

A.1.13 Correct GetCapabilities request structure 

Test id: /conf/core/getCapabilities 

Test Purpose: Requirement /req/core/getCapabilities: 
A GetCapabilities request shall consist of a GetCapabilities structure 
as defined in Figure 4 and Table 8. 

Test method: Send GetCapabilities requests with valid and invalid request structure. Pass 
test if appropriate valid results or exceptions, resp., are delivered. 

A.1.14 Correct GetCapabilities response structure 

Test id: /conf/core/wcsServiceMetadata-structure 

Test Purpose: Requirement /req/core/wcsServiceMetadata-structure: 
The response to a successful GetCapabilities request shall consist of a 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  47 
 

Capabilities structure as defined in Figure 5, Table 9, Figure 6, and 
Table 10. 

Test method: Send a valid GetCapabilities request to the server under test, check the re-
sult consists of an XML document of type Capabilities and the appro-
priate components, as defined in the places referenced. 

A.1.15 GetCapabilities response contents: service metadata 

Test id: /conf/core/wcsServiceMetadata-contents 

Test Purpose: Requirement /req/core/wcsServiceMetadata-contents: 
If present in the response to a successful GetCapabilities request, the 
Contents section components, where present, shall be populated using 
the semantics specified by OWS Common [OGC 06-121r9]. 
Dependency: [OGC 06-121r9] Clause 7 
(http://www.opengis.net/doc/OWS/2.0/clause/7) 

Test method: Send a valid GetCapabilities request to the server under test, check the re-
sult consists of an XML document of type wcs:ContentsType. 

A.1.16 GetCapabilities response contents: Coverage summary 

Test id: /conf/core/coverageSummary 

Test Purpose: Requirement /req/core/coverageSummary: 
In the response to a successful GetCapabilities request containing a 
CoverageSummary section, each coverage identifier listed shall refer to a 
coverage offered by the server. 

Test method: Send a GetCapabilities request to the service under test. If a wcs:Cover-
ageSummary section is contained in the response then send, for each cov-
erage identifier listed, a valid DescribeCoverage request. Check that none 
of these requests results in an exception.  

Test passes if all checks are successful. 

A.1.17 DescribeCoverage supported 

Test id: /conf/core/describeCoverage 

Test Purpose: Requirement /req/core/describeCoverage: 
Every WCS server shall offer the DescribeCoverage operation. 

Test method: Send a valid DescribeCoverage request and check that the result is not an 
exception. 



OGC 09-110r4 
 

48 Copyright © 2012 Open Geospatial Consortium. 
 

A.1.18 Correct DescribeCoverage request structure 

Test id: describeCoverage-request-structure 

Test Purpose: Requirement /req/core/describeCoverage-request-structure: 
A DescribeCoverage request shall consist of a data structure as defined in 7 
and Table 11. 

Test method: Send DescribeCoverage requests with valid and invalid request structure. 
Pass test if appropriate valid results or exceptions, resp., are delivered. 

A.1.19 Valid coverage identifiers in DescribeCoverage request 

Test id: /conf/core/describeCoverage-valid-identifier 

Test Purpose: Requirement /req/core/describeCoverage-valid-identifier: 
Each coverage identifier in the list submitted in a DescribeCoverage request 
shall identify an OfferedCoverage object available on the server ad-
dressed. 

Test method: Send DescribeCoverage requests with more than one id to server under test 
where 

§ All coverages exist 

§ At least one exists, and at least one does not exist 

§ None of the coverages exist. 

Pass test if appropriate valid results or exceptions, resp., are delivered. 

A.1.20 Correct DescribeCoverage response structure 

Test id: /conf/core/describeCoverage-response-structure 

Test Purpose: Requirement /req/core/describeCoverage-response-structure: 
The response to a successful DescribeCoverage request shall consist of a 
CoverageDescriptions element as described in Figure 8, Table 12, 
Table 13, and Table 14. 

Test method: For all coverages offered by the server under test, send a DescribeCoverage 
request to server under test, check the result consists of an XML document 
of type CoverageDescriptions as described in the references stated 
by the requirement. Test passes if all individual tests pass. 

A.1.21 DescribeCoverage returns information on all coverages requested 

Test id: /conf/core/describeCoverage-response-list-size 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  49 
 

Test Purpose: Requirement /req/core/describeCoverage-response-list-size: 
The response to a successful DescribeCoverage request with n coverage 
identifiers shall contain a CoverageDescriptions element consisting 
of n CoverageDescription items as specified in Figure 8 and Table 
12. 

Test method: Obtain the list of coverage identifiers by sending a valid GetCapabilities 
request to the server under test. Send DescribeCoverage requests with a 
(non-empty) subset of the list and with the complete identifier list. Check 
that the response list matches the request list in size. 

A.1.22 Correct DescribeCoverage response contents 

Test id: /conf/core/describeCoverage-response-contents 

Test Purpose: Requirement  

/req/core/describeCoverage-response-contents: 
The response to a successful DescribeCoverage request containing n identi-
fiers id1, …, idn shall contain, for each identifier idi passed (1≤i≤n), a 
wcs:coverageDescription consisting of the metadata of the cover-
age identified by idi, that is: the complete wcs:CoverageOffering 
minus the coverage rangeSet. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-
coverage 

Test method: Obtain the list of coverage identifiers by sending a valid GetCapabilities 
request to the server under test. Send DescribeCoverage requests with a 
(non-empty) subset of the list and with the complete identifier list. Check 
responses whether they fulfill the requirement for each coverage description 
returned. 

A.1.23 DescribeCoverage srsName value 

Test id: /conf/core/describeCoverage-response-srsName 

Test Purpose: Requirement /req/core/describeCoverage-response-srsName: 
If a geometric or temporal object in the domainSet of a coverage-
Description specifies an srsName attribute, the value of this attribute 
shall be identical to the srsName attribute of the boundedBy element of 
the containing coverageDescription. 

Test method: Send DescribeCoverage requests containing an identifier of a coverage on 
the server under test which contains an srsName attribute value in its 
coverageDescription. Check that, in the response, both srsName 
values addressed in the requirement are equal. Pass test if check succeeds. 



OGC 09-110r4 
 

50 Copyright © 2012 Open Geospatial Consortium. 
 

A.1.24 DescribeCoverage exceptions 

Test id: /conf/core/describeCoverage-exceptions 

Test Purpose: Requirement /req/core/describeCoverage-exceptions: 
When a WCS server encounters an error while performing a Describe-
Coverage operation it shall return an exception report message constructed 
in accordance with Table 15 and chosen as follows: 
- if the error occurs while performing some extension functionality:  
 an exception as specified by the respective extension; 
- otherwise, if an error occurs which is described in column “meaning of 
exception 
 code” in Table 15:  
 the corresponding exception as listed in Table 15; 
- otherwise:  
 an exception as specified in Clause 8 of [OGC 06-121r9]. 
Dependency: [OGC 06-121r9] Clause 8 
(http://www.opengis.net/doc/OWS/2.0/clause/8) 

Test method: For each exception referenced in the requirement: Send an erroneous De-
scribeCoverage request to the server under test provoking this exception, as 
per its definition. Check for proper exception reporting. Pass test if all 
checks succeed. 

A.1.25 GetCoverage supported 

Test id: /conf/core/getCoverage 

Test Purpose: Requirement /req/core/getCoverage: 
Every WCS implementation shall support the GetCoverage operation. 

Test method: Send a valid GetCoverage request to the server under test and check that the 
response is not an exception. 

A.1.26 GetCoverage request structure 

Test id: /conf/core/getCoverage-request-structure 

Test Purpose: Requirement /req/core/getCoverage-request-structure: 
A GetCoverage request shall consist of a structure as defined in Figure 9, 
Table 16, Table 17, Table 18, and Table 19. 
Dependency: [OGC 06-121r9] Clause 7 
(http://www.opengis.net/doc/OWS/2.0/clause/7) 

Test method: Send a valid GetCoverage request to server under test which conforms to 
the references in the requirement. Check that the response is not an excep-
tion. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  51 
 

A.1.27 GetCoverage request addresses existing coverage 

Test id: /conf/core/getCoverage-request-valid-identifier 

Test Purpose: Requirement /req/core/getCoverage-request-valid-identifier: 
The coverageId parameter value in a GetCoverage request shall be 
equal to the identifier of one of the coverages offered by the server ad-
dressed. 

Test method: Send valid GetCoverage requests to server under test addressing existing 
and non-existing coverages, resp. Check if appropriate results or exceptions, 
resp., are delivered. 

A.1.28 GetCoverage: acceptable format 

Test id: /conf/core/getCoverage-acceptable-format 

Test Purpose: Requirement /req/core/getCoverage-acceptable-format: 
If a GetCoverage request contains a format parameter then this parameter 
shall contain a MIME type identifier occurring in some 
wcs:formatSupported element of the response to a successful 
GetCapabilities request to this server. 

Test method: Send GetCapabilities request to server under test, remember Capabilities 
document returned. Send GetCoverage requests containing valid coverage 
identifiers to server under test. Vary the format parameter: 

• Send request with a format parameter value containing one of the 
MIME type identifiers reported in the Capabilities document. Re-
quest must be valid in the sense that the format requested can en-
code the coverage addressed. Verify that request succeeds. 

• Send request with a format parameter value not occurring in the in 
the Capabilities document. Verify that request fails. 

Pass test if all checks succeed. 

A.1.29 GetCoverage: acceptable mediaType 

Test id: /conf/core/getCoverage-acceptable-mediaType 

Test Purpose: Requirement /req/core/getCoverage-acceptable-mediaType: 
If a GetCoverage request contains a mediaType parameter then this pa-
rameter shall contain a MIME type identifier of fixed value “multi-
part/related”. 

Test method: Send a GetCoverage request containing a mediaType parameter. Vary this 
parameter value: 



OGC 09-110r4 
 

52 Copyright © 2012 Open Geospatial Consortium. 
 

• Send request with a mediaType parameter value as required. Veri-
fy that request succeeds. 

• Send request with an illegal mediaType parameter. Verify that re-
quest fails. 

Pass test if all checks succeed. 

A.1.30 GetCoverage request parameter dimension 

Test id: /conf/core/getCoverage-request-valid-dimension 

Test Purpose: Requirement /req/core/getCoverage-request-valid-dimension: 
Every dimension value in a GetCoverage request shall be equal to one of 
the axisLabels dimension names specified in the 
gml:SRSInformationGroup of the coverage’s gml:Envelope, un-
less the server offers a WCS CRS extension which overrides this requi-
rement. 

Test method: § If a CRS extension is implemented by the server under test which over-
rides this requirement:  

Do nothing. 

§ Otherwise:  

Send otherwise valid GetCoverage requests with all dimension val-
ues appearing in the axisLabel of the coverage addressed, with some 
of the dimension values appearing there, and with none of the dimen-
sion names provided appearing there. Verify that coverage response is 
returned if an only if dimension occurring in the axisLabel attrib-
ute are used, and an exception is reported otherwise. 

A.1.31 No duplicate dimension subsetting in GetCoverage 

Test id: /conf/core/getCoverage-request-no-duplicate-dimension 

Test Purpose: Requirement /req/core/getCoverage-request-no-duplicate-dimension: 
A GetCoverage request shall contain at most one subsetting operation for 
each of the dimensions of the coverage addressed. 

Test method: Send otherwise valid GetCoverage  requests to server under test which con-
tain duplicate, and send requests which contain no duplicate dimension 
names. Do so for requests with single, multiple, and mixed subsetting. Veri-
fy that, whenever at least one duplicate dimension occurs, an exception is 
returned and a normal response otherwise. 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  53 
 

A.1.32 GetCoverage trimming within coverage limits 

Test id: /conf/core/getCoverage-request-trim-within-extent 

Test Purpose: Requirement /req/core/getCoverage-request-trim-within-extent: 
Let the extent of the coverage’s gml:Envelope along the dimension 
specified in the trim request range from L to H. Then, for the trim bounds 
trimLow  and trimHigh the following shall hold: L £ trimLow £ 
trimHigh £ H. 

Test method: Send otherwise valid GetCoverage requests with matching and with violat-
ing trimming positions to server under test. Check if appropriate results are 
returned if and only if the requirement is fulfilled, and an exception other-
wise. Pass test if all checks succeed. 

A.1.33 GetCoverage slicing within coverage limits 

Test id: /conf/core/getCoverage-request-slice-within-extent 

Test Purpose: Requirement /req/core/getCoverage-request-slice-within-extent: 
Let the extent of the coverage’s gml:Envelope along the dimension 
specified in the slice request range from L to H. Then, for the slicing posi-
tion, slicePoint, the following shall hold: L £ slicePoint £ H. 

Test method: Send otherwise valid GetCoverage requests with matching and with violat-
ing slicing positions to server under test. Check if appropriate results are 
returned if and only if the requirement is fulfilled, and an exception other-
wise. Pass test if all checks succeed. 

A.1.34 GetCoverage response structure 

Test id: /conf/core/getCoverage-response-structure 

Test Purpose: Requirement /req/core/getCoverage-response-structure: 
The contents of the response to a successful GetCoverage request shall be a 
concrete subtype of  AbstractCoverage. 

Test method: For each coverage offered by the server on hand, send a valid GetCoverage 
request to server under test. Check that the result validates against 
gmlcov:AbstractCoverage. Test passes if all individual tests pass. 

A.1.35 Correct coverage representation in GetCoverage result 

Test id: /conf/core/getCoverage-response-encoding 

Test Purpose: Requirement /req/core/getCoverage-response-encoding: 
The contents of the response to a successful GetCoverage request shall be 
encoded as specified by the request format parameter, if this parameter is 



OGC 09-110r4 
 

54 Copyright © 2012 Open Geospatial Consortium. 
 

present, and in the coverage’s Native Format if this parameter is not present. 

 

Test method: For each coverage encoding format (i.e., format encoding extension) sup-
ported by the server under test: Send a valid GetCoverage request to re-
trieve a coverage in this format. Check that the result is a valid instance of 
the format indicated. Do so for both complete and subsetted coverages.  

Pass test if all checks succeed. 

A.1.36 Correct multipart coverage encoding in GetCoverage result 

Test id: /conf/core/getCoverage-format-extension 

Test Purpose: Requirement /req/core/getCoverage-format-extension: 
The contents of the response to a successful GetCoverage request shall be 
encoded as specified in GMLCOV [OGC 09-146r2] conformance class 
multipart where the range set is encoded as specified by the format pa-
rameter or, in its absence, the coverage’s Native Format. 
Dependency: http://www.opengis.net/spec/GMLCOV/1.0/conf/multipart 

Test method: Send GetCoverage request to the service under test requesting a multipart 
response. Vary this request:  

§ Provide a format parameter with a format supported by the service and 
in which the coverage requested can be represented. Check that the re-
sult conforms with the GMLCOV multipart conformance class. 

§ Leave out the format parameter. Check that the result conforms with the 
GMLCOV multipart conformance class. 

Test passes if all checks succeed. 

 

 

A.1.37 Correct coverage contents in GetCoverage result 

Test id: /conf/core/getCoverage-response-contents 

Test Purpose: Requirement /req/core/getCoverage-response-contents: 
The response to a successful GetCoverage request with coverage identifier 
id shall consist of the coverage component of the 
OfferedCoverage identified by that id, unless the server supports a 
WCS extension which overrides this requirement. 

Test method: For all coverage types supported for all coverage types supported and for all 
coverage encoding formats (i.e., format encoding extension) supported by 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  55 
 

the server under test:  

§ Perform two GetCoverage requests on the same coverage where the 
request envelopes contain a non-empty overlap.  If the coverage type 
supports subsetting then include trim and slice operations in the cover-
age requests, otherwise retrieve the complete coverage twice.  

§ For all locations present in both coverage responses (i.e., for all loca-
tions in the overlap region) check that corresponding locations in both 
response coverages have identical values.  

Pass test if all comparisons reveal equality. 

A.1.38 GetCoverage trimming operation 

Test id: /conf/core/getCoverage-response-trimming 

Test Purpose: Requirement /req/core/getCoverage-response-trimming: 
The response to a successful GetCoverage request on coverage identifier id 
of admissible type containing no slicing and exactly one trimming operation 
with dimension name dname, lower bound parameter evaluating to low, 
and upper bound parameter evaluating to high shall be a coverage identi-
cal to c, but containing all points of c with location inside B, and no other 
points. 

Test method: Send valid GetCoverage requests to the server under test with a single 
trimming as the only subsetting operation. Check correctness of the cover-
age response returned. Do so for all dimensions supported by the server and 
for subsetting dimensions at any position in the list of dimensions.  

Pass test if all checks succeed. 

A.1.39 GetCoverage slicing operation 

Test id: /conf/core/getCoverage-response-slicing 

Test Purpose: Requirement /req/core/getCoverage-response-slicing: 
The response to a successful GetCoverage request on coverage identifier id 
of admissible type containing no trimming and exactly one slicing operation 
with dimension name dname, and slice point s shall be a coverage identi-
cal to c, but containing exactly those cells from c which lie within B, with 
dimension dname removed from both the coverage’s domain set and all of 
the coverage’s cell coordinate positions, with the number of dimensions of 
the result coverage set to the number of dimensions of c  

Test method: Send valid GetCoverage requests to the server under test with a single slic-
ing as the only subsetting operation. Check correctness of the coverage re-
sponse returned. Do so up to the maximum number of dimensions support-
ed by the server and for subsetting dimensions at any position in the list of 



OGC 09-110r4 
 

56 Copyright © 2012 Open Geospatial Consortium. 
 

dimensions. Pass test if all checks succeed. 

A.1.40 Dimension subsetting sequence invariance in GetCoverage 

Test id: /conf/core/getCoverage-response-multiple-subsetting 

Test Purpose: Requirement /req/core/getCoverage-response-multiple-subsetting: 
The response to a GetCoverage request containing multiple dimension-
Subset elements shall be identical to applying the evaluation steps in 
Subclauses 8.4.2.3 and 8.4.2.4 to the coverage addressed in any sequence. 

Test method: Pick some combination of trimming and slicing operations on a given cov-
erage. Construct a set of GetCoverage requests by building all permutations 
of these subsetting operations. Compare the results of all requests whether 
the result returned is identical. Pass test if all checks succeed. 

A.1.41 GetCoverage exceptions 

Test id: /conf/core/getCoverage-exceptions 

Test Purpose: Requirement /req/core/getCoverage-exceptions: 
When a WCS server encounters an error while performing a GetCoverage 
operation it shall return an exception report message constructed in accord-
ance with Table 20 and chosen as follows: 
- if the error occurs while performing some extension functionality:  
 an exception as specified by the respective extension; 
- otherwise, if an error occurs which is described in column “meaning of 
exception 
 code” in Table 20:  
 the corresponding exception as listed in Table 20; 
- otherwise:  
 an exception as specified in Clause 8 of [OGC 06-121r9].  

Test method: For each exception referenced in the requirement: Send an erroneous 
GetCoverage request to the server under test provoking this exception, as 
per its definition. Check for proper exception reporting. Pass test if all 
checks succeed. 

A.1.42 Information coherence across request types 

Test id: /conf/core/information-coherence 

Test Purpose: Requirement /req/core/information-coherence: 
For every coverage identifier returned in a GetCapabilities response, De-
scribeCoverage and GetCoverage requests on such an identifier shall al-
ways deliver information about the same OfferedCoverage object. 

Test method: Send a valid GetCapabilities request to the server under test to obtain an 



OGC 09-110r4 
 

Copyright © 2012 Open Geospatial Consortium.  57 
 

identifier list, idList, of the coverages offered.  

For each identifier id within idList: 

• Issue a valid DescribeCoverage, resulting in response did 

• Issue a valid GetCoverage request retrieving the complete, un-
changed coverage as specified in Subclause 8.4.2.2 (i.e., without 
any subsetting operation), resulting in response gid 

• Check if common components of did and gid (as per schema) are 
equal 

Pass test if all checks succeed. 

A.1.43 Protocol binding extensions 

Test id: /conf/core/protocol-extension 

Test Purpose: Requirement /req/core/protocol-extension: 
For the transmission of all operation requests and responses, WCS imple-
mentations shall support at least one WCS protocol extension, that is: an 
extension whose URI starts with 
  http://www.opengis.net/spec/WCS_protocol-binding_ 

Test method: Determine the list of supported extensions via a valid GetCapabilities re-
quest; check that there is at least one protocol extension listed. 

 

-- end of ATS -- 


