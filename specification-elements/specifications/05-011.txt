
05-011 Common CRSs Folder/05-011 Common CRSs Paper.doc
OGC 05-011

OGC 05-011



Open Geospatial Consortium Inc.

Date: 2005-01-28

Reference number of this OGC™ document: OGC 05-011

Version: 1.0.0

Category: OGC™ Recommendation Paper

Editor: Arliss Whiteside

Recommended XML/GML 3.1.1 encoding 
of common CRS definitions 

Copyright © Open Geospatial Consortium (2005)

Document type: 

OGC™ Recommendation Paper

Document subtype: 
(none)

Document stage: 
Approved Recommendation Paper

Document language: 
English

Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.


Contents
Page

vi.
Preface


ii.
Document contributor contact points
v

iii.
Revision history
vi

iv.
Changes to the OGC Abstract Specification
vi

v.
Future work
vi

Foreword
vii

Introduction
viii

1
Scope
1

2
Conformance
1

3
Normative references
2

4
Terms and definitions
3

5
Conventions
3

5.1
Symbols (and abbreviated terms)
3

5.2
UML Notation
4

5.3
Document terms and definitions
4

6
Common coordinate reference systems
4

6.1
Introduction
4

6.2
Geographic CRSs
5

6.2.1
Simple UML model
5

6.2.2
XML document example
5

6.2.3
Full UML model
7

6.3
Projected CRSs
8

6.3.1
Simple UML model
8

6.3.2
XML document example
9

6.3.3
Full UML model
10

6.4
Coordinate conversions
12

6.4.1
Simple UML model
12

6.4.2
XML document example
12

6.4.3
Full UML model
14

6.5
Vertical CRSs
16

6.5.1
Simple UML model
16

6.5.2
XML document example
16

6.5.3
Full UML model
17

6.6
Compound CRSs
19

6.6.1
Simple UML model
19

6.6.2
XML document example
19

6.6.3
Full UML model
20

7
Supporting information
21

Annex A (informative)  Expected uses of CRS definition data
23

A.1
Introduction
23

A.2
Multiple uses of definition data
23

A.3
Alternative ways to transfer definition data
24

A.4
Use to transfer coordinate reference system definition
24

A.4.1
Current CRS transfer by low-level CT interface
25

A.4.2
Current CRS transfer by ICT and high-level CT interfaces
26

A.5
Use to transfer coordinate transformation (CT) definition
26

A.5.1
Current CT transfer by low-level CT Interface
26

A.5.2
Current CT transfer by ICT and high-level CT interfaces
27

A.6
Use to transfer dataset lineage or history
28

Annex B (normative)   Conformance
29

B.1
Conformance requirements
29

B.2
Abstract test suite
30

B.3
Rules for application schemas
32

B.3.1
Introduction
32

B.3.2
General rules
34

B.3.4
Import needed schemas
34

B.3.5
GML objects and properties
34

B.3.6
Global and local names
35

B.4
UML models for application schemas
35

Annex C (informative)  More XML document examples
36

C.1
Introduction
36

C.2
Extended example XML for compound coordinate reference system
36

C.3
Simplified example XML for conversion
41

C.4
Example XML for operation method
43

C.5
Example XML for CRS dictionary
44

C.6
Example XML for units dictionary
49

Annex D (informative)  Application schema example
51

D.1
Introduction
51

D.2
Transverse Mercator conversion
51

D.2.1
Introduction
51

D.2.2
UML package
51

D.2.3
Application schema
53

D.2.4
Example XML document
53

Annex E (informative)  Coordinate operation methods
57

E.1
Introduction
58

E.2
EPSG defined operation methods
58

E.3.
Other operation methods
59

E.3.1
Introduction
59

E.3.2
Polar / Cartesian (2D) conversion
59

E.3.3
Spherical / Cartesian (3D) conversion
59

E.3.4
Cylindrical / Cartesian conversion
59

Bibliography
60


 

Figures
Page

5Figure 1 — GeographicCRS simple UML class diagram



8Figure 2 — GeographicCRS full UML class diagram



9Figure 3 — ProjectedCRS simple UML class diagram



11Figure 4 — ProjectedCRS full UML class diagram



12Figure 5 — Conversion UML simple UML class diagram



15Figure 6 — Conversion full UML class diagram



16Figure 7 — VerticalCRS simple UML class diagram



18Figure 8 — VerticalCRS full UML class diagram



19Figure 9 — CompoundCRS simple UML class diagram



21Figure 10 — CompoundCRS full UML class diagram



52Figure D.1 — UML package for Transverse Mercator projection



i. 
 Preface


NOTE 
The previous version of this document was numbered 04-103r1, now renumbered 05-011 after approval and final editing in 2005.


This OGC™ Recommendation Paper specifies XML encoding of data defining some common-used coordinate reference systems and coordinate operations, based on GML 3.1.1 [OGC 04-092r4] . This document covers geographic, projected, vertical, and compound CRSs. Most of the CRSs defined in the EPSG database are of these types.

This Recommendation Paper replaces some parts of OGC Recommendation Paper 03-010r9, titled "Recommended XML encoding of coordinate reference systems and coordinate transformations". The CRS Schemas in that document are now specified in GML 3.1.1 [OGC 04-092r4]. The XML examples and Application Schemas in Annexes E and F of [OGC 03-010r9] that are relevant to common CRSs are included in this paper, updated to match GML 3.1.1 and the recommended uses of the “ogc” URN namespace [OGC 05-010].

Many key contents of this paper are provided in the attached set of files, in the same zip file. These files include:


a) The example XML documents included and XML Schemas referenced in Clause 6 “Common coordinate reference systems”

b) The example XML documents included in Annex C “More example XML Schemas”


c) The example Application Schema and XML documents for Annex D "Example application schemas"

ii. Document contributor contact points


All questions regarding this document should be directed to the editor or the contributors:


		Person

		Company

		Address

		Phone

		Email



		Arliss Whiteside

		BAE SYSTEMS National Security Solutions

		10920 Technology Dr. 
San Diego, CA 
92127-1874 USA

		+1 858-592-1608

		Arliss.Whiteside@baesystems.com



		

		

		

		

		





iii. Revision history


		Date

		Release

		Editor

		Primary clauses modified

		Description



		2004-12-17

		0.0.0

		Arliss Whiteside

		All

		Initial version



		2005-01-07

		0.0.0

		Arliss Whiteside

		6.2.2, 6.3.2, 6.5.2, C.2

		Changes referencing of EPSG coordinate axis objects



		2005-01-28

		1.0.0

		Arliss Whiteside

		Cover, i, 6.2.2, 6.3.2, 6.5.2, C.2

		Removed changes for referencing of EPSG coordinate axis objects, editing as approved Discussion Paper





iv. Changes to the OGC Abstract Specification


The OGC™ Abstract Specification does not require changes to accommodate the technical contents of this document.


v. Future work


Improvements of this document are needed to modify the XML schemas, and the corresponding XML examples, to reflect recent changes in the Topic 2 UML model [OGC 04-046r3].

Foreword


This OGC™ Recommendation Paper supersedes parts of the previous OGC Recommendation Paper numbered 03-010r9, titled "Recommended XML encoding of coordinate reference system definitions". This document is based on the GML 3.1.1 OGC Recommendation Paper [04-092r4]. That document uses XML Schemas as specified by the W3C.


This document contains five annexes, all informative except Annex B.


Attention is drawn to the possibility that some of the elements of this document may be the subject of patent rights. The Open Geospatial Consortium Inc. shall not be held responsible for identifying any or all such patent rights.


Introduction


This document recommends standard XML encodings of data defining some commonly-used coordinate reference systems, including geographic, projected, and vertical CRSs. These recommended encodings are based on GML 3.1.1. These common CRS definitions will often be referenced in data transferred between client and server software that implements various standardised interfaces. This specified definition data encoding is expected to be used by multiple OGC Implementation Specifications. That is, each of these specifications is expected to use a subset and/or superset of this recommended definition data.


The position or location of a point can be described using coordinates. Such coordinates are unambiguous only when the coordinate reference system on which those coordinates are based is fully defined. Each position is described by a set of coordinates based on a specified coordinate reference system. Coordinates are often used in datasets in which all coordinates belong to the same coordinate reference system. This paper specifies XML encoding of data defining some coordinate reference systems.


Recommended XML/GML 3.1.1 encoding of common CRS definitions 

1 Scope


This OGC™ Recommendation Paper specifies standard XML encodings of definition data for commonly-used coordinate reference systems (CRSs), including geographic, projected, and vertical CRSs. Compound CRSs combining a vertical CRS with a 2D geographic or projected CRS are also covered.

These recommended encodings are based on GML 3.1.1. This encoding is intended for use when referencing or transferring such definition data between client and server software that uses OGC standard interfaces, as specified in other documents. The expected uses of this definition data transfer include those described in Annex A of this document.


The scope of this encoding does not include geocentric, engineering, image, temporal, and derived CRSs.

This Recommendation Paper specifies standard XML encodings of common CRS definition data applicable to multiple separate OGC interface Implementation Specifications. Each such Implementation Specification should specify one or more subsets and/or supersets of the definition data specified herein, each to be used for one or more purposes. That is, for each operation specified, the Implementation Specification should specify which specific CRSs should be supported.

This document also defines a Profile of GML 3.1.1 for these commonly-used CRSs. That profile includes all the elements and types in all the XML Schema fragments listed herein. That profile omits essentially all the CRS-related GML 3.1.1 elements and types not discussed in this document.

2 Conformance


Conformance with this specification shall be checked using all the relevant tests specified in each separate specification that normatively references this specification, and specifically references the applicable parts of this specification. Those specifications are expected to expand and specialize the conformance requirements stated in Annex B (normative) of this document.

3 Normative references

The following normative documents contain provisions which, through reference in this text, constitute provisions of this specification. For dated references, subsequent amendments to, or revisions of, any of these publications do not apply. For undated references, the latest edition of the normative document referred to applies.


European Petroleum Survey Group: EPSG Geodesy Parameters V 6.6, available through www.epsg.org

IETF RFC 2141 (May 1997), URN Syntax, R. Moats <http://www.ietf.org/rfc/rfc2141.txt>


IETF RFC 2396 (August 1998), Uniform Resource Identifiers (URI): Generic Syntax, Berners-Lee, T., Fielding, N., and Masinter, L., eds., <http://www.ietf.org/rfc/rfc2396.txt>


ISO 8601, Data elements and interchange formats - Information interchange Representation of dates and times

ISO 19105:2000, Geographic information — Conformance and Testing

ISO 19109:2004, Geographic Information – Rules for Application Schemas

ISO 19115:2003, Geographic information — Metadata

OGC 04-024, Geographic information — Web Map Service interface, v1.3.0


OGC 04-046r3, The OpenGIS Abstract Specification, Topic 2: Spatial referencing by coordinates

OGC 04-092r4, Geography Markup Language (GML) version 3.1.1 schemas (draft)

OGC 05-008, OGC Web Services Common Specification

OGC 05-010, URNs of definitions in ogc namespace

W3C Recommendation 6 October 2000, Extensible Markup Language (XML) 1.0 (Second Edition), http://www.w3.org/TR/REC-xml


W3C Recommendation 2 May 2001: XML Schema Part 0: Primer, http://www.w3.org/TR/2001/REC-xmlschema-0-20010502/

W3C Recommendation 2 May 2001: XML Schema Part 1: Structures, http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/

W3C Recommendation 2 May 2001: XML Schema Part 2: Datatypes, http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/

4 Terms and definitions


For the purposes of this specification, many of the definitions specified in Clauses 4 of the OGC Abstract Specification Topic 2 [04-046r3] and OWS Common Specification [OGC 05-008] shall apply. In addition, the following terms and definitions apply.


Application Schema


conceptual schema for data required by one or more applications [ISO 19101]


GML Application Schema


an XML Schema written according to the GML 3 rules for Application Schemas, which defines a vocabulary of geographic objects for a particular domain of discourse [GML 3.0]


object


an XML document element of a type derived from AbstractGMLType [GML 3.0]


profile


specified logical subset of XML Schema specified elements and types, defined to enhance interoperability and to curtail ambiguity [adapted from GML 3.0]


sequence


finite, ordered collection of related items (objects or values) that may be repeated [ISO 19107]

set


unordered collection of related items (objects or values) with no repetition [ISO 19107]


Uniform Resource Identifier (URI) 


simple and extensible means for identifying a resource; a short string or address; classified as a name, a locator, or both [RFC 2396]


5 Conventions


5.1 Symbols (and abbreviated terms)


CRS
Coordinate Reference System


EPSG
European Petroleum Survey Group

GML
Geography Markup Language


IETF
Internet Engineering Task Force


ISO
International Organization for Standardization


OGC
Open Geospatial Consortium


OWS
OGC Web Service, or Open Web Service


TBD
To Be Determined

TBR
To Be Reviewed

UML
Unified Modeling Language


URI
Universal Resource Identifier


URL
Uniform Resource Locator


URN
Universal Resource Name


WKT
Well Known Text


XML
eXtensible Markup Language


1D
One Dimensional


2D
Two Dimensional


3D
Three Dimensional


5.2 UML Notation


All diagrams in this document are Unified Modeling Language (UML) class diagrams, as described in Subclause 5.2 of [OGC 05-008].


5.3 Document terms and definitions


This document uses the specification terms defined in Subclause 5.3 of [OGC 05-008].


6 Common coordinate reference systems


6.1 Introduction

This clause specifies how to define many commonly-used coordinate reference systems, including geographic, projected, and vertical CRSs. Compound CRSs combining a vertical CRS with a 2D geographic or projected CRS are also covered.

These CRS definitions are usually not required to be transferred between servers and clients that use OGC Web Services (OWS) Implementation Specifications. However, these definitions shall be used in defining coordinate operations, and shall be referenced by those coordinate operation definitions.


References to these CRSs shall be in the form of the anyURI data type specified by XML Schema. As specified in Subclause 10.3 of “OWS common implementation specification” [OGC 05-008], such an anyURI value can be either a URL with standard form or a URN in the “ogc” URN namespace. As specified in Subclause 7.1 of “URNs for definitions in the ogc namespace” [OGC 05-010], URNs in the “ogc” URN namespace can be used to reference any CRS defined in the EPSG database. As specified in Subclause 8.2 of the same document, URNs in the “ogc” URN namespace can be used to reference any CRS defined in Annex B of WMS 1.3 [OGC 04-024].

6.2 Geographic CRSs


6.2.1 Simple UML model

Figure 1 is a simplified UML class diagram extracted from Topic 2 that shows all the concrete (non-abstract) object classes and associations related to the SC_GeographicCRS class. To keep this diagram simple, none of the class attributes is displayed. This diagram shows that the SC_GeographicCRS uses a CS_GeodeticCS, which has either two or three usesAxis associations to CS_CoordinateSystemAxis.


CD_PrimeMeridian


(from CD_Datum)


CD_Ellipsoid


(from CD_Datum)


CD_GeodeticDatum


(from CD_Datum)


1


0..*


+usesPrimeMeridian


1


0..*


1


0..*


+usesEllipsoid


1


0..*


SC_GeographicCRS


(from SC_CoordinateReferenceSystem)


0..*


1


0..*


+usesDatum1


CS_CoordinateSystemAxis


(from CS_CoordinateSystem)


CS_EllipsoidalCS


(from CS_CoordinateSystem)


1


0..*


+usesCS1


0..*


2..3


0..*


+usesAxis


2..3


0..*




Figure 1 — GeographicCRS simple UML class diagram


Notice that the GeographicCRS class does NOT include or reference any coordinate operations, which can be used to transform or convert geographic coordinates into any other coordinate reference system.


6.2.2 XML document example


An example XML document defining a GeographicCRS is:


<?xml version="1.0" encoding="UTF-8"?>


<GeographicCRS xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/gml fragmentGeographicCRSs.xsd" gml:id="EPSG4277">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26-->



<srsName>OSGB 1936</srsName>



<srsID>




<name codeSpace="urn:ogc:def:crs:EPSG:6.0:">4277</name>



</srsID>



<usesEllipsoidalCS>




<EllipsoidalCS gml:id="EPSG6402">





<csName>ellipsoidal</csName>





<csID>






<name codeSpace="urn:ogc:def:cs:EPSG:6.0:">6402</name>





</csID>





<usesAxis>






<CoordinateSystemAxis gml:id="EPSG9901" gml:uom="urn:ogc:def:uom:OGC:0.0:degree">







<name>Geodetic latitude in north direction with degree units</name>







<axisID>








<name codeSpace="urn:ogc:def:axis:EPSG:6.0:">9901</name>







</axisID>







<axisAbbrev>Lat</axisAbbrev>







<axisDirection>north</axisDirection>






</CoordinateSystemAxis>





</usesAxis>





<usesAxis>






<CoordinateSystemAxis gml:id="EPSG9902" gml:uom="urn:ogc:def:uom:OGC:0.0:degree">







<name>Geodetic longitude in east direction with degree units</name>







<axisID>








<name codeSpace="urn:ogc:def:axis:EPSG:6.0:">9902</name>







</axisID>







<axisAbbrev>Lon</axisAbbrev>







<axisDirection>east</axisDirection>






</CoordinateSystemAxis>





</usesAxis>




</EllipsoidalCS>



</usesEllipsoidalCS>



<usesGeodeticDatum>




<GeodeticDatum gml:id="EPSG6277">





<datumName>OSGB 1936</datumName>





<datumID>






<name codeSpace="urn:ogc:def:datum:EPSG:6.0:">6277</name>





</datumID>





<usesPrimeMeridian>






<PrimeMeridian gml:id="EPSG8901">







<meridianName>Greenwich</meridianName>







<meridianID>








<name codeSpace="urn:ogc:def:meridian:EPSG:6.0:">8901</name>







</meridianID>







<greenwichLongitude>








<angle uom="urn:ogc:def:uom:OGC:1.0:degree">0</angle>







</greenwichLongitude>






</PrimeMeridian>





</usesPrimeMeridian>





<usesEllipsoid>






<Ellipsoid gml:id="EPSG7001">







<ellipsoidName>Airy 1830</ellipsoidName>







<ellipsoidID>








<name codeSpace="urn:ogc:def:ellipsoid:EPSG:6.0:">7001</name>







</ellipsoidID>







<semiMajorAxis uom="urn:ogc:def:uom:OGC:1.0:meter">6377563.396</semiMajorAxis>







<secondDefiningParameter>








<inverseFlattening uom="urn:ogc:def:uom:OGC:1.0:unity">299.3249646</inverseFlattening>







</secondDefiningParameter>






</Ellipsoid>





</usesEllipsoid>




</GeodeticDatum>



</usesGeodeticDatum>


</GeographicCRS>

The corresponding GML 3.1.1 XML Schema fragment for defining a GeographicCRS is attached in the file fragmentGeographicCRSs.xsd.


NOTE 
GML 3.1.1 is not yet fully harmonized with Abstract Specification Topic 2, so the above XML document template and the referenced XML Schema fragment are not fully consistent with the following UML class diagram.


6.2.3 Full UML model


Figure 2 is a more complete UML class diagram extracted from Topic 2 that shows essentially all the classes and associations related to the SC_GeographicCRS class. This diagram again shows that the SC_GeographicCRS uses a CS_GeodeticCS, which has either two or three usesAxis associations to CS_CoordinateSystemAxis.


RS_ReferenceSystem


+ name : RS_Identifier


+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>>


SC_CRS


+ scope [0..*] : CharacterString


(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier


+ alias [0..*] : GenericName


+ remarks [0..1] : CharacterString


(from IO_IdentifiedObject)


<<Abstract>>


SC_SingleCRS


(from SC_CoordinateReferenceSystem)


<<Abstract>>


CD_Datum


+ anchorPoint [0..1] : CharacterString


+ realizationEpoch [0..1] : Date


+ domainOfValidity [0..1] : EX_Extent


+ scope [0..*] : CharacterString


(from CD_Datum)


<<Abstract>>


CS_EllipsoidalCS


(from CS_CoordinateSystem)


CS_AxisDirection


+ east


+ north


(from CS_CoordinateSystem)


<<CodeList>>


CS_CoordinateSystemAxis


+ axisAbbrev : CharacterString


+ axisDirection : CS_AxisDirection


+ axisUnitID : UnitOfMeasure


+ minimumValue [0..1] : Number


+ maximumValue [0..1] : Number


+ rangeMeaning [0..1] : CS_RangeMeaning


(from CS_CoordinateSystem)


CS_CoordinateSystem


(from CS_CoordinateSystem)


<<Abstract>>


0..*


0..*


+usesAxis


0..*


{ordered}


0..*


IO_IdentifiedObject


+ name : RS_Identifier


(from IO_IdentifiedObject)


<<Abstract>>


EX_Extent


(from EX_Extent)


<<DataType>>


MD_Identifier


+ authority [0..1] : CI_Citation


+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString


+ version [0..1] : CharacterString


(from RS_ReferenceSystem)


Defined in 


ISO 19115


CS_RangeMeaning


+ exact


+ wraparound


(from CS_CoordinateSystem)


<<CodeList>>


SC_GeographicCRS


(from SC_CoordinateReferenceSystem)


1


0..*


+usesCS


1


0..*


CD_Ellipsoid


+ semiMajorAxis : Length


+ secondDefiningParameter : CD_SecondDefiningParameter


(from CD_Datum)


CD_PrimeMeridian


+ greenwichLongitude : Angle = 0


(from CD_Datum)


CD_GeodeticDatum


(from CD_Datum)


0..*


1


0..*


+usesDatum1


1


0..*


+usesEllipsoid


1


0..*


1


0..*


+usesPrimeMeridian


1


0..*




Figure 2 — GeographicCRS full UML class diagram


6.3 Projected CRSs


6.3.1 Simple UML model

Figure 3 is a simplified UML class diagram for projected CRSs extracted from Topic 2. This diagram shows the concrete (non-abstract) object classes and associations related to the SC_ProjectedCRS class, except for the classes and associations for the CC_Conversion class (discussed in Subclause 6.4) used as the definedByConversion and the SC_GeographicCRS class (discussed in Subclause 6.2) that serves as the baseCRS.


SC_GeographicCRS


(from SC_CoordinateReferenceSystem)


SC_ProjectedCRS


(from SC_CoordinateReferenceSystem)


1


0..*


+baseCRS1


0..*


CC_Conversion


(from CC_CoordinateOperation)


1


0..*0..*


1+definedByConversion


CS_CartesianCS


(from CS_CoordinateSystem)


1


0..*


+usesCS1


0..*


CS_CoordinateSystemAxis


(from CS_CoordinateSystem)


2


0..*


2


0..*


+usesAxis




Figure 3 — ProjectedCRS simple UML class diagram


6.3.2 XML document example


An example XML document defining a ProjectedCRS is:


<?xml version="1.0" encoding="UTF-8"?>


<ProjectedCRS xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/gml fragmentProjectedCRSs.xsd" gml:id="EPSG27700">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26-->



<srsName>OSGB 1936 / British National Grid</srsName>



<srsID>




<name codeSpace="urn:ogc:def:crs:EPSG:6.0:">27700</name>



</srsID>



<baseCRS xlink:href="urn:ogc:def:crs:EPSG:6.0:4277"/>



<definedByConversion xlink:href="urn:ogc:def:coordinateOperation:EPSG:6.0:19916"/>



<usesCartesianCS>




<CartesianCS gml:id="EPSG4400">





<csName>Easting and Northing in metres</csName>





<csID>






<name codeSpace="urn:ogc:def:cs:EPSG:6.0:">4400</name>





</csID>





<usesAxis>






<CoordinateSystemAxis gml:id="EPSG9906" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">







<name>Easting in east direction with metre units </name>







<axisID>








<name codeSpace="urn:ogc:def:axis:EPSG:6.0:">9906</name>







</axisID>







<axisAbbrev>E</axisAbbrev>







<axisDirection>east</axisDirection>






</CoordinateSystemAxis>





</usesAxis>





<usesAxis>






<CoordinateSystemAxis gml:id="EPSG9907" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">







<name>Northing in north direction with metre units </name>







<axisID>








<name codeSpace="urn:ogc:def:axis:EPSG:6.0:">9907</name>







</axisID>







<axisAbbrev>N</axisAbbrev>







<axisDirection>north</axisDirection>






</CoordinateSystemAxis>





</usesAxis>




</CartesianCS>



</usesCartesianCS>


</ProjectedCRS>

This example references the baseCRS, which is a GeographicCRS such as discussed in Subclause 6.2. This example also references the definedByConversion, which is a coordinate Conversion such as discussed in Subclause 6.4.


The corresponding GML 3.1.1 XML Schema fragment for defining a ProjectedCRS is attached in the file fragmentProjectedCRSs.xsd.


6.3.3 Full UML model


Figure 4 is a more complete UML class diagram for projected CRSs extracted from Topic 2. This diagram shows the classes and associations related to the SC_ProjectedCRS class, except for the classes and associations for the CC_Conversion class (discussed in Subclause 6.4) used as the definedByConversion and the SC_GeographicCRS class (discussed in Subclause 6.2) that serves as the baseCRS.


RS_ReferenceSystem


+ name : RS_Identifier


+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>>


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier


+ alias [0..*] : GenericName


+ remarks [0..1] : CharacterString


(from IO_IdentifiedObject)


<<Abstract>>


EX_Extent


(from EX_Extent)


<<DataType>>


Defined in 


ISO 19115


MD_Identifier


+ authority [0..1] : CI_Citation


+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString


+ version [0..1] : CharacterString


(from RS_ReferenceSystem)


SC_CRS


+ scope [0..*] : CharacterString


(from SC_CoordinateReferenceSystem)


<<Abstract>>


CS_CoordinateSystemAxis


+ axisAbbrev : CharacterString


+ axisDirection : CS_AxisDirection


+ axisUnitID : UnitOfMeasure


+ minimumValue [0..1] : Number


+ maximumValue [0..1] : Number


+ rangeMeaning [0..1] : CS_RangeMeaning


(from CS_CoordinateSystem)


SC_SingleCRS


(from SC_CoordinateReferenceSystem)


<<Abstract>>


SC_GeneralDerivedCRS


(from SC_CoordinateReferenceSystem)


<<Abstract>>


CC_Conversion


(from CC_CoordinateOperation)


SC_GeographicCRS


(from SC_CoordinateReferenceSystem)


SC_ProjectedCRS


(from SC_CoordinateReferenceSystem)


CS_CoordinateSystem


(from CS_CoordinateSystem)


<<Abstract>>


CS_CartesianCS


(from CS_CoordinateSystem)


CS_AxisDirection


+ east


+ north


+ south


+ west


(from CS_CoordinateSystem)


<<CodeList>>


CS_RangeMeaning


+ exact


+ wraparound


(from CS_CoordinateSystem)


<<CodeList>>


IO_IdentifiedObject


+ name : RS_Identifier


(from IO_IdentifiedObject)


<<Abstract>>


+usesAxis


0..*


{ordered}


0..*


+definedBy


Conversion


1


0..*


1


+baseCRS1


0..*


1


0..*


0..*


0..*


0..*


0..*


+usesCS11


0..*




Figure 4 — ProjectedCRS full UML class diagram


6.4 Coordinate conversions


6.4.1 Simple UML model


A SC_ProjectedCRS is defined by a CC_Conversion, which is a concrete subtype of the CC_CoordinateOperation class. Figure 5 is a simplified UML class diagram for a CC_Conversion used for a projected CRS. This diagram shows the concrete (non-abstract) objects classes and associations related to the CC_Conversion class when used to define a SC_ProjectedCRS, except for the CC_ParameterValueGroup and CC_OperationParameterGroup classes, which are not normally useful in defining a projected CRS.


+usesParameter


CC_OperationParameter


(from CC_CoordinateOperation)


CC_OperationMethod


(from CC_CoordinateOperation)


0..*


0..*


0..*


0..*


CC_ParameterValue


(from CC_CoordinateOperation)


<<Union>>


0..*


1


0..*


+valueOfParameter1


CC_Conversion


(from CC_CoordinateOperation)


1


0..*


+usesMethod


1


0..*


0..*


1


+usesValue0..*


1




Figure 5 — Conversion UML simple UML class diagram


To keep this diagram simple, none of the class attributes are displayed. The definedByConversion association from the SC_ProjectedCRS class (inherited from the abstract SC_GeneralDerivedCRS class) is also not shown. For a projected CRS, this Conversion is usually defined by about five instances of the CC_OperationParameter and CC_ParameterValue classes, as needed.


6.4.2 XML document example

An example XML document defining a CC_Conversion is:


<?xml version="1.0" encoding="UTF-8"?>


<Conversion xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/gml fragmentConversions.xsd" gml:id="EPSG19916">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26-->



<!-- SourceCRS: EPSG:4277 OSGB 1936 -->



<!-- TargetCRS: EPSG:27700 OSGB 1936 / British National Grid -->



<coordinateOperationName>Transverse Mercator</coordinateOperationName>



<coordinateOperationID>




<name codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name>



</coordinateOperationID>



<usesMethod>




<OperationMethod gml:id="EPSG9807">





<methodName>Transverse Mercator</methodName>





<methodID>






<name codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name>





</methodID>





<methodFormula>See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. </methodFormula>





<sourceDimensions>2</sourceDimensions>





<targetDimensions>2</targetDimensions>





<usesParameter>






<OperationParameter gml:id="EPSG8801">







<parameterName>Latitude of natural origin</parameterName>







<parameterID>








<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name>







</parameterID>






</OperationParameter>





</usesParameter>





<usesParameter>






<OperationParameter gml:id="EPSG8802">







<parameterName>Longitude of natural origin</parameterName>







<parameterID>








<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name>







</parameterID>






</OperationParameter>





</usesParameter>





<usesParameter>






<OperationParameter gml:id="EPSG8805">







<parameterName>Scale factor at natural origin</parameterName>







<parameterID>








<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name>







</parameterID>






</OperationParameter>





</usesParameter>





<usesParameter>






<OperationParameter gml:id="EPSG8806">







<parameterName>False Easting</parameterName>







<parameterID>








<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name>







</parameterID>






</OperationParameter>





</usesParameter>





<usesParameter>






<OperationParameter gml:id="EPSG8807">







<parameterName>False Northing</parameterName>







<parameterID>








<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name>







</parameterID>






</OperationParameter>





</usesParameter>




</OperationMethod>



</usesMethod>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:degree">49</value>




<valueOfParameter xlink:href="#EPSG8801" xlink:title="Latitude of natural origin"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:degree">-2</value>




<valueOfParameter xlink:href="#EPSG8802" xlink:title="Longitude of natural origin"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value>




<valueOfParameter xlink:href="#EPSG8805" xlink:title="Scale factor at natural origin"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value>




<valueOfParameter xlink:href="#EPSG8806" xlink:title="False Easting"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</value>




<valueOfParameter xlink:href="#EPSG8807" xlink:title="False Northing"/>



</usesValue>


</Conversion>

The corresponding GML 3.1.1 XML Schema fragment for defining a CC_Conversion is attached in the file fragmentConversions.xsd. That XML Schema fragment omits the encoding of the CC_OperationParameterGroup and CC_ParameterValueGroup classes, plus the validArea and positionalAccuracy attributes, in the UML model.

6.4.3 Full UML model


Figure 6 is a more complete UML class diagram for a CC_Conversion used for a projected CRS. This diagram shows the classes and associations related to the CC_Conversion class when used to define a SC_ProjectedCRS, except for the:


a) Contents of the DQ_PositionalAccuracy and EX_Extent classes, defined in ISO 19115


b) CC_ParameterValueGroup and CC_OperationParameterGroup classes, which are not normally useful in defining a projected CRS


c) Details of the SC_GeneralDerivedCRS class, because they are shown on the diagram in Figure 4

CC_SingleOperation


(from CC_CoordinateOperation)


<<Abstract>>


DQ_PositionalAccuracy


(from DQ_DataQuality)


<<Abstract>>


CC_CoordinateOperation


+ operationVersion [0..1] : CharacterString


+ domainOfValidity [0..1] : EX_Extent


+ scope [0..*] : CharacterString


+ coordinateOperationAccuracy [0..*] : DQ_PositionalAccuracy


(from CC_CoordinateOperation)


<<Abstract>>


EX_Extent


(from EX_Extent)


<<DataType>>


CC_Conversion


+ operationVersion [0..0] : CharacterString


(from CC_CoordinateOperation)


SC_GeneralDerivedCRS


(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObject


+ name : RS_Identifier


(from IO_IdentifiedObject)


<<Abstract>>


Defined in 


ISO 19115


+definedByConversion


1


0..*


1


0..*


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier


+ alias [0..*] : GenericName


+ remarks [0..1] : CharacterString


(from IO_IdentifiedObject)


<<Abstract>>


CC_ParameterValue


+ value : Measure


+ stringValue : CharacterString


+ integerValue : Integer


+ booleanValue : Boolean


+ valueList : Sequence<Measure>


+ integerValueList : Sequence<Integer>


+ valueFile : CharacterString


(from CC_CoordinateOperation)


<<Union>>


CC_OperationParameter


(from CC_CoordinateOperation)


CC_OperationMethod


+ formula : CharacterString


+ sourceDimensions : Integer


+ targetDimensions : Integer


(from CC_CoordinateOperation)


CC_GeneralOperationParameter


+ minimumOccurs [0..1] : Integer


(from CC_CoordinateOperation)


<<Abstract>>


CC_GeneralParameterValue


(from CC_CoordinateOperation)


<<Abstract>>


0..*


+valueOfParameter


1


0..*


1


0..*


+usesParameter


0..*


0..*


0..*


CC_Operation


(from CC_CoordinateOperation)


<<Abstract>>


0..*


1


0..*


+usesMethod


1


0..*


0..*


0..*


+usesValue0..*




Figure 6 — Conversion full UML class diagram


6.5 Vertical CRSs


6.5.1 Simple UML model

Figure 9 is a simplified UML class diagram for Vertical CRSs extracted from Topic 2. This diagram shows the concrete (non-abstract) object classes and associations related to the SC_VerticalCRS class.


CD_VerticalDatum


(from CD_Datum)


SC_VerticalCRS


(from SC_CoordinateReferenceSystem)


CS_CoordinateSystemAxis


(from CS_CoordinateSystem)


CS_VerticalCS


(from CS_CoordinateSystem)


+usesDatum1


0..*0..*


1


0..*


+usesAxis


1


+usesCS


11


0..*


0..*


1


0..*




Figure 7 — VerticalCRS simple UML class diagram


6.5.2 XML document example


An example XML document defining a VerticalCRS is:


<?xml version="1.0" encoding="UTF-8"?>


<VerticalCRS xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/gml fragmentVerticalCRSs.xsd" gml:id="EPSG5701">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26-->



<srsName>Newlyn</srsName>



<srsID>




<name codeSpace="urn:ogc:def:crs:EPSG:6.0:">5701</name>



</srsID>



<usesVerticalCS>




<VerticalCS gml:id="EPSG6499">





<csName>Height up in metres</csName>





<csID>






<name codeSpace="urn:ogc:def:cs:EPSG:6.0:">6499</name>





</csID>





<usesAxis>






<CoordinateSystemAxis gml:id="EPSG9904" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">







<name>Gravity-related height in up direction with metre units</name>







<axisID>








<name codeSpace="urn:ogc:def:axis:EPSG:6.0:">9904</name>







</axisID>







<axisAbbrev>H</axisAbbrev>







<axisDirection>up</axisDirection>






</CoordinateSystemAxis>





</usesAxis>




</VerticalCS>



</usesVerticalCS>



<usesVerticalDatum>




<VerticalDatum gml:id="EPSG5101">





<datumName>Ordnance Datum Newlyn</datumName>





<datumID>






<name codeSpace="urn:ogc:def:datum:EPSG:6.0:">5101</name>





</datumID>





<verticalDatumType codeSpace="urn:ogc:def:verticalDatumType:OGC:1.0:">geoidal</verticalDatumType>




</VerticalDatum>



</usesVerticalDatum>


</VerticalCRS>

The corresponding GML 3.1.1 XML Schema fragment for defining a VerticalCRS is attached in the file fragmentVerticalCRSs.xsd.


6.5.3 Full UML model


Figure 10 is a more complete UML class diagram extracted from Topic 2 that shows more of the classes and associations related to the SC_VerticalCRS class.


RS_ReferenceSystem


+ name : RS_Identifier


+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>>


SC_CRS


+ scope [0..*] : CharacterString


(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier


+ alias [0..*] : GenericName


+ remarks [0..1] : CharacterString


(from IO_IdentifiedObject)


<<Abstract>>


CD_Datum


+ anchorPoint [0..1] : CharacterString


+ realizationEpoch [0..1] : Date


+ domainOfValidity [0..1] : EX_Extent


+ scope [0..*] : CharacterString


(from CD_Datum)


<<Abstract>>


CS_AxisDirection


+ down


+ up


(from CS_CoordinateSystem)


<<CodeList>>


IO_IdentifiedObject


+ name : RS_Identifier


(from IO_IdentifiedObject)


<<Abstract>>


EX_Extent


(from EX_Extent)


<<DataType>>


MD_Identifier


+ authority [0..1] : CI_Citation


+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString


+ version [0..1] : CharacterString


(from RS_ReferenceSystem)


Defined in 


ISO 19115


CS_RangeMeaning


+ exact


+ wraparound


(from CS_CoordinateSystem)


<<CodeList>>


CS_CoordinateSystemAxis


+ axisAbbrev : CharacterString


+ axisDirection : CS_AxisDirection


+ axisUnitID : UnitOfMeasure


+ minimumValue [0..1] : Number


+ maximumValue [0..1] : Number


+ rangeMeaning [0..1] : CS_RangeMeaning


(from CS_CoordinateSystem)


CS_CoordinateSystem


(from CS_CoordinateSystem)


<<Abstract>>


SC_SingleCRS


(from SC_CoordinateReferenceSystem)


<<Abstract>>


CD_VerticalDatum


(from CD_Datum)


CS_VerticalCS


(from CS_CoordinateSystem)


SC_VerticalCRS


(from SC_CoordinateReferenceSystem)


+usesAxis0..*


{ordered}


0..*


0..*


0..*


+usesDatum1


+usesCS


1


0..*0..*


1


0..*


1


0..*




Figure 8 — VerticalCRS full UML class diagram


6.6 Compound CRSs


6.6.1 Simple UML model

Figure 9 is a simplified UML class diagram for Compound CRSs extracted from Topic 2. This diagram shows the concrete (non-abstract) object classes and associations related to the SC_CompoundCRS class, when it combines a SC_ProjectedCRS and a SC_VerticalCRS. Similarly, a 2D SC_GeographicCRS could be combined with a SC_VerticalCRS. This figure does not detail the SC_ProjectedCRS class which is discussed in Subclause 6.3, or the SC_VerticalCRS class which is discussed in Subclause 6.5.


SC_ProjectedCRS


(from SC_CoordinateReferenceSystem)


SC_CompoundCRS


(from SC_CoordinateReferenceSystem)


1


0..*


+includesCRS (1)


1


0..*


SC_VerticalCRS


(from SC_CoordinateReferenceSystem)


1


0..*


+includesCRS (2)1


0..*




Figure 9 — CompoundCRS simple UML class diagram


6.6.2 XML document example


An example XML document defining a CompoundCRS is:


<?xml version="1.0" encoding="UTF-8"?>


<CompoundCRS xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/gml fragmentCompoundCRSs.xsd" gml:id="EPSG7405">



<!-- Primary editor: Arliss Whiteside. Last updated 2004-01-26-->



<srsName>OSGB36 /British National Grid + ODN</srsName>



<srsID>




<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">7405</name>



</srsID>



<validArea>




<description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man.


</description>



</validArea>



<includesCRS xlink:href="urn:ogc:def:crs:EPSG:6.3:27700" xlink:title="OSGB 1936 / British National Grid"/>



<includesCRS xlink:href="urn:ogc:def:cs:EPSG:6.3:6499" xlink:title="Newlyn"/>


</CompoundCRS>

This example uses URNs referencing the two included CRSs. Alternately, the complete definitions of those CRSs could be XML encoded (as shown in above examples) within the two includesCRS elements.


The corresponding GML 3.1.1 XML Schema fragment for defining a CompoundCRS is attached in the file fragmentCompoundCRSs.xsd.


6.6.3 Full UML model


Figure 10 is a more complete UML class diagram extracted from Topic 2 that shows more of the classes and associations related to the SC_CompoundCRS class, when it combines a Projected CRS and a VerticalCRS. Again, this figure does not detail the SC_ProjectedCRS class which is discussed in Subclause 6.3, or the SC_VerticalCRS class which is discussed in Subclause 6.5.


RS_ReferenceSystem


+ name : RS_Identifier


+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>>


SC_CRS


+ scope [0..*] : CharacterString


(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier


+ alias [0..*] : GenericName


+ remarks [0..1] : CharacterString


(from IO_IdentifiedObject)


<<Abstract>>


EX_Extent


(from EX_Extent)


<<DataType>>


MD_Identifier


+ authority [0..1] : CI_Citation


+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString


+ version [0..1] : CharacterString


(from RS_ReferenceSystem)


Defined in 


ISO 19115


SC_SingleCRS


(from SC_CoordinateReferenceSystem)


<<Abstract>>


SC_CompoundCRS


(from SC_CoordinateReferenceSystem)


2..*0..*


+includesCRS


2..*


{ordered}


0..*


SC_ProjectedCRS


(from SC_CoordinateReferenceSystem)


SC_GeneralDerivedCRS


(from SC_CoordinateReferenceSystem)


<<Abstract>>


CC_Conversion


(from CC_CoordinateOperation)


0..*


1


0..*


+definedBy


Conversion


1


SC_VerticalCRS


(from SC_CoordinateReferenceSystem)




Figure 10 — CompoundCRS full UML class diagram


7 Supporting information


This clause introduces information provided in the annexes supporting the encoding described in Clause 6:


· Annex A (informative) describes the expected OGC uses (or use cases) for transferring CRS and coordinate operation definition data.


· Annex B (normative) specifies the requirements for OGC Implementation Specification conformance to the CRS portions of GML 3.1.1, and an abstract test suite for checking such conformance. Requirements are also specified for compliance of Application Schemas.


· Annex C (informative) provides more example XML documents using the CRS Schemas.


· Annex D (informative) provides an example application schema based on the CRS Schemas, with corresponding example XML documents and UML models.


· Annex E (informative) describes some example operation methods.


Annex A
(informative)

Expected uses of CRS definition data


A.1
Introduction


The expected OGC uses (or use cases) for transferring CRS and coordinate operation definition data produce requirements to be satisfied by the XML encoding of that data. Three broad uses of such definition data transfer have been identified:


a) Use to transfer definition of a Coordinate Reference System (CRS), used by other geospatial data


b) Use to transfer definition of a Coordinate Transformation (CT), that can be performed by a coordinate transformation service


c) Use to transfer lineage or history of other geospatial data


Additional OGC uses of the proposed CRS and coordinate operation definition data might be identified in the future. These expected OGC uses assume the OGC is standardizing software-to-software interfaces (or Application Programming Interfaces, APIs) and associated data transfer formats, but is not (currently) trying to standardize human-computer interfaces.


Each OGC standard interface must allow both server and client software to be written that implements that interface. Simplicity of the interfaces is highly desirable, to simplify client software. Simplicity of server implementation software is somewhat important, but not as important as interface simplicity.


The following subclauses first discuss the multiple uses of definition data, the alternate ways in which definition data can be transferred, and then the three data transfer uses listed above.


A.2
Multiple uses of definition data


CRS and CT definition data can be used in at least three broad overlapping ways, to:


a) Describe a specific CRS or CT to a human user. Note that different human users need different degrees of definition detail.


b) Uniquely identify a specific CRS or CT to software. For a CRS, such identification can be used by software to check if different geospatial datasets are recorded using the same CRS, or to find additional data about a CRS that is stored elsewhere.


c) Provide data for performing coordinate transformations and conversions, useful to transformation software. For a CT, such data might be used to perform that transformation. For a CRS, such data might be used in transforming point positions to or from that CRS.


A.3
Alternative ways to transfer definition data


CRS and CT definition data can be transferred in three alternative ways:


a) Transfer only identifier and perhaps name, of each CRS or CT


b) Transfer complete definition, of each CRS or CT


c) Transfer partial definition with identifiers (and perhaps names) for remaining parts, of each CRS or CT


Only an identifier needs to be transferred for a complete CRS or CT, or for any part thereof, for any part that is well-known to the receiving software. Well-known usually means that some recognized authority has produced and published a complete specification of that part. Server software could have those well-known definitions coded into the software. Alternately, server software could be coded to access those definitions when needed from a separate service known to the server. Such a separate service may be maintained by the authority or by a third party.


In general, there will be several CRS and CT specification authorities that one server or client might use, separately and together. Of course, some software implementations may use no such authority, or only one such authority. One widely-used, publicly-available authority is the European Petroleum Survey Group (EPSG), and use of this authority is currently specified in several OGC Implementation Specifications. However, other and more private authorities exist and must be supported by some OGC standard interfaces, including military affiliated authorities (e.g., DIGEST). Somewhat private authorities are expected to be used for many engineering and image coordinate reference systems.


A complete CRS or CT specification must be transferred for a CRS or CT, or for any part thereof, for any part that is not well-known to the receiving software. Some server or client implementations could support no well-known CRS and/or CT definitions. More likely, some applications are expected to use some non-well-known CRS or CT definitions. For example, a grid coverage can use a CRS specific to that coverage. Also, an image coordinate transformation is likely to be specific to one image, and may not be supported by any authority that makes that CT well-known.


A.4
Use to transfer coordinate reference system definition


XML can be used to transfer the definition of a Coordinate Reference System (CRS) used by other geospatial data, especially data encoded using XML. In most cases, one geospatial dataset will use only one CRS. The definition of a CRS for a geospatial dataset can be transferred (usually through an OGC interface) for several different purposes, including:


a) Coordinate Transformation (CT) interface. The current Coordinate Transformation (CT) server interface allows use of XML to transfer definitions of CRSs. That is, a client can send the definition of one CRS that the client is requesting access, to server software. Similarly, the server software can send to a client the definition of one CRS that the client currently has access to.


b) Geography Markup Language (GML). The encoding of features in XML, now specified in the GML Implementation Specification, might use this CRS XML to define the CRS of a feature collection or feature.


c) Web Map Server (WMS) interface. A future version of the WMS interface might use XML to define the CRS that the client is requesting “map” data in. (The WMS interface does not currently use XML for this purpose.) In the current WMS interface, only well-known CRSs are supported, so only the identifier of that well-known CRS is transferred in a Get Map request.


d) Grid Coverage (GC) interface. A future version of the GC (access) interface might use XML to define the CRS used by a coverage, when requested by a client. (The current GC interface does not use XML for this purpose.) In the current draft GC interface, the CRS can be defined for one specific grid coverage, requiring transfer of a more complete specification of that CRS. That grid CRS is usually specified as a custom affine coordinate conversion or transformation from another CRS.


A.4.1
Current CRS transfer by low-level CT interface


The current low-level Coordinate Transformation (CT) Implementation Specification (OGC document 01-009) supports XML transfer of a CRS definition in one operation and in one attribute.


The createFromXML operation of the CS_CoordinateSystemFactory <<Interface>> class creates a CS_CoordinateSystem object from a XML character string. One server will implement one CS_CoordinateSystemFactory object. The signature of this UML operation is:


createFromXML (xml:CharacterString) : CS_CoordinateSystem


The “XML” read-only UML attribute of the CS_Info class allows a client to get an XML character string representation of an object, which can be either a CS_CoordinateSystem or a CS_Unit UML object. Objects of both the CS_CoordinateSystem and CS_Unit UML classes can be instantiated by multiple other objects visible to one client. Note that a CS_CoordinateSystem object can be created in several ways other than use of the createFromXML operation. The signature of this UML attribute is:


XML : CharacterString


In the createFromXML operation, and when the UML attribute is used to get XML for a CS_CoordinateSystem object, the XML DTD for CS_CoordinateSystem provided in Section 15.1.1 (pages 113 through 115) of 00-007r4 is used. Example XML using that XML DTD is provided in Section 15.1.2 (pages 116 and 117) of 01-009. (Because that XML DTD and example XML are each more than one page, they are not copied here.)


NOTE 
A future version of the Coordinate Transformation (CT) Implementation Specification could use XML in additional places, especially where use of WKT is now supported but use of XML is not now supported.


A.4.2
Current CRS transfer by ICT and high-level CT interfaces


A draft high-level Coordinate Transformation (CT) Implementation Specification (OGC document 01-013r1) supports XML transfer of a CRS definition by two operations. The same two operations are supported by the draft Image Coordinate Transformation (ICT) interface (OGC document 00-045r1). These two operations are provided to clients by the one Ground Coordinate Transformation Service <<Interface>> object. The UML operation signatures of these two operations are:


addTransformation (metadata : TransformationMetadata, 
format : TextFormat) : TransformationID


transformationMetadata (transformation : TransformationID, format : TextFormat) : TransformationMetadata


XML is one possible format used by the Transformation Metadata <<DataType>> class that is used by these two operations. The Transformation Metadata class contains three UML attributes, with the signatures:


sourceCS : CoordinateSystemDefinition


targetCS : CoordinateSystemDefinition


transformation [0..1]: TransformationDefinition


The CoordinateReferenceSystem XML element, with all its contents, specified in this document could to be used for each Coordinate System Definition instance in the Transformation Metadata. (However, the Transformation XML element specified in GML 3.1.1, with all their contents, alternately could be used for complete Transformation Metadata, including both the source and target CoordinateReferenceSystems.)


A.5
Use to transfer coordinate transformation (CT) definition


XML can be used to transfer the definition of a Coordinate Transformation (CT) in the interfaces to Coordinate Transformation (CT) services. These interfaces include the accepted (low level) CT Implementation Specification, OGC document 01-009. These interfaces also include a high-level CT interface now proposed in document 01-013, plus draft Image Coordinate Transformation interfaces documented in 00-045r1. These CT interfaces use XML to transfer CT definitions with and without associated source and target CRSs.


A.5.1
Current CT transfer by low-level CT Interface


The current low-level Coordinate Transformation (CT) Implementation Specification (OGC document 01-009) supports XML transfer of a CT definition in one operation and one attribute.


The createFromXML operation of the CT_MathTransformFactory <<Interface>> class creates a CT_MathTransform object from a XML character string. One server will implement one CT_MathTransformFactory object. The UML signature of this operation is:


createFromXML (xml:CharacterString) : CT_MathTransform


The “XML” read-only UML attribute of the CT_MathTransform class allows a client to get an XML character string representation of this UML object. Objects of the CT_MathTransform class can be instantiated by multiple UML objects visible to one client. Note that a CT_MathTransform object can be created in several ways other than use of the createFromXML operation. The signature of this UML attribute is:


XML : CharacterString


For both of these XML uses, the XML DTD for CT_MathTransform provided in Section 15.1.1 (page 113) of 01-009 is used. Example XML using that XML DTD is not provided in 01-009. The XML DTD for CT_MathTransform now in Section 15.1.1 is:


<!DOCTYPE CT_MathTransform [


<!ELEMENT CT_MathTransform (


CT_ConcatenatedTransform |


CT_InverseTransform |


CT_ParameterizedMathTransform |


CT_PassThroughTransform) >


<!ELEMENT CT_ParameterizedMathTransform (CT_Parameter*)>


<!ATTLIST CT_ParameterizedMathTransform


ClassName           CDATA    #REQUIRED


>


<!ELEMENT CT_PassThroughTransform (CT_MathTransform)>


<!ATTLIST CT_PassThroughTransform


FirstAffectedOrdinate   CDATA    #REQUIRED


>


<!ELEMENT CT_ConcatenatedTransform (CT_MathTransform*)>


<!ELEMENT CT_InverseTransform (CT_MathTransform)>


<!ELEMENT CT_Parameter EMPTY>


<!ATTLIST CT_Parameter


Name                CDATA    #REQUIRED


Value               CDATA    #REQUIRED


>


]>


NOTE 
This CT_MathTransform does not include any information on the source and target coordinate systems. Also, a future version of the low-level Coordinate Transformation (CT) Implementation Specification could use XML in additional places, especially where use of WKT is now supported but use of XML is not now supported.)


A.5.2
Current CT transfer by ICT and high-level CT interfaces


A draft high-level Coordinate Transformation (CT) interface specification (OGC document 01-013) supports XML transfer of a CT definition by two operations. The same two operations are supported by the draft Image Coordinate Transformation (ICT) interface (OGC document 00-045r1). These two operations are provided to clients by the one Ground Coordinate Transformation Service <<Interface>> object. The signatures of these two UML operations are:


addTransformation (metadata : TransformationMetadata, 
format : TextFormat) : TransformationID


transformationMetadata (transformation : TransformationID, format : TextFormat) : TransformationMetadata


XML is one possible format used by the Transformation Metadata <<DataType>> class that is used by these two operations. The Transformation Metadata class contains three UML attributes, with the signatures:


sourceCS : CoordinateSystemDefinition


targetCS : CoordinateSystemDefinition


transformation [0..1]: TransformationDefinition


The Transformation XML element specified in GML 3.1.1, with all their contents, could be used for a complete Transformation Metadata instance, including both the source and target CoordinateReferenceSystems. The Conversion XML element, with all its' contents probably can also be used for each Transformation Metadata instance.


A.6
Use to transfer dataset lineage or history


XML can be used to transfer the lineage or history of geospatial data, especially data encoded using XML. Such lineage information is specified by ISO 19115: Geographic information – Metadata to be part of the useful metadata about a dataset, and that metadata could be recorded in XML. (The OGC encourages use of ISO 19115 Metadata, but there are no uses of XML to transfer dataset lineage or history in current draft or accepted OGC Implementation Specifications.)


The lineage of a dataset, or of a part of a larger dataset, is likely to include the original CRS of the positions in that data, plus the sequence of coordinate transformations used to change these positions into the CRS in which the data is now recorded. Alternately, one concatenated coordinate transformation could be recorded that includes the original CRS and the sequence of coordinate transformations used. Similar metadata might be recorded for data still in the original CRS, but planned to be converted into a different CRS.


Annex B
(normative)
 
Conformance


B.1
Conformance requirements


Each OGC Implementation Specification that uses XML encoding to transfer data defining coordinate reference systems and/or coordinate operations shall transfer definition data that conforms to this Recommendation Paper. Each relevant data transfer situation specified by such a specification shall transfer data that contains the entire applicable subset of the definition data specified in this Paper. Each such data transfer should include any additional data needed. Each relevant OGC Implementation Specification shall clearly specify the contents, structure, and format of the XML encoded data transferred in each specified data transfer situation, usually partially specified as an Application Schema based on these CRS schemas.


NOTE 1
In many cases, an Implementation Specification will specify the Application Programming Interface (API) to service software. In those cases, each specified data transfer situation is each input and output argument of each operation in a UML model of the service interface. Of course, multiple operation arguments will often transfer the same possible data, and thus use the same subset of the definition data specified here. Also, multiple arguments may use the same subset of the definition data specified here, although different arguments use different subsets of that data.


NOTE 2
Many of the concrete XML elements defined in the CRS Schemas can be used without Application Schemas, if no contents extensions or restrictions are needed. However, the Conversion, Transformation, ParameterValue, and ParameterValueGroup elements should not be used for well-known coordinate operation methods having many element instances. Instead, an Application Schema that defines operation-method-specialized element names and contents should be prepared and standardized, see Subclause B.3.


Whenever coordinate reference system and/or coordinate operation definition data is transferred using XML encoding, the data contents and structure specified in GML shall be used wherever applicable. The data contents and structure aspects specified that shall be used include:


a) Name of each specified XML element and attribute


NOTE 3
When an Application Schema is used, the same name can be used in different namespaces.


b) Meaning of each specified name


c) Contents of each specified complexType


d) Sequence of elements included within each specified complexType


e) Multiplicity and optionality of each element and attribute in each specified complexType


f) Data type of each specified individual data item


When a data transfer situation requires a subset of the definition information specified, a suitable subset profile can be used. When a data transfer situation requires a superset of the definition information specified, a suitable Application Schema shall be specified, and its' use shall be required. Each such Application Schema shall conform to the Rules for Application Schemas specified in Subclause B.3. The changes permitted in an Application Schema include:


a) Add additional elements to a specified complexType, containing additional information


b) Omit a specified element, when not needed and that element is specified as being optional (minOccurs="0")


c) Remove some of the set of alternative elements in a specified <choice> data structure 


d) Make an optional element required (minOccurs not specified, default ="1")


e) Reduce specified maximum number-of-repetitions of an element


f) Change data type of an element to a more restrictive type


g) Restrict the meaning of a specified name, to match a restriction of an Implementation Specification


h) Specify standard contents and contents patterns for selected elements and attributes, for interoperability.


i) Specify standard XML and other documents to be referenced or otherwise used, for interoperability.


Many possible changes to the definition data specified here are not allowed, such as:


a) Completely change the definition of a specified name


b) Expand the set of alternative contents in a specified <choice> data structure


c) Make optional an element or attribute required in a specified complexType


d) Increase maximum number-of-repetitions of an element


e) Change data type of a specified element to a less restrictive type


f) Change the required order of elements in a specified complexType


B.2
Abstract test suite


Conformance of each application of these CRS Schemas shall be tested by inspecting the specification of each transferred XML encoded data structure and individual data item. The tested specification of XML encoded data shall include all Application Schemas used. This testing shall be done for each XML element and attribute that can be included in each specified data transfer. For each such XML element and attribute, the following questions shall be answered:


a) What is the (complete) meaning of this XML element or attribute?


b) Is this meaning part of the definition of an XML element or attribute specified herein? If not related, this data structure or item IS conformant.


c) Is this meaning similar to the meaning of any XML element or attribute specified herein? If not similar, this data structure or item IS conformant.


d) Is this meaning the same as, or a restriction of, the most similar meaning specified herein? If not the same or restricted, this data structure or item is NOT conformant.


e) Is the name of this XML element or attribute the same as the name of the corresponding item specified herein? If not the same name, this data structure or item is NOT conformant.


f) Is the type of this XML element or attribute the same as the type of the corresponding item specified herein, a subtype of that type, or a type with all the relevant contents of that type? If the type is not the same or equivalent, this item is NOT conformant.


If an individual XML element or attribute with a simpleType is being inspected, the questions continue:


g) Is the data type of this item the same as, or a subset of, the data type of the corresponding item specified here? If not the same or a subset, this data item is NOT conformant.


h) Does this element have a specified multiplicity range that extends outside the allowed multiplicity of the corresponding element specified here? If a larger multiplicity range is allowed, this element is NOT conformant.


If a XML element with a complexType is being inspected, the questions continue:


g) Do the contents of this complexType include all or a subset of the XML elements and attributes included in the corresponding complexType specified here? If doesn’t include all or a subset, this complexType is NOT conformant.


h) Do the contents of this complexType include the corresponding XML elements in the same required order? If not the same order, this complexType is NOT conformant.


i) If this complexType extends a complexType specified here, and the <documentation> element in that complexType specified here states constraints on inclusion of additional elements, and those constraints are not all satisfied, this complexType is NOT conformant.


j) For each XML element or attribute included in this complexType that has a corresponding item in the complexType specified here, is the element or attribute multiplicity (including optionality) compatible?


1) If the multiplicity and optionality are the same, this item IS conformant.


2) If an element or attribute is now omitted instead of optional, this item IS conformant.


3) If an element or attribute is now required instead of optional, this item IS conformant.


4) If an element or attribute is now optional instead of required, this item is NOT conformant.


5) If an element is now not repeated instead of being repeated one or more times, this item IS conformant.


6) If an element can now be repeated instead of not being repeated, this item is NOT conformant.


7) If the <documentation> element in the complexType specified here states a constraint on the multiplicity of this item and this constraint is not satisfied, this item is NOT conformant.


B.3
Rules for application schemas


B.3.1
Introduction


An Application Schema is an XML Schema that imports and builds upon one or more of the GML Schemas. Such an Application Schema defines one or more XML elements useful for transfer of encoded geospatial data. An Application Schema can specify a single top level element for use by an XML document, with the XML elements and types that it uses. That single top level XML element can be an object with identity, but this is not required. Such a Schema with its imported GML Schemas defines a vocabulary for a particular domain of discourse by defining and describing the terms of that vocabulary (see ISO TC/211 19109).


Most of the concrete XML elements defined in the CRS Schemas within GML can be used without Application Schemas, whenever no content extensions or restrictions are needed. An Application Schema shall be used whenever element contents extension is required, and should be used in some other cases to specify needed restrictions. That is, an Application Schema should be defined to extend and/or restrict elements as needed for a specific application, or a set of applications, to:


d) Add elements to contents of existing elements, for recording additional data about that item needed for that application.


e) Restrict the multiplicity of current contents elements, to eliminate flexibility not needed and perhaps confusing for that application.


f) Use a different element name, to be more easily understood in that specific application, primarily for elements that will be instantiated many times.


g) Specify standard contents and contents patterns for selected elements and attributes, as needed to improve interoperability.


h) Specify standard XML and other documents to be referenced or otherwise used, as needed to improve interoperability.


Application Schemas can thus be used for XML document contents extensions, restrictions, or both. Contents extension is expected to be often used to record additional data needed for applications. Contents restriction is expected to be frequently used to increase interoperability and reduce ambiguity when greater flexibility is not needed for applications. Extensions of existing concrete elements can be defined by extending that concrete element. In many cases, restrictions of existing concrete elements can be done by extending the abstract element from which that concrete element is derived, by adding somewhat different but corresponding extensions. 


Application Schemas could define an additional concrete element using by extending an abstract element, if needed. However, an additional concrete element using or extending an abstract element should not be defined if that concrete element is largely similar to an existing element, and thus probably should extend or use an existing concrete element. In many cases, the existing concrete elements that use an abstract element are believed to be largely exhaustive. This is particularly true when the existing concrete elements include one element that is quite general, such as the elements EngineeringCRS, DerivedCRS, EngineeringDatum, UserDefinedCS, OperationParameter, and OperationParameterGroup.


The Conversion, Transformation, ParameterValue, and ParameterValueGroup elements can be used for well-known coordinate operation methods, especially when only one instance of that element is needed for that operation method. However, these elements probably should not be used for well-known coordinate operation methods when many instances of that element are needed for one operation method. Instead, an Application Schema that defines operation-method-specialized element names and contents should be prepared for each such operation method. Subclause D.2 provides an example of such an Application Schema. For interoperability, a suitable geospatial information community should standardize each such Application Schema.


NOTE 
This use of Application Schemas follows the GML 3 patterns. This GML pattern is to generally use Application Schemas, especially when use of Application Schemas allows definition of XML Schema having: 1) complexTypes with more specific restrictions on the contents of elements, sometime in ways that allow XML parsers to more completely check for correct contents of XML documents, and 2) elements with more specific and understandable names, to make XML documents easier to understand by humans.


Conformance of an application of these CRS Schemas shall be tested by inspecting each Application Schema used, if any. Notice that the CRS set of GML Schemas can be used without an Application Schema, and such use is allowed whenever appropriate. To use those CRS Schemas without an Application Schema, any defined XML concrete element can be used as the basis for an XML document. There are about 30 such concrete elements defined that may be directly useful. In addition, all of those concrete elements can be used inside a GML 3 Dictionary element. Furthermore, all of those concrete elements or a Dictionary can be used inside a GenericMetaData element inside a metaDataProperty element, which can be included in many other elements.


The remainder of this subclause specifies the requirements (or rules) for an Application Schema to be considered conformant with this Recommendation Paper. Notice that it is clearly possible to develop Application Schemas that use the CRS Schemas specified herein which are valid XML Schemas but do not follow all these rules, and are thus not conformant with this Recommendation Paper.


B.3.2
General rules


All conformant Application Schemas shall be constructed by building upon one or more of the CRS set of GML 3.1.1 Schemas. Such a Schema shall be a valid XML Schema, as specified in the XML Schema specification.


Each application schema must declare a target namespace. This is the namespace in which the XML elements or terms of the vocabulary “live”. This shall not be the GML namespace (http://www.opengis.net/gml). It is conventional for the namespace identifier to be a URL controlled by the application schema author’s organization. A target namespace is declared in the application schema using the targetNamespace attribute of the schema element from XML Schema.


B.3.4
Import needed schemas


An Application Schema must import the necessary XML Schemas from GML 3, with the correct namespace assignment. For example, in order to define coordinate reference systems, it is necessary to import coordinateReferenceSystems.xsd, either directly or indirectly. Direct import is done by including the declaration:


<xsd:import namespace="http://www.opengis.net/gml" schemaLocation="../coordinateReferenceSystems.xsd"/>

Notice that the <import> element specifies that the components described in coordinateReferenceSystems.xsd are in the GML namespace http://www.opengis.net/gml. This namespace identifier must match the target namespace specified in the schema being imported, to ensure XML Schema validity.


The schemaLocation of the imported .xsd file can be a local reference or a URI reference to the file. A URI reference can be to some remote repository, such as the repository http://schemas.opengis.net/gml on the OGC web site. The above example assumes that the coordinateReferenceSystems.xsd file is stored locally at a location relative to this Application Schemas .xsd file.


In addition, the required import of a GML schema may be provided by the import of an equivalent subset schema as described in Subclause 7.14 of the GML 3.0 Implementation Specification, or by the import of an equivalent schema from a GML profile. These are all equivalent schemas with respect to satisfying the schema import requirements.


The above example imports coordinateReferenceSystems.xsd, which (directly and indirectly) includes the other five CRS Schemas plus nine other GML 3.1 Schemas. For some Application Schemas, coordinateReferenceSystems.xsd may not be needed, but one or more of the other CRS Schemas may be needed.


B.3.5
GML objects and properties


The content models of almost all (about 30) concrete elements are derived from gml:DefinitionType. These elements are ultimately derived from the AbstractGMLType and are thus GML Objects. These elements shall thus follow the GML class/property model, as specified in Subclause 7.2.2 of the GML 3.0 Implementation Specification. That is, the children of these elements must not be elements whose content models derive directly or indirectly from AbstractGMLType. The children of these elements are properties that describe that component.


B.3.6
Global and local names


Note that elements included in complex types that are defined with local names in an Application Schema will prevent derivation by restriction in another namespace, unless the local names are dropped in the restriction. Such complex types are appropriate for elements intended for use “as is” in their own namespace, and should be declared to be final=”restriction”. Elements included in complex types by reference to global elements support derivation by restriction in another namespace, allowing restriction of cardinality, and/or replacement by a member of a substitution group. Such complex types designed for derivation by restriction are appropriate “library types” for elements in substitution groups that cross namespaces.


B.4
UML models for application schemas


Each Application Schema can be produced by converting a UML model (or part of such a model), as required to comply with ISO 19118. If such a UML model is encoded, the XML encoding rules used should be similar to the encoding rules used for GML, as described in Annex G of [03-010r9].


To comply with this specification, each such UML model shall be based on the same UML model as these CRS Schemas. For Application Schemas, subclasses can be defined for most non-abstract classes in this UML model. A subclass can extend and/or restrict a current concrete class to:


i) Add UML attributes and/or navigable associations, for recording additional data about that class needed for that application.


j) Restrict the multiplicity of current attributes and/or navigable associations, to eliminate flexibility not needed and perhaps confusing for that application.


k) Use a different class name, to be more easily understood in that specific application, primarily for classes that will be instantiated many times.


l) Specify standard or default contents for selected UML attributes, for interoperability.


Application Schemas could define additional concrete subclasses of abstract classes in this UML model, if needed. However, additional concrete subclasses should not be defined that are largely similar to existing subclasses, and thus probably should be a subclass of an existing concrete subclass. In most cases, the existing concrete subclasses of an abstract class are believed to be largely exhaustive. This is particularly true when the existing subclasses include one subclass that is quite general, such as the classes SC_EngineeringCSR, SC_DerivedCRS, CD_EngineeringDatum, CS_UserDefinedCS, and CC_OperationParameter.


Annex C
(informative)

More XML document examples


C.1
Introduction


This annex provides additional example XML documents using the GML 3.1.1 Schemas. These XML examples omit some optional XML elements and attributes that might be included, and include some optional elements and attributes that might be omitted. This omission or inclusion was partially based on whether reasonable values were known for optional elements and attributes. The optional elements that are omitted in these examples XML include:


a) The “remarks” element in all IdentifierType and object elements.


b) The "scope" element in all elements that could include it.


These XML examples use patterns that are not specified in this document for values of the "gml:id" and "xlink:title" XML attributes.


NOTE 
For interoperability, the patterns or formats used for the values of these attributes must be specified somewhere, perhaps in or with an Application Schema.

C.2
Extended example XML for compound coordinate reference system


This subclause provides a more complete example XML document using the Coordinate Reference System subtype CompoundCRS XML element, with its contained elements, applied to a 3D compound coordinate reference system that combines a Projected and a Vertical CRS. Note that this Compound CRS Definition contains three other CRS definitions, for a Vertical CRS, a Geographic 2D CRS, and a Projected CRS.


<?xml version="1.0" encoding="UTF-8"?>


<CompoundCRS xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/gml gml/3.1.1/base/coordinateReferenceSystems.xsd" gml:id="EPSG7405">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26 -->



<srsName>OSGB36 /British National Grid + ODN</srsName>



<srsID>




<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">7405</name>



</srsID>



<validArea>




<description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. </description>



</validArea>



<includesCRS>




<ProjectedCRS gml:id="EPSG27700">





<srsName>OSGB 1936 / British National Grid</srsName>





<srsID>






<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">27700</name>





</srsID>





<validArea>






<description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. </description>





</validArea>





<baseCRS>






<GeographicCRS gml:id="EPSG4277">







<srsName>OSGB 1936</srsName>







<srsID>








<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">4277</name>







</srsID>







<validArea>








<description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. </description>







</validArea>







<usesEllipsoidalCS>








<EllipsoidalCS gml:id="EPSG6402">









<csName>ellipsoidal</csName>









<csID>










<name codeSpace="urn:ogc:def:cs:EPSG:6.3:">6402</name>









</csID>









<usesAxis>










<CoordinateSystemAxis gml:id="EPSG9901" gml:uom="urn:ogc:def:uom:OGC:1.0:degree">











<name>Geodetic latitude in north direction with degree units</name>











<axisID>












<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9901</name>











</axisID>











<axisAbbrev>Lat</axisAbbrev>











<axisDirection>north</axisDirection>










</CoordinateSystemAxis>









</usesAxis>









<usesAxis>










<CoordinateSystemAxis gml:id="EPSG9902" gml:uom="urn:ogc:def:uom:OGC:1.0:degree">











<name>Geodetic longitude in east direction with degree units</name>











<axisID>












<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9902</name>











</axisID>











<axisAbbrev>Lon</axisAbbrev>











<axisDirection>east</axisDirection>










</CoordinateSystemAxis>









</usesAxis>








</EllipsoidalCS>







</usesEllipsoidalCS>







<usesGeodeticDatum>








<GeodeticDatum gml:id="EPSG6277">









<datumName>OSGB 1936</datumName>









<datumID>










<name codeSpace="urn:ogc:def:datum:EPSG:6.3:">6277</name>









</datumID>









<usesPrimeMeridian>










<PrimeMeridian gml:id="EPSG8901">











<meridianName>Greenwich</meridianName>











<meridianID>












<name codeSpace="urn:ogc:def:meridian:EPSG:6.3:">8901</name>











</meridianID>











<greenwichLongitude>












<angle uom="urn:ogc:def:uom:OGC:1.0:degree">0</angle>











</greenwichLongitude>










</PrimeMeridian>









</usesPrimeMeridian>









<usesEllipsoid>










<Ellipsoid gml:id="EPSG7001">











<ellipsoidName>Airy 1830</ellipsoidName>











<ellipsoidID>












<name codeSpace="urn:ogc:def:ellipsoid:EPSG:6.3:">7001</name>











</ellipsoidID>











<semiMajorAxis uom="urn:ogc:def:uom:OGC:1.0:metre">6377563.396</semiMajorAxis>











<secondDefiningParameter>












<inverseFlattening uom="urn:ogc:def:uom:OGC:1.0:unity">299.3249646</inverseFlattening>











</secondDefiningParameter>










</Ellipsoid>









</usesEllipsoid>








</GeodeticDatum>







</usesGeodeticDatum>






</GeographicCRS>





</baseCRS>





<definedByConversion>






<Conversion gml:id="EPSG19916">







<coordinateOperationName>Transverse Mercator</coordinateOperationName>







<coordinateOperationID>








<name codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name>







</coordinateOperationID>







<usesMethod>








<OperationMethod gml:id="EPSG9807">









<methodName>Transverse Mercator</methodName>









<methodID>










<name codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name>









</methodID>









<methodFormula>See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. </methodFormula>









<sourceDimensions>2</sourceDimensions>









<targetDimensions>2</targetDimensions>









<usesParameter>










<OperationParameter gml:id="EPSG8801">











<parameterName>Latitude of natural origin</parameterName>











<parameterID>












<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name>











</parameterID>










</OperationParameter>









</usesParameter>









<usesParameter>










<OperationParameter gml:id="EPSG8802">











<parameterName>Longitude of natural origin</parameterName>











<parameterID>












<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name>











</parameterID>










</OperationParameter>









</usesParameter>









<usesParameter>










<OperationParameter gml:id="EPSG8805">











<parameterName>Scale factor at natural origin</parameterName>











<parameterID>












<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name>











</parameterID>










</OperationParameter>









</usesParameter>









<usesParameter>










<OperationParameter gml:id="EPSG8806">











<parameterName>False Easting</parameterName>











<parameterID>












<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name>











</parameterID>










</OperationParameter>









</usesParameter>









<usesParameter>










<OperationParameter gml:id="EPSG8807">











<parameterName>False Northing</parameterName>











<parameterID>












<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name>











</parameterID>










</OperationParameter>









</usesParameter>








</OperationMethod>







</usesMethod>







<usesValue>








<value uom="urn:ogc:def:uom:OGC:1.0:degree">49</value>








<valueOfParameter xlink:href="#EPSG8801" xlink:title="Latitude of natural origin"/>







</usesValue>







<usesValue>








<value uom="urn:ogc:def:uom:OGC:1.0:degree">-2</value>








<valueOfParameter xlink:href="#EPSG8802" xlink:title="Longitude of natural origin"/>







</usesValue>







<usesValue>








<value uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value>








<valueOfParameter xlink:href="#EPSG8805" xlink:title="Scale factor at natural origin"/>







</usesValue>







<usesValue>








<value uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value>








<valueOfParameter xlink:href="#EPSG8806" xlink:title="False Easting"/>







</usesValue>







<usesValue>








<value uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</value>








<valueOfParameter xlink:href="#EPSG8807" xlink:title="False Northing"/>







</usesValue>






</Conversion>





</definedByConversion>





<usesCartesianCS>






<CartesianCS gml:id="EPSG4400">







<csName>Easting and Northing in metres</csName>







<csID>








<name codeSpace="urn:ogc:def:cs:EPSG:6.3:">4400</name>







</csID>







<usesAxis>








<CoordinateSystemAxis gml:id="EPSG9906" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">









<name>Easting in east direction with metre units</name>









<axisID>










<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9906</name>









</axisID>









<axisAbbrev>E</axisAbbrev>









<axisDirection>east</axisDirection>








</CoordinateSystemAxis>







</usesAxis>







<usesAxis>








<CoordinateSystemAxis gml:id="EPSG9907" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">









<name>Northing in north direction with metre units</name>









<axisID>










<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9907</name>









</axisID>









<axisAbbrev>N</axisAbbrev>









<axisDirection>north</axisDirection>








</CoordinateSystemAxis>







</usesAxis>






</CartesianCS>





</usesCartesianCS>




</ProjectedCRS>



</includesCRS>



<includesCRS>




<VerticalCRS gml:id="EPSG5701">





<srsName>Newlyn</srsName>





<srsID>






<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">5701</name>





</srsID>





<usesVerticalCS>






<VerticalCS gml:id="EPSG6499">







<csName>Gravity-related height up in metres</csName>







<csID>








<name codeSpace="urn:ogc:def:cs:EPSG:6.3:">6499</name>







</csID>







<usesAxis>








<CoordinateSystemAxis gml:id="EPSG9904" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">









<name>Gravity-related height in up direction with metre units</name>









<axisID>










<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9904</name>









</axisID>









<axisAbbrev>H</axisAbbrev>









<axisDirection>up</axisDirection>








</CoordinateSystemAxis>







</usesAxis>






</VerticalCS>





</usesVerticalCS>





<usesVerticalDatum>






<VerticalDatum gml:id="EPSG5101">







<datumName>Ordnance Datum Newlyn</datumName>







<datumID>








<name codeSpace="urn:ogc:def:datum:EPSG:6.3:">5101</name>







</datumID>







<verticalDatumType codeSpace=" urn:ogc:def:verticalDatumType:OGC:1.0:">geoidal</verticalDatumType>






</VerticalDatum>





</usesVerticalDatum>




</VerticalCRS>



</includesCRS>


</CompoundCRS>


C.3
Simplified example XML for conversion


The coordinate Conversion example in Subclause 6.4.2 contains most details within the usesMethod element. If the details of that Transverse Mercator operation method are sufficiently available elsewhere, a much shorter example XML document can be used:


<?xml version="1.0" encoding="UTF-8"?>


<Conversion xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/gml gml/3.1.1/base/coordinateOperations.xsd" gml:id="EPSG19916">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26-->



<!-- SourceCRS: EPSG:4277 OSGB 1936 -->



<!-- TargetCRS: EPSG:27700 OSGB 1936 / British National Grid -->



<coordinateOperationName>Transverse Mercator</coordinateOperationName>



<coordinateOperationID>




<name codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name>




<version>6.0</version>



</coordinateOperationID>



<usesMethod xlink:href="urn:ogc:def:method:EPSG:6.3:9807" xlink:title="Transverse Mercator"/>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:degree">49</value>




<valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8801" xlink:title="Latitude of natural origin"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:degree">-2</value>




<valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8802" xlink:title="Longitude of natural origin"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value>




<valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8805" xlink:title="Scale factor at natural origin"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value>




<valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8806" xlink:title="False Easting"/>



</usesValue>



<usesValue>




<value uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</value>




<valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8807" xlink:title="False Northing"/>



</usesValue>


</Conversion>

This example assumes that information for the Transverse Mercator OperationMethod is available elsewhere. Example XML for this method is given in the following subclause.


C.4
Example XML for operation method


This subclause provides an example XML document using the OperationMethod element, with data for the Transverse Mercator conversion method.


<?xml version="1.0" encoding="UTF-8"?>


<OperationMethod xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/gml gml/3.1.1/base/coordinateOperations.xsd" gml:id="EPSG9807">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26 -->



<methodName>Transverse Mercator</methodName>



<methodID>




<name codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name>




<version>6.0</version>



</methodID>



<methodFormula>See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. </methodFormula>



<sourceDimensions>2</sourceDimensions>



<targetDimensions>2</targetDimensions>



<usesParameter>




<OperationParameter gml:id="EPSG8801">





<parameterName>Latitude of natural origin</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name>





</parameterID>




</OperationParameter>



</usesParameter>



<usesParameter>




<OperationParameter gml:id="EPSG8802">





<parameterName>Longitude of natural origin</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name>





</parameterID>




</OperationParameter>



</usesParameter>



<usesParameter>




<OperationParameter gml:id="EPSG8805">





<parameterName>Scale factor at natural origin</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name>





</parameterID>




</OperationParameter>



</usesParameter>



<usesParameter>




<OperationParameter gml:id="EPSG8806">





<parameterName>False Easting</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name>





</parameterID>




</OperationParameter>



</usesParameter>



<usesParameter>




<OperationParameter gml:id="EPSG8807">





<parameterName>False Northing</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name>





</parameterID>




</OperationParameter>



</usesParameter>


</OperationMethod>

C.5
Example XML for CRS dictionary


This subclause provides an example XML document using the Dictionary element from the dictionary.xsd schema of GML 3.1, with its’ contained elements, applied to the example CompoundCRS used in Subclause C.2 with all of its components separated in the dictionary.


<?xml version="1.0" encoding="UTF-8"?>


<Dictionary xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/gml gml/3.1.1/base/coordinateReferenceSystems.xsd" gml:id="CrsDictionary">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26-->



<description>Example GML Dictionary of some coordinate reference systems and components. </description>



<name>CRS Dictionary</name>



<dictionaryEntry>




<CompoundCRS gml:id="EPSG7405">





<srsName>OSGB36 /British National Grid + ODN</srsName>





<srsID>






<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">7405</name>





</srsID>





<validArea>






<description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. </description>





</validArea>





<includesCRS xlink:href="#EPSG27700" xlink:title="OSGB 1936 / British National Grid"/>





<includesCRS xlink:href="#EPSG5701" xlink:title="Newlyn"/>




</CompoundCRS>



</dictionaryEntry>



<dictionaryEntry>




<ProjectedCRS gml:id="EPSG27700">





<srsName>OSGB 1936 / British National Grid</srsName>





<srsID>






<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">27700</name>





</srsID>





<validArea>






<description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. </description>





</validArea>





<baseCRS xlink:href="#EPSG4277" xlink:title="OSGB 1936"/>





<definedByConversion xlink:href="#EPSG19916" xlink:title="Transverse Mercator"/>





<usesCartesianCS xlink:href="#EPSG4400" xlink:title="Cartesian"/>




</ProjectedCRS>



</dictionaryEntry>



<dictionaryEntry>




<GeographicCRS gml:id="EPSG4277">





<srsName>OSGB 1936</srsName>





<srsID>






<name codeSpace="urn:ogc:def:crs:EPSG:6.3:">4277</name>





</srsID>





<validArea>






<description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. </description>





</validArea>





<usesEllipsoidalCS xlink:href="#EPSG6402" xlink:title="ellipsoidal"/>





<usesGeodeticDatum xlink:href="#EPSG6277" xlink:title="OSGB 1936"/>




</GeographicCRS>



</dictionaryEntry>



<dictionaryEntry>




<EllipsoidalCS gml:id="EPSG6402">





<csName>ellipsoidal</csName>





<csID>






<name codeSpace="urn:ogc:def:cs:EPSG:6.3:">6402</name>





</csID>





<usesAxis xlink:href="#EPSG9901northDegreeEPSG9901" xlink:title="Geodetic latitude in north direction with degree unitsGeodetic latitude"/>





<usesAxis xlink:href="#EPSG9902eastDegreeEPSG9902" xlink:title="Geodetic longitude in east direction with degree unitsGeodetic longitude"/>




</EllipsoidalCS>



</dictionaryEntry>



<dictionaryEntry>




<CoordinateSystemAxis gml:id="EPSG9901" gml:uom="urn:ogc:def:uom:OGC:1.0:degree">





<name>Geodetic latitude in north direction with degree units</name>





<axisID>






<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9901</name>





</axisID>





<axisAbbrev>Lat</axisAbbrev>





<axisDirection>north</axisDirection>




</CoordinateSystemAxis>



</dictionaryEntry>



<dictionaryEntry>




<CoordinateSystemAxis gml:id="EPSG9902" gml:uom="urn:ogc:def:uom:OGC:1.0:degree">





<name>Geodetic longitude in east direction with degree units</name>





<axisID>






<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9902</name>





</axisID>





<axisAbbrev>Lon</axisAbbrev>





<axisDirection>east</axisDirection>




</CoordinateSystemAxis>



</dictionaryEntry>



<dictionaryEntry>




<GeodeticDatum gml:id="EPSG6277">





<datumName>OSGB 1936</datumName>





<datumID>






<name codeSpace="urn:ogc:def:datum:EPSG:6.3:">6277</name>





</datumID>





<usesPrimeMeridian xlink:href="#EPSG8901" xlink:title="Greenwich"/>





<usesEllipsoid xlink:href="#EPSG7001" xlink:title="Airy 1830"/>




</GeodeticDatum>



</dictionaryEntry>



<dictionaryEntry>




<PrimeMeridian gml:id="EPSG8901">





<meridianName>Greenwich</meridianName>





<meridianID>






<name codeSpace="urn:ogc:def:meridian:EPSG:6.3:">8901</name>





</meridianID>





<greenwichLongitude>






<angle uom="urn:ogc:def:uom:OGC:1.0:degree">0</angle>





</greenwichLongitude>




</PrimeMeridian>



</dictionaryEntry>



<dictionaryEntry>




<Ellipsoid gml:id="EPSG7001">





<ellipsoidName>Airy 1830</ellipsoidName>





<ellipsoidID>






<name codeSpace="urn:ogc:def:ellipsoid:EPSG:6.3:">7001</name>





</ellipsoidID>





<semiMajorAxis uom="urn:ogc:def:uom:OGC:1.0:metre">6377563.396</semiMajorAxis>





<secondDefiningParameter>






<inverseFlattening uom="urn:ogc:def:uom:OGC:1.0:unity">299.3249646</inverseFlattening>





</secondDefiningParameter>




</Ellipsoid>



</dictionaryEntry>



<dictionaryEntry>




<Conversion gml:id="EPSG19916">





<coordinateOperationName>Transverse Mercator</coordinateOperationName>





<coordinateOperationID>






<name codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name>





</coordinateOperationID>





<usesMethod xlink:href="#EPSG9807" xlink:title="Transverse Mercator"/>





<usesValue>






<value uom="urn:ogc:def:uom:OGC:1.0:degree">49</value>






<valueOfParameter xlink:href="#EPSG8801" xlink:title="Latitude of natural origin"/>





</usesValue>





<usesValue>






<value uom="urn:ogc:def:uom:OGC:1.0:degree">-2</value>






<valueOfParameter xlink:href="#EPSG8802" xlink:title="Longitude of natural origin"/>





</usesValue>





<usesValue>






<value uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value>






<valueOfParameter xlink:href="#EPSG8805" xlink:title="Scale factor at natural origin"/>





</usesValue>





<usesValue>






<value uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value>






<valueOfParameter xlink:href="#EPSG8806" xlink:title="False Easting"/>





</usesValue>





<usesValue>






<value uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</value>






<valueOfParameter xlink:href="#EPSG8807" xlink:title="False Northing"/>





</usesValue>




</Conversion>



</dictionaryEntry>



<dictionaryEntry>




<OperationMethod gml:id="EPSG9807">





<methodName>Transverse Mercator</methodName>





<methodID>






<name codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name>





</methodID>





<methodFormula>See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. </methodFormula>





<sourceDimensions>2</sourceDimensions>





<targetDimensions>2</targetDimensions>





<usesParameter xlink:href="#EPSG8801" xlink:title="Latitude of natural origin"/>





<usesParameter xlink:href="#EPSG8802" xlink:title="Longitude of natural origin"/>





<usesParameter xlink:href="#EPSG8805" xlink:title="Scale factor at natural origin"/>





<usesParameter xlink:href="#EPSG8806" xlink:title="False Easting"/>





<usesParameter xlink:href="#EPSG8807" xlink:title="False Northing"/>




</OperationMethod>



</dictionaryEntry>



<dictionaryEntry>




<OperationParameter gml:id="EPSG8801">





<parameterName>Latitude of natural origin</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name>





</parameterID>




</OperationParameter>



</dictionaryEntry>



<dictionaryEntry>




<OperationParameter gml:id="EPSG8802">





<parameterName>Longitude of natural origin</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name>





</parameterID>




</OperationParameter>



</dictionaryEntry>



<dictionaryEntry>




<OperationParameter gml:id="EPSG8805">





<parameterName>Scale factor at natural origin</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name>





</parameterID>




</OperationParameter>



</dictionaryEntry>



<dictionaryEntry>




<OperationParameter gml:id="EPSG8806">





<parameterName>False Easting</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name>





</parameterID>




</OperationParameter>



</dictionaryEntry>



<dictionaryEntry>




<OperationParameter gml:id="EPSG8807">





<parameterName>False Northing</parameterName>





<parameterID>






<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name>





</parameterID>




</OperationParameter>



</dictionaryEntry>



<dictionaryEntry>




<CartesianCS gml:id="EPSG4400">





<csName>Easting and Northing in metres</csName>





<csID>






<name codeSpace="urn:ogc:def:cs:EPSG:6.3:">4400</name>





</csID>





<usesAxis xlink:href="#EPSG9906eastMetreEPSG9906" xlink:title="Easting in east direction with metre unitsEasting"/>





<usesAxis xlink:href="#EPSG9907northMetreEPSG9907" xlink:title="Northing in north direction with metre unitsNorthing"/>




</CartesianCS>



</dictionaryEntry>



<dictionaryEntry>




<CoordinateSystemAxis gml:id="EPSG9906" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">





<name>Easting in east direction with metre units</name>





<axisID>






<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9906</name>





</axisID>





<axisAbbrev>E</axisAbbrev>





<axisDirection>east</axisDirection>




</CoordinateSystemAxis>



</dictionaryEntry>



<dictionaryEntry>




<CoordinateSystemAxis gml:id="EPSG9907" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">





<name>Northing in north direction with metre units</name>





<axisID>






<name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9907</name>





</axisID>





<axisAbbrev>N</axisAbbrev>





<axisDirection>north</axisDirection>




</CoordinateSystemAxis>



</dictionaryEntry>



<dictionaryEntry>




<VerticalCS gml:id="EPSG6499">





<csName>Height up in metres</csName>





<csID>






<name codeSpace="urn:ogc:def:cs:EPSG:6.0:">6499</name>





</csID>





<usesAxis xlink:href="urn:ogc:def:axis:EPSG:6.0:9904"/>




</VerticalCS>



</dictionaryEntry>



<dictionaryEntry>




<CoordinateSystemAxis gml:id="EPSG9904" gml:uom="urn:ogc:def:uom:OGC:1.0:metre">





<name>Gravity-related height in up direction with metre units</name>





<axisID>






<name codeSpace="urn:ogc:def:axis:EPSG:6.0:">9904</name>





</axisID>





<axisAbbrev>H</axisAbbrev>





<axisDirection>up</axisDirection>




</CoordinateSystemAxis>



</dictionaryEntry>



<dictionaryEntry>




<VerticalDatum gml:id="EPSG5101">





<datumName>Ordnance Datum Newlyn</datumName>





<datumID>






<name codeSpace="urn:ogc:def:datum:EPSG:6.0:">5101</name>





</datumID>





<verticalDatumType codeSpace="urn:ogc:def:verticalDatumType:OGC:1.0:">geoidal</verticalDatumType>




</VerticalDatum>



</dictionaryEntry>


</Dictionary>

C.6
Example XML for units dictionary


This subclause provides an example XML document using the Dictionary element from the dictionary.xsd schema of GML 3, with its contained elements, applied to the units of measure used in the preceding XML examples.


<?xml version="1.0" encoding="UTF-8"?>


<Dictionary xmlns="http://www.opengis.net/gml" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/gml gml/3.1.1/base/coordinateReferenceSystems.xsd" gml:id="UnitsDictionary">



<!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26 -->



<description>Example GML Dictinary of unit definitions.</description>



<name>Units Dictionary</name>



<dictionaryEntry>




<ConventionalUnit gml:id="degree">





<name>degree</name>





<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">9102</name>





<name codeSpace="urn:ogc:def:uom:OGC:1.0:">degree</name>





<quantityType>angle</quantityType>





<conversionToPreferredUnit uom="#radian">






<factor>1.74532925199433E-02</factor>





</conversionToPreferredUnit>




</ConventionalUnit>



</dictionaryEntry>



<dictionaryEntry>




<BaseUnit gml:id="radian">





<name>radian</name>





<name codeSpace="urn:ogc:def:uom:OGC:1.0:">radian</name>





<quantityType>angle</quantityType>





<unitsSystem xlink:href="urn:ogc:ToBeSupplied"/>




</BaseUnit>



</dictionaryEntry>



<dictionaryEntry>




<BaseUnit gml:id="metre">





<name>metre</name>





<name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">9001</name>





<name codeSpace="urn:ogc:def:uom:OGC:1.0:">metre</name>





<quantityType>length</quantityType>





<unitsSystem xlink:href="urn:ogc:SI"/>




</BaseUnit>



</dictionaryEntry>



<dictionaryEntry>




<BaseUnit gml:id="unity">





<name>unity</name>





<name codeSpace="urn:ogc:def:uom:EPSG:6.3:">8805</name>





<name codeSpace="urn:ogc:def:uom:OGC:1.0:">unity</name>





<quantityType>scale factor</quantityType>





<unitsSystem xlink:href="urn:ogc:ToBeSupplied"/>




</BaseUnit>



</dictionaryEntry>


</Dictionary>

Annex D
(informative)

Application schema example


D.1
Introduction


This annex provides an example Application Schema based on the CRS Schemas in GML 3.1.1. This example includes a corresponding example XML document using that Application Schema plus the example UML model from which that Application Schemas was converted. For more information on Application Schemas, see Subclauses B.3 and B.4 of this document.


These XML examples use URNs to reference known objects by "xlink:href" and "gml:uom" XML attributes, based on “URNs of definitions in ogc namespace” [OGC 05-010].

D.2
Transverse Mercator conversion


D.2.1
Introduction


Standardized XML encoding is desirable for a number of commonly-used types of coordinate conversions and transformations. This subclause provides an example of one such encoding, applied to one commonly-used conversion type, namely the Transverse Mercator map projection. The following subclauses contain:


m) A draft class diagram of a UML package for the Transverse Mercator type of map projection, which builds on the UML model in OGC Abstract Specification Topic 2.


n) A draft XML Schema for encoding a Transverse Mercator projection, produced by converting this UML package.


o) Two example XML documents based on this draft XML Schema for encoding an example Transverse Mercator map projection


D.2.2
UML package


Figure D.1 is a draft class diagram of a UML package for Transverse Mercator map projections. This class diagram is incomplete in that many of the needed association role names and multiplicities are not shown due to lack of space. This UML package builds on the UML model in OGC Abstract Specification Topic 2 [04-046r3].


CC_Conversion


(from CC_CoordinateOperation)


CC_OperationParameter


(from CC_CoordinateOperation)


CC_GeneralOperationParamet


er


(from CC_CoordinateOperation)


<<Abstract>>


LongitudeOfNaturalOriginValue


+ angleValue : Angle


FalseEastingValue


+ lengthValue : Length


FalseNorthingValue


+ lengthValue : Length


LatitudeOfNaturalOriginValue


+ angleValue : Angle


1


0..n


+valueOfParameter


1


0..n


ScaleFatorAtNaturalOriginValue


+ scaleValue : Scale


1


0..n


+valueOfParameter


1


0..n


CC_OperationMethod


(from CC_CoordinateOperation)


0..n


0..n


0..n


+usesParameter0..n


TransverseMercatorConversion


1


0..*


+usesMethod


1


CC_ParameterValue


(from CC_CoordinateOperation)


<<Union>>


0..*




Figure D.1 — UML package for Transverse Mercator projection


D.2.3
Application schema


This subclause contains an example XML Schema for encoding a Transverse Mercator projection, produced by converting the above UML package. This XML Schema builds on the coordinateOperations.xsd GML Schema. This draft Application Schema is written following the same GML 3 patterns and ISO 19118 XML encoding rules as used in the CRS Schemas in GML 3.1.1. As required, this draft Application Schema is written in a different namespace. Of course, it could be rewritten as an additional XML Schema in the GML namespace, and would be similar.


EDITORS NOTE: 
In this draft XML Schema, I included documentation element text based on my limited understanding of the Transverse Mercator map projection. I urge John Bobbitt, Roel Nicolai, and others to suggest improvements in the wording of these documentation elements.


This draft Application Schema is:


<?xml version="1.0" encoding="UTF-8"?>


<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:gml="http://www.opengis.net/gml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ex="http://www.opengis.net/examples" targetNamespace="http://www.opengis.net/examples" elementFormDefault="qualified" xml:lang="en">



<annotation>




<documentation>





<name>transverseMercator.xsd</name>





<scope>How to encode definition of specific Transverse Mercator conversion. </scope>





<description>Example Application Schema to encode the data needed to define a specific Transverse Mercator type of map projection, which is a coordinate conversion. Builds on coordinateOperations.xsd, and follows same GML 3 patterns and ISO 19118 encoding. Written in the "ex" namespace. Primary editor: Arliss Whiteside. Last updated 2005-01-28</description>





<reference>Guidance Note Number 7 "Coordinate Conversions and Transformations including Formulas" (available through http://www.epsg.org/), especially Section 1.4.6 "Transverse Mercator". </reference>





<copyright>Copyright (c) Open Geospatial Consortium (2005) </copyright>





<conformance>This schema encodes a draft Transverse Mercator package that builds on the Coordinate Operation (CC_) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates. That draft package defines restricted subtypes of the CC_Conversion and CC_ParameterValue classes as needed for the Transverse Mercator map projection conversion. </conformance>




</documentation>



</annotation>



<!-- ======================================================


       includes and imports



====================================================== -->



<import namespace="http://www.opengis.net/gml" schemaLocation="../gml/3.1.1/base/coordinateOperations.xsd"/>



<import namespace="http://www.w3.org/1999/xlink" schemaLocation="../gml/3.1.1/xlink/xlinks.xsd"/>



<!-- ======================================================


       elements and types



====================================================== -->



<element name="TransverseMercatorConversion" type="ex:TransverseMercatorConversionType" substitutionGroup="gml:_GeneralConversion"/>



<!-- =================================================== -->



<complexType name="TransverseMercatorConversionType">




<annotation>





<documentation>Specific Transverse Mercator map projection. Uses the AbstractGeneralConversionType with restricted values for included elements, including elements in the coordinateOperationID element with the IdentifierType. If appropriate, the "codeSpace" element should have the string value "EPSG", and the "code" element should then have the appropriate EPSG code value. The other elements in the IdentifierType can be omitted. The "coordinateOperationName" element shall have a string value that names a specific Transverse Mercator map projection. The "_PositionalAccuracy" and "metaDataProperty" elements can be omitted. </documentation>




</annotation>




<complexContent>





<extension base="gml:AbstractGeneralConversionType">






<sequence>







<element ref="ex:usesTransverseMercatorMethod"/>







<element ref="ex:usesLatitudeOfNaturalOriginValue"/>







<element ref="ex:usesLongitudeOfNaturalOriginValue"/>







<element ref="ex:usesScaleFactorAtNaturalOriginValue"/>







<element ref="ex:usesFalseEastingValue"/>







<element ref="ex:usesFalseNorthingValue"/>






</sequence>





</extension>




</complexContent>



</complexType>



<!-- =================================================== -->



<!-- =================================================== -->



<element name="usesTransverseMercatorMethod">




<annotation>





<documentation>Reference to Transverse Mercator operation method. </documentation>




</annotation>




<complexType>





<sequence/>





<attribute ref="xlink:href" use="required" fixed="urn:ogc:def:method:EPSG:6.3:9807"/>




</complexType>



</element>



<!-- =================================================== -->



<element name="usesLatitudeOfNaturalOriginValue" type="ex:AngleValueType" substitutionGroup="gml:_generalParameterValue">




<annotation>





<documentation>Value of the Latitude of the natural origin parameter for a specific coordinate conversion. </documentation>




</annotation>



</element>



<!-- =================================================== -->



<element name="usesLongitudeOfNaturalOriginValue" type="ex:AngleValueType" substitutionGroup="gml:_generalParameterValue">




<annotation>





<documentation>Value of the Longitude of the natural origin (or central meridian) parameter for a specific coordinate conversion. </documentation>




</annotation>



</element>



<!-- =================================================== -->



<element name="usesScaleFactorAtNaturalOriginValue" type="ex:ScaleValueType" substitutionGroup="gml:_generalParameterValue">




<annotation>





<documentation>Value of the scale factor at the natural origin (on the central meridian) parameter for a specific coordinate conversion. </documentation>




</annotation>



</element>



<!-- =================================================== -->



<element name="usesFalseEastingValue" type="ex:LengthValueType" substitutionGroup="gml:_generalParameterValue">




<annotation>





<documentation>Value of the false Easting coordinate of the origin parameter for a specific coordinate conversion. </documentation>




</annotation>



</element>



<!-- =================================================== -->



<element name="usesFalseNorthingValue" type="ex:LengthValueType" substitutionGroup="gml:_generalParameterValue">




<annotation>





<documentation>Value of the false Northing coordinate of the origin parameter for a specific coordinate conversion. </documentation>




</annotation>



</element>



<!-- =================================================== -->



<!-- =================================================== -->



<complexType name="AngleValueType">




<annotation>





<documentation>Angle measure operation parameter value. </documentation>




</annotation>




<complexContent>





<extension base="gml:AbstractGeneralParameterValueType">






<sequence>







<choice>








<element ref="ex:angleValue"/>








<element ref="gml:dmsAngleValue"/>







</choice>







<element ref="gml:valueOfParameter"/>






</sequence>





</extension>




</complexContent>



</complexType>



<!-- =================================================== -->



<complexType name="ScaleValueType">




<annotation>





<documentation>Scale measure operation parameter value. </documentation>




</annotation>




<complexContent>





<extension base="gml:AbstractGeneralParameterValueType">






<sequence>







<element ref="ex:scaleValue"/>







<element ref="gml:valueOfParameter"/>






</sequence>





</extension>




</complexContent>



</complexType>



<!-- =================================================== -->



<complexType name="LengthValueType">




<annotation>





<documentation>Length measure operation parameter value. </documentation>




</annotation>




<complexContent>





<extension base="gml:AbstractGeneralParameterValueType">






<sequence>







<element ref="ex:lengthValue"/>







<element ref="gml:valueOfParameter"/>






</sequence>





</extension>




</complexContent>



</complexType>



<!-- =================================================== -->



<!-- =================================================== -->



<element name="angleValue" type="gml:AngleType" substitutionGroup="gml:value">




<annotation>





<documentation>Angle value of an operation parameter, recorded as a single number, with a unit of measure suitable for an angle, such as degrees or radians. </documentation>




</annotation>



</element>



<!-- =================================================== -->



<element name="scaleValue" type="gml:ScaleType" substitutionGroup="gml:value">




<annotation>





<documentation>Scale factor value of an operation parameter, with a unit of measure suitable for a scale factor, such as percent, permil, or parts-per-million. </documentation>




</annotation>



</element>



<!-- =================================================== -->



<element name="lengthValue" type="gml:LengthType" substitutionGroup="gml:value">




<annotation>





<documentation>Length value of an operation parameter, with a unit of measure suitable for a length, such as metres or feet. </documentation>




</annotation>



</element>



<!-- =================================================== -->


</schema>

D.2.4
Example XML document


An example XML document based on this example XML Schema for encoding an example Transverse Mercator map projection is:


<?xml version="1.0" encoding="UTF-8"?>


<TransverseMercatorConversion xmlns="http://www.opengis.net/examples" xmlns:gml="http://www.opengis.net/gml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/examples transverseMercator.xsd" gml:id="EPSG19916">



<!-- Example XML document. Primary editor: Arliss Whiteside. Last updated 2005-01-28-->



<!-- SourceCRS: EPSG:4277 OSGB 1936 -->



<!-- TargetCRS: EPSG:27700 OSGB 1936 / British National Grid -->



<gml:coordinateOperationName>Transverse Mercator</gml:coordinateOperationName>



<gml:validArea>




<gml:description>United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. </gml:description>



</gml:validArea>



<usesTransverseMercatorMethod xlink:href="urn:ogc:def:method:EPSG:6.3:9807"/>



<usesLatitudeOfNaturalOriginValue>




<angleValue uom="urn:ogc:def:uom:degree">49</angleValue>




<gml:valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8801"/>



</usesLatitudeOfNaturalOriginValue>



<usesLongitudeOfNaturalOriginValue>




<angleValue uom="urn:ogc:def:uom:OGC:1.0:degree">-2</angleValue>




<gml:valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8802"/>



</usesLongitudeOfNaturalOriginValue>



<usesScaleFactorAtNaturalOriginValue>




<scaleValue uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</scaleValue>




<gml:valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8805"/>



</usesScaleFactorAtNaturalOriginValue>



<usesFalseEastingValue>




<lengthValue uom="urn:ogc:def:uom:OGC:1.0:metre">400000</lengthValue>




<gml:valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8806"/>



</usesFalseEastingValue>



<usesFalseNorthingValue>




<lengthValue uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</lengthValue>




<gml:valueOfParameter xlink:href="urn:ogc:def:parameter:EPSG:6.3:8807"/>



</usesFalseNorthingValue>


</TransverseMercatorConversion>

Annex E
(informative)

Coordinate operation methods


E.1
Introduction


This annex contains brief descriptions of some conversion and transformation operation methods. It references the methods defined in the EPSG v 6.3 database, and lists some methods applicable to the transformation of coordinates.


Each operation method should uniquely specify the algorithm to be used for a coordinate transformation. This specification may comprise two algorithms, forward and inverse, as is sometimes used for map projection algorithms. Each conversion and transformation, and each operation method, should use a well-known data set in referencing such algorithms.


NOTE 
Of course, referencing a well-known algorithm does not imply that software which implements these algorithms has correctly implemented it, or has implemented all referenced algorithms. Similarly, referencing a well-known set of parameter values does not imply that software which implements these values uses the correct values.


E.2
EPSG defined operation methods


The well-known database from EPSG (version 6.3) specifies a number of operation methods. Please note that the EPSG data set is neither prescriptive, nor exhaustive. This document mentions a small subset of the methods in the EPSG data set. Methods not listed in this document, but listed in the EPSG data set, can easily be implemented using the OperationMethod and OperationParameter elements, making use of the method name and parameter names specified in the EPSG data set.


These operation methods are defined making use of well-defined operation parameters. When a coordinate operation is specified referencing an EPSG defined operation method, the detailed specification in an XML document should adhere to the EPSG definitions of the operation parameters.


The detailed definition of these operation method algorithms, with their formulas and a worked example is included in the EPSG data set, available on the Web, through the reflector: http://www.epsg.org/.

These and other information on coordinate operation methods is available on: http://www.remotesensing.org/geotiff/proj_list/. See also http://www.posc.org/Epicentre.2_2/DataModel/ExamplesofUsage/eu_cs.html.

E.3.
Other operation methods 


E.3.1
Introduction


The following operation methods are not specified in any well-known data set but are implied in the specification of Coordinate Systems and Coordinate Reference Systems.


p) Polar / Cartesian (2D) conversion


q) Spherical / Cartesian (3D) conversion


r) Cylindrical / Cartesian conversion


s) Geographic3D to Geographic2D/GravityRelatedHeight conversion


E.3.2
Polar / Cartesian (2D) conversion


This method converts two-dimensional polar coordinates to plane Cartesian coordinates and vice versa (the inverse algorithm is implied in this transformation method).


E.3.3
Spherical / Cartesian (3D) conversion 


This method converts spherical coordinates (sometimes referred to as polar 3D coordinates) to 3D Cartesian coordinates and vice versa (the inverse algorithm is again implied in this transformation method). Please bear in mind that when the spherical coordinate system is used in a local context (e.g.., in an EngineeringCRS); the converted Cartesian coordinate system can only be used in the same context: there is no datum change involved. Transformation to a Geocentric Cartesian system is possible only when the spherical coordinate system is also geocentric. 


E.3.4
Cylindrical / Cartesian conversion


This method converts (3D) cylindrical coordinates to 3D Cartesian coordinates and vice versa. The area of use of the cylindrical coordinate system is unlikely to be other than local. The Cartesian coordinate system will therefore also be associated with an EngineeringCRS. A further (or indeed a one-step) transformation to a Geocentric system will be incorrect, although it may seem mathematically correct.


Bibliography


[1] ISO 19118, Geographic information – Encoding


[2] Version N1316 of ISO CD 19118: Geographic information - Encoding is supplemented by XML Schema documents posted on David Skogan’s web page on ISO 19118 encoding: http://www.ifi.uio.no/~davids/encoding.


[3] OGC 00-045r1, Draft RFC on Image Coordinate Transformations


[4] OGC 01-009, Implementation Specification: Coordinate Transformation Services


[5] OGC 03-010r9, Recommended XML encoding of coordinate reference systems and coordinate transformations


[6] OGC 04-071, Some image geometry models


[7] OGC 05-014, Image CRSs for IH4DS

		viii

		© Open Geospatial Consortium (2005)





© Open Geospatial Consortium (2005)
vii





05-011 Common CRSs Folder/05-011 Common CRSs Paper.pdf


 


Open Geospatial Consortium Inc. 


Date: 2005-01-28 


Reference number of this OGC™ document: OGC 05-011 


Version: 1.0.0 


Category: OGC™ Recommendation Paper 


Editor: Arliss Whiteside 


Recommended XML/GML 3.1.1 encoding  
of common CRS definitions  


Copyright © Open Geospatial Consortium (2005) 


Recipients of this document are invited to submit, with their comments, notification 
of any relevant patent rights of which they are aware and to provide supporting 
documentation. 


Document type:   OGC™ Recommendation Paper 
Document subtype:  (none) 
Document stage:  Approved Recommendation Paper 
Document language:  English 


  
 







OGC 05-011 


Contents Page 


i. Preface......................................................................................................................v 


ii. Document contributor contact points.......................................................................v 


iii. Revision history ..................................................................................................... vi 


iv. Changes to the OGC Abstract Specification.......................................................... vi 


v. Future work............................................................................................................ vi 


Foreword ........................................................................................................................... vii 


Introduction...................................................................................................................... viii 


1 Scope........................................................................................................................1 


2 Conformance............................................................................................................1 


3 Normative references ...............................................................................................2 


4 Terms and definitions ..............................................................................................3 


5 Conventions .............................................................................................................3 
5.1 Symbols (and abbreviated terms).......................................................................3 
5.2 UML Notation....................................................................................................4 
5.3 Document terms and definitions ........................................................................4 


6 Common coordinate reference systems ...................................................................4 
6.1 Introduction........................................................................................................4 
6.2 Geographic CRSs...............................................................................................5 


6.2.1 Simple UML model .....................................................................................5 
6.2.2 XML document example .............................................................................5 
6.2.3 Full UML model ..........................................................................................7 


6.3 Projected CRSs ..................................................................................................8 
6.3.1 Simple UML model .....................................................................................8 
6.3.2 XML document example .............................................................................9 
6.3.3 Full UML model ........................................................................................10 


6.4 Coordinate conversions....................................................................................12 
6.4.1 Simple UML model ...................................................................................12 
6.4.2 XML document example ...........................................................................12 
6.4.3 Full UML model ........................................................................................14 


6.5 Vertical CRSs...................................................................................................16 
6.5.1 Simple UML model ...................................................................................16 
6.5.2 XML document example ...........................................................................16 
6.5.3 Full UML model ........................................................................................17 


6.6 Compound CRSs..............................................................................................19 
6.6.1 Simple UML model ...................................................................................19 
6.6.2 XML document example ...........................................................................19 
6.6.3 Full UML model ........................................................................................20 


ii © Open Geospatial Consortium (2005)
 







OGC 05-011 


7 Supporting information..........................................................................................21 


Annex A (informative)  Expected uses of CRS definition data.........................................23 
A.1 Introduction......................................................................................................23 
A.2 Multiple uses of definition data .......................................................................23 
A.3 Alternative ways to transfer definition data.....................................................24 
A.4 Use to transfer coordinate reference system definition....................................24 


A.4.1 Current CRS transfer by low-level CT interface .......................................25 
A.4.2 Current CRS transfer by ICT and high-level CT interfaces ......................26 


A.5 Use to transfer coordinate transformation (CT) definition ..............................26 
A.5.1 Current CT transfer by low-level CT Interface..........................................26 
A.5.2 Current CT transfer by ICT and high-level CT interfaces.........................27 


A.6 Use to transfer dataset lineage or history.........................................................28 


Annex B (normative)   Conformance.................................................................................29 
B.1 Conformance requirements..............................................................................29 
B.2 Abstract test suite.............................................................................................30 
B.3 Rules for application schemas .........................................................................32 


B.3.1 Introduction................................................................................................32 
B.3.2 General rules ..............................................................................................34 
B.3.4 Import needed schemas..............................................................................34 
B.3.5 GML objects and properties.......................................................................34 
B.3.6 Global and local names..............................................................................35 


B.4 UML models for application schemas .............................................................35 


Annex C (informative)  More XML document examples .................................................36 
C.1 Introduction......................................................................................................36 
C.2 Extended example XML for compound coordinate reference system.............36 
C.3 Simplified example XML for conversion ........................................................41 
C.4 Example XML for operation method...............................................................43 
C.5 Example XML for CRS dictionary ..................................................................44 
C.6 Example XML for units dictionary..................................................................49 


Annex D (informative)  Application schema example ......................................................51 
D.1 Introduction......................................................................................................51 
D.2 Transverse Mercator conversion......................................................................51 


D.2.1 Introduction................................................................................................51 
D.2.2 UML package.............................................................................................51 
D.2.3 Application schema....................................................................................53 
D.2.4 Example XML document...........................................................................53 


Annex E (informative)  Coordinate operation methods.....................................................57 
E.1 Introduction......................................................................................................58 
E.2 EPSG defined operation methods ....................................................................58 
E.3. Other operation methods..................................................................................59 


E.3.1 Introduction................................................................................................59 
E.3.2 Polar / Cartesian (2D) conversion..............................................................59 
E.3.3 Spherical / Cartesian (3D) conversion .......................................................59 
E.3.4 Cylindrical / Cartesian conversion.............................................................59 


Bibliography ......................................................................................................................60 


© Open Geospatial Consortium (2005) iii 
 







OGC 05-011 


  


Figures Page 
Figure 1 — GeographicCRS simple UML class diagram ............................................................... 5 
Figure 2 — GeographicCRS full UML class diagram .................................................................... 8 
Figure 3 — ProjectedCRS simple UML class diagram................................................................... 9 
Figure 4 — ProjectedCRS full UML class diagram...................................................................... 11 
Figure 5 — Conversion UML simple UML class diagram ........................................................... 12 
Figure 6 — Conversion full UML class diagram.......................................................................... 15 
Figure 7 — VerticalCRS simple UML class diagram................................................................... 16 
Figure 8 — VerticalCRS full UML class diagram........................................................................ 18 
Figure 9 — CompoundCRS simple UML class diagram .............................................................. 19 
Figure 10 — CompoundCRS full UML class diagram ................................................................. 21 
Figure D.1 — UML package for Transverse Mercator projection................................................ 52 


iv © Open Geospatial Consortium (2005)
 







OGC 05-011 


i.  Preface 
NOTE  The previous version of this document was numbered 04-103r1, now renumbered 05-011 after 
approval and final editing in 2005. 


This OGC™ Recommendation Paper specifies XML encoding of data defining some 
common-used coordinate reference systems and coordinate operations, based on GML 
3.1.1 [OGC 04-092r4] . This document covers geographic, projected, vertical, and 
compound CRSs. Most of the CRSs defined in the EPSG database are of these types. 


This Recommendation Paper replaces some parts of OGC Recommendation Paper 03-
010r9, titled "Recommended XML encoding of coordinate reference systems and 
coordinate transformations". The CRS Schemas in that document are now specified in 
GML 3.1.1 [OGC 04-092r4]. The XML examples and Application Schemas in Annexes 
E and F of [OGC 03-010r9] that are relevant to common CRSs are included in this paper, 
updated to match GML 3.1.1 and the recommended uses of the “ogc” URN namespace 
[OGC 05-010]. 


Many key contents of this paper are provided in the attached set of files, in the same zip 
file. These files include: 


a) The example XML documents included and XML Schemas referenced in Clause 6 
“Common coordinate reference systems” 


b) The example XML documents included in Annex C “More example XML Schemas” 
c) The example Application Schema and XML documents for Annex D "Example 


application schemas" 


ii. Document contributor contact points 


All questions regarding this document should be directed to the editor or the contributors: 


Person Company Address Phone Email 


Arliss Whiteside BAE SYSTEMS 
National Security 
Solutions 


10920 Technology Dr. 
San Diego, CA  
92127-1874 USA 


+1 858-592-1608 Arliss.Whiteside@bae
systems.com 


     
 


© Open Geospatial Consortium (2005) v 
 







OGC 05-011 


iii. Revision history 


Date Release Editor Primary clauses 
modified 


Description 


2004-12-17 0.0.0 Arliss 
Whiteside 


All Initial version 


2005-01-07 0.0.0 Arliss 
Whiteside 


6.2.2, 6.3.2, 
6.5.2, C.2 


Changes referencing of EPSG coordinate axis 
objects 


2005-01-28 1.0.0 Arliss 
Whiteside 


Cover, i, 6.2.2, 
6.3.2, 6.5.2, C.2 


Removed changes for referencing of EPSG 
coordinate axis objects, editing as approved 
Discussion Paper 


 


iv. Changes to the OGC Abstract Specification 


The OGC™ Abstract Specification does not require changes to accommodate the 
technical contents of this document. 


v. Future work 


Improvements of this document are needed to modify the XML schemas, and the 
corresponding XML examples, to reflect recent changes in the Topic 2 UML model 
[OGC 04-046r3]. 


vi © Open Geospatial Consortium (2005)
 







OGC 05-011 


Foreword 


This OGC™ Recommendation Paper supersedes parts of the previous OGC 
Recommendation Paper numbered 03-010r9, titled "Recommended XML encoding of 
coordinate reference system definitions". This document is based on the GML 3.1.1 OGC 
Recommendation Paper [04-092r4]. That document uses XML Schemas as specified by 
the W3C. 


This document contains five annexes, all informative except Annex B. 


Attention is drawn to the possibility that some of the elements of this document may be 
the subject of patent rights. The Open Geospatial Consortium Inc. shall not be held 
responsible for identifying any or all such patent rights. 


© Open Geospatial Consortium (2005) vii 
 







OGC 05-011 


Introduction 


This document recommends standard XML encodings of data defining some commonly-
used coordinate reference systems, including geographic, projected, and vertical CRSs. 
These recommended encodings are based on GML 3.1.1. These common CRS definitions 
will often be referenced in data transferred between client and server software that 
implements various standardised interfaces. This specified definition data encoding is 
expected to be used by multiple OGC Implementation Specifications. That is, each of 
these specifications is expected to use a subset and/or superset of this recommended 
definition data. 


The position or location of a point can be described using coordinates. Such coordinates 
are unambiguous only when the coordinate reference system on which those coordinates 
are based is fully defined. Each position is described by a set of coordinates based on a 
specified coordinate reference system. Coordinates are often used in datasets in which all 
coordinates belong to the same coordinate reference system. This paper specifies XML 
encoding of data defining some coordinate reference systems. 


viii © Open Geospatial Consortium (2005)
 







OGC™ Recommendation Paper OGC 05-011


 


Recommended XML/GML 3.1.1 encoding of common CRS definitions  


1 Scope 


This OGC™ Recommendation Paper specifies standard XML encodings of definition 
data for commonly-used coordinate reference systems (CRSs), including geographic, 
projected, and vertical CRSs. Compound CRSs combining a vertical CRS with a 2D 
geographic or projected CRS are also covered. 


These recommended encodings are based on GML 3.1.1. This encoding is intended for 
use when referencing or transferring such definition data between client and server 
software that uses OGC standard interfaces, as specified in other documents. The 
expected uses of this definition data transfer include those described in Annex A of this 
document. 


The scope of this encoding does not include geocentric, engineering, image, temporal, 
and derived CRSs. 


This Recommendation Paper specifies standard XML encodings of common CRS 
definition data applicable to multiple separate OGC interface Implementation 
Specifications. Each such Implementation Specification should specify one or more 
subsets and/or supersets of the definition data specified herein, each to be used for one or 
more purposes. That is, for each operation specified, the Implementation Specification 
should specify which specific CRSs should be supported. 


This document also defines a Profile of GML 3.1.1 for these commonly-used CRSs. That 
profile includes all the elements and types in all the XML Schema fragments listed 
herein. That profile omits essentially all the CRS-related GML 3.1.1 elements and types 
not discussed in this document. 


2 Conformance 


Conformance with this specification shall be checked using all the relevant tests specified 
in each separate specification that normatively references this specification, and 
specifically references the applicable parts of this specification. Those specifications are 
expected to expand and specialize the conformance requirements stated in Annex B 
(normative) of this document. 


© Open Geospatial Consortium (2005) 1 
 







OGC 05-011 


3 Normative references 


The following normative documents contain provisions which, through reference in this 
text, constitute provisions of this specification. For dated references, subsequent 
amendments to, or revisions of, any of these publications do not apply. For undated 
references, the latest edition of the normative document referred to applies. 


European Petroleum Survey Group: EPSG Geodesy Parameters V 6.6, available through 
www.epsg.org


IETF RFC 2141 (May 1997), URN Syntax, R. Moats 
<http://www.ietf.org/rfc/rfc2141.txt> 


IETF RFC 2396 (August 1998), Uniform Resource Identifiers (URI): Generic Syntax, 
Berners-Lee, T., Fielding, N., and Masinter, L., eds., 
<http://www.ietf.org/rfc/rfc2396.txt> 


ISO 8601, Data elements and interchange formats - Information interchange 
Representation of dates and times 


ISO 19105:2000, Geographic information — Conformance and Testing 


ISO 19109:2004, Geographic Information – Rules for Application Schemas 


ISO 19115:2003, Geographic information — Metadata 


OGC 04-024, Geographic information — Web Map Service interface, v1.3.0 


OGC 04-046r3, The OpenGIS Abstract Specification, Topic 2: Spatial referencing by 
coordinates 


OGC 04-092r4, Geography Markup Language (GML) version 3.1.1 schemas (draft) 


OGC 05-008, OGC Web Services Common Specification 


OGC 05-010, URNs of definitions in ogc namespace 


W3C Recommendation 6 October 2000, Extensible Markup Language (XML) 1.0 
(Second Edition), http://www.w3.org/TR/REC-xml 


W3C Recommendation 2 May 2001: XML Schema Part 0: Primer, 
http://www.w3.org/TR/2001/REC-xmlschema-0-20010502/


W3C Recommendation 2 May 2001: XML Schema Part 1: Structures, 
http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/


W3C Recommendation 2 May 2001: XML Schema Part 2: Datatypes, 
http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/


2 © Open Geospatial Consortium (2005)
 



www.epsg.org

http://www.w3.org/TR/2001/REC-xmlschema-0-20010502/

http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/

http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/





OGC 05-011 


4 Terms and definitions 


For the purposes of this specification, many of the definitions specified in Clauses 4 of 
the OGC Abstract Specification Topic 2 [04-046r3] and OWS Common Specification 
[OGC 05-008] shall apply. In addition, the following terms and definitions apply. 


4.1  
Application Schema 
conceptual schema for data required by one or more applications [ISO 19101] 


4.2  
GML Application Schema 
an XML Schema written according to the GML 3 rules for Application Schemas, which 
defines a vocabulary of geographic objects for a particular domain of discourse [GML 
3.0] 


4.3  
object 
an XML document element of a type derived from AbstractGMLType [GML 3.0] 


4.4  
profile 
specified logical subset of XML Schema specified elements and types, defined to 
enhance interoperability and to curtail ambiguity [adapted from GML 3.0] 


4.5  
sequence 
finite, ordered collection of related items (objects or values) that may be repeated [ISO 
19107] 


4.6  
set 
unordered collection of related items (objects or values) with no repetition [ISO 19107] 


4.7  
Uniform Resource Identifier (URI)  
simple and extensible means for identifying a resource; a short string or address; 
classified as a name, a locator, or both [RFC 2396] 


5 Conventions 


5.1 Symbols (and abbreviated terms) 


CRS Coordinate Reference System 


EPSG European Petroleum Survey Group 


GML Geography Markup Language 


© Open Geospatial Consortium (2005) 3 
 







OGC 05-011 


IETF Internet Engineering Task Force 


ISO International Organization for Standardization 


OGC Open Geospatial Consortium 


OWS OGC Web Service, or Open Web Service 


TBD To Be Determined 


TBR To Be Reviewed 


UML Unified Modeling Language 


URI Universal Resource Identifier 


URL Uniform Resource Locator 


URN Universal Resource Name 


WKT Well Known Text 


XML eXtensible Markup Language 


1D One Dimensional 


2D Two Dimensional 


3D Three Dimensional 


5.2 UML Notation 


All diagrams in this document are Unified Modeling Language (UML) class diagrams, as 
described in Subclause 5.2 of [OGC 05-008]. 


5.3 Document terms and definitions 


This document uses the specification terms defined in Subclause 5.3 of [OGC 05-008]. 


6 Common coordinate reference systems 


6.1 Introduction 


This clause specifies how to define many commonly-used coordinate reference systems, 
including geographic, projected, and vertical CRSs. Compound CRSs combining a 
vertical CRS with a 2D geographic or projected CRS are also covered. 


These CRS definitions are usually not required to be transferred between servers and 
clients that use OGC Web Services (OWS) Implementation Specifications. However, 
these definitions shall be used in defining coordinate operations, and shall be referenced 
by those coordinate operation definitions. 


References to these CRSs shall be in the form of the anyURI data type specified by XML 
Schema. As specified in Subclause 10.3 of “OWS common implementation 


4 © Open Geospatial Consortium (2005)
 







OGC 05-011 


specification” [OGC 05-008], such an anyURI value can be either a URL with standard 
form or a URN in the “ogc” URN namespace. As specified in Subclause 7.1 of “URNs 
for definitions in the ogc namespace” [OGC 05-010], URNs in the “ogc” URN 
namespace can be used to reference any CRS defined in the EPSG database. As specified 
in Subclause 8.2 of the same document, URNs in the “ogc” URN namespace can be used 
to reference any CRS defined in Annex B of WMS 1.3 [OGC 04-024]. 


6.2 Geographic CRSs 


6.2.1 Simple UML model 


Figure 1 is a simplified UML class diagram extracted from Topic 2 that shows all the 
concrete (non-abstract) object classes and associations related to the SC_GeographicCRS 
class. To keep this diagram simple, none of the class attributes is displayed. This diagram 
shows that the SC_GeographicCRS uses a CS_GeodeticCS, which has either two or three 
usesAxis associations to CS_CoordinateSystemAxis. 


CD_PrimeMeridian
(from CD_Datum)


CD_Ellipsoid
(from CD_Datum)


CD_GeodeticDatum
(from CD_Datum)


1


0..*


+usesPrimeMeridian1


0..*


1


0..*


+usesEllipsoid 1


0..*


SC_GeographicCRS
(from SC_CoordinateReferenceSystem)


0..*


1


0..*


+usesDatum 1


CS_CoordinateSystemAxis
(from CS_CoordinateSystem)


CS_EllipsoidalCS
(from CS_CoordinateSystem)


1


0..*


+usesCS1


0..*


2..3


0..*


+usesAxis 2..3


0..*


 


Figure 1 — GeographicCRS simple UML class diagram 


Notice that the GeographicCRS class does NOT include or reference any coordinate 
operations, which can be used to transform or convert geographic coordinates into any 
other coordinate reference system. 


6.2.2 XML document example 


An example XML document defining a GeographicCRS is: 


<?xml version="1.0" encoding="UTF-8"?> 
<GeographicCRS xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.opengis.net/gml 
fragmentGeographicCRSs.xsd" gml:id="EPSG4277"> 


© Open Geospatial Consortium (2005) 5 
 







OGC 05-011 


 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26--> 
 <srsName>OSGB 1936</srsName> 
 <srsID> 
  <name codeSpace="urn:ogc:def:crs:EPSG:6.0:">4277</name> 
 </srsID> 
 <usesEllipsoidalCS> 
  <EllipsoidalCS gml:id="EPSG6402"> 
   <csName>ellipsoidal</csName> 
   <csID> 
    <name codeSpace="urn:ogc:def:cs:EPSG:6.0:">6402</name> 
   </csID> 
   <usesAxis> 
    <CoordinateSystemAxis gml:id="EPSG9901" 
gml:uom="urn:ogc:def:uom:OGC:0.0:degree"> 
     <name>Geodetic latitude in north direction with degree 
units</name> 
     <axisID> 
      <name 
codeSpace="urn:ogc:def:axis:EPSG:6.0:">9901</name> 
     </axisID> 
     <axisAbbrev>Lat</axisAbbrev> 
     <axisDirection>north</axisDirection> 
    </CoordinateSystemAxis> 
   </usesAxis> 
   <usesAxis> 
    <CoordinateSystemAxis gml:id="EPSG9902" 
gml:uom="urn:ogc:def:uom:OGC:0.0:degree"> 
     <name>Geodetic longitude in east direction with degree 
units</name> 
     <axisID> 
      <name 
codeSpace="urn:ogc:def:axis:EPSG:6.0:">9902</name> 
     </axisID> 
     <axisAbbrev>Lon</axisAbbrev> 
     <axisDirection>east</axisDirection> 
    </CoordinateSystemAxis> 
   </usesAxis> 
  </EllipsoidalCS> 
 </usesEllipsoidalCS> 
 <usesGeodeticDatum> 
  <GeodeticDatum gml:id="EPSG6277"> 
   <datumName>OSGB 1936</datumName> 
   <datumID> 
    <name codeSpace="urn:ogc:def:datum:EPSG:6.0:">6277</name> 
   </datumID> 
   <usesPrimeMeridian> 
    <PrimeMeridian gml:id="EPSG8901"> 
     <meridianName>Greenwich</meridianName> 
     <meridianID> 
      <name 
codeSpace="urn:ogc:def:meridian:EPSG:6.0:">8901</name> 
     </meridianID> 
     <greenwichLongitude> 
      <angle uom="urn:ogc:def:uom:OGC:1.0:degree">0</angle> 
     </greenwichLongitude> 
    </PrimeMeridian> 
   </usesPrimeMeridian> 


6 © Open Geospatial Consortium (2005)
 







OGC 05-011 


   <usesEllipsoid> 
    <Ellipsoid gml:id="EPSG7001"> 
     <ellipsoidName>Airy 1830</ellipsoidName> 
     <ellipsoidID> 
      <name 
codeSpace="urn:ogc:def:ellipsoid:EPSG:6.0:">7001</name> 
     </ellipsoidID> 
     <semiMajorAxis 
uom="urn:ogc:def:uom:OGC:1.0:meter">6377563.396</semiMajorAxis> 
     <secondDefiningParameter> 
      <inverseFlattening 
uom="urn:ogc:def:uom:OGC:1.0:unity">299.3249646</inverseFlattening> 
     </secondDefiningParameter> 
    </Ellipsoid> 
   </usesEllipsoid> 
  </GeodeticDatum> 
 </usesGeodeticDatum> 
</GeographicCRS> 
  
The corresponding GML 3.1.1 XML Schema fragment for defining a GeographicCRS is 
attached in the file fragmentGeographicCRSs.xsd. 


NOTE  GML 3.1.1 is not yet fully harmonized with Abstract Specification Topic 2, so the above XML 
document template and the referenced XML Schema fragment are not fully consistent with the following 
UML class diagram. 


6.2.3 Full UML model 


Figure 2 is a more complete UML class diagram extracted from Topic 2 that shows 
essentially all the classes and associations related to the SC_GeographicCRS class. This 
diagram again shows that the SC_GeographicCRS uses a CS_GeodeticCS, which has 
either two or three usesAxis associations to CS_CoordinateSystemAxis. 


© Open Geospatial Consortium (2005) 7 
 







OGC 05-011 


RS_ReferenceSystem


+ name : RS_Identifier
+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>>


SC_CRS


+ scope [0..*] : CharacterString
(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier
+ alias [0..*] : GenericName
+ remarks [0..1] : CharacterString


(from IO_Identi fiedObject)


<<Abstract>>


SC_SingleCRS
(from SC_CoordinateReferenceSystem)


<<Abstract>>


CD_Datum


+ anchorPoint [0..1] : CharacterString
+ realizationEpoch [0..1] : Date
+ domainOfValidity [0..1] : EX_Extent
+ scope [0..*] : CharacterString


(from CD_Datum)


<<Abstract>>


CS_EllipsoidalCS
(from CS_CoordinateSystem)


CS_AxisDirection


+ east
+ north


(from CS_CoordinateSystem)


<<CodeList>>


CS_CoordinateSystemAxis


+ axisAbbrev : CharacterString
+ axisDirection : CS_AxisDirection
+ axisUnitID : UnitOfMeasure
+ minimumValue [0..1] : Number
+ maximumValue [0..1] : Number
+ rangeMeaning [0..1] : CS_RangeMeaning


(from CS_CoordinateSystem)


CS_CoordinateSystem
(from CS_CoordinateSystem)


<<Abstract>>


0..*


0..*


+usesAxis 0..*
{ordered}


0..*


IO_IdentifiedObject


+ name : RS_Identifier
(from IO_Identi fiedObject)


<<Abstract>>


EX_Extent
(from EX_Extent)


<<DataType>>


MD_Identifier


+ authority [0..1] : CI_Citation
+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString
+ version [0..1] : CharacterString


(from RS_ReferenceSystem)


Defined in 
ISO 19115


CS_RangeMeaning


+ exact
+ wraparound


(from CS_CoordinateSystem)


<<CodeList>>


SC_GeographicCRS
(from SC_CoordinateReferenceSystem)


10..*


+usesCS


10..*


CD_Ellipsoid


+ semiMajorAxis : Length
+ secondDefiningParameter : CD_SecondDefiningParameter


(from CD_Datum)
CD_PrimeMeridian


+ greenwichLongitude : Angle = 0
(from CD_Datum)


CD_GeodeticDatum
(from CD_Datum)


0..*


1


0..*


+usesDatum1


1


0..*


+usesEllipsoid 1


0..*


1


0..*


+usesPrimeMeridian 1


0..*


 


Figure 2 — GeographicCRS full UML class diagram 


6.3 Projected CRSs 


6.3.1 Simple UML model 


Figure 3 is a simplified UML class diagram for projected CRSs extracted from Topic 2. 
This diagram shows the concrete (non-abstract) object classes and associations related to 
the SC_ProjectedCRS class, except for the classes and associations for the 


8 © Open Geospatial Consortium (2005)
 







OGC 05-011 


CC_Conversion class (discussed in Subclause 6.4) used as the definedByConversion and 
the SC_GeographicCRS class (discussed in Subclause 6.2) that serves as the baseCRS. 


SC_GeographicCRS
(from SC_CoordinateReferenceSystem)


SC_ProjectedCRS
(from SC_CoordinateReferenceSystem)


1


0..*


+baseCRS1


0..*


CC_Conversion
(from CC_CoordinateOperation)


1


0..*0..*


1+definedByConversion


CS_CartesianCS
(from CS_CoordinateSystem)


1


0..*


+usesCS1


0..*


CS_CoordinateSystemAxis
(from CS_CoordinateSystem)


2


0..*


2


0..*


+usesAxis


 


Figure 3 — ProjectedCRS simple UML class diagram 


6.3.2 XML document example 


An example XML document defining a ProjectedCRS is: 


<?xml version="1.0" encoding="UTF-8"?> 
<ProjectedCRS xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.opengis.net/gml 
fragmentProjectedCRSs.xsd" gml:id="EPSG27700"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26--> 
 <srsName>OSGB 1936 / British National Grid</srsName> 
 <srsID> 
  <name codeSpace="urn:ogc:def:crs:EPSG:6.0:">27700</name> 
 
 </srsID> 
 <baseCRS xlink:href="urn:ogc:def:crs:EPSG:6.0:4277"/> 
 <definedByConversion 
xlink:href="urn:ogc:def:coordinateOperation:EPSG:6.0:19916"/> 
 <usesCartesianCS> 
  <CartesianCS gml:id="EPSG4400"> 
   <csName>Easting and Northing in metres</csName> 
   <csID> 
    <name codeSpace="urn:ogc:def:cs:EPSG:6.0:">4400</name> 
   </csID> 
   <usesAxis> 
    <CoordinateSystemAxis gml:id="EPSG9906" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
     <name>Easting in east direction with metre units </name> 
     <axisID> 


© Open Geospatial Consortium (2005) 9 
 







OGC 05-011 


      <name 
codeSpace="urn:ogc:def:axis:EPSG:6.0:">9906</name> 
     </axisID> 
     <axisAbbrev>E</axisAbbrev> 
     <axisDirection>east</axisDirection> 
    </CoordinateSystemAxis> 
   </usesAxis> 
   <usesAxis> 
    <CoordinateSystemAxis gml:id="EPSG9907" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
     <name>Northing in north direction with metre units 
</name> 
     <axisID> 
      <name 
codeSpace="urn:ogc:def:axis:EPSG:6.0:">9907</name> 
     </axisID> 
     <axisAbbrev>N</axisAbbrev> 
     <axisDirection>north</axisDirection> 
    </CoordinateSystemAxis> 
   </usesAxis> 
  </CartesianCS> 
 </usesCartesianCS> 
</ProjectedCRS> 
  
This example references the baseCRS, which is a GeographicCRS such as discussed in 
Subclause 6.2. This example also references the definedByConversion, which is a 
coordinate Conversion such as discussed in Subclause 6.4. 


The corresponding GML 3.1.1 XML Schema fragment for defining a ProjectedCRS is 
attached in the file fragmentProjectedCRSs.xsd. 


6.3.3 Full UML model 


Figure 4 is a more complete UML class diagram for projected CRSs extracted from Topic 
2. This diagram shows the classes and associations related to the SC_ProjectedCRS class, 
except for the classes and associations for the CC_Conversion class (discussed in 
Subclause 6.4) used as the definedByConversion and the SC_GeographicCRS class 
(discussed in Subclause 6.2) that serves as the baseCRS. 


10 © Open Geospatial Consortium (2005)
 







OGC 05-011 


RS_ReferenceSystem


+ name : RS_Identifier
+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>> IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier
+ alias [0..*] : GenericName
+ remarks [0..1] : CharacterString


(from IO_IdentifiedObject)


<<Abstract>>


EX_Extent
(from EX_Extent)


<<DataType>>


Defined in 
ISO 19115


MD_Identifier


+ authority [0..1] : CI_Citation
+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString
+ version [0..1] : CharacterString


(from RS_ReferenceSystem)


SC_CRS


+ scope [0..*] : CharacterString
(from SC_CoordinateReferenceSystem)


<<Abstract>>


CS_CoordinateSystemAxis


+ axisAbbrev : CharacterString
+ axisDirection : CS_AxisDirection
+ axisUnitID : UnitOfMeasure
+ minimumValue [0..1] : Number
+ maximumValue [0..1] : Number
+ rangeMeaning [0..1] : CS_RangeMeaning


(from CS_CoordinateSystem)


SC_SingleCRS
(from SC_CoordinateReferenceSystem)


<<Abstract>>


SC_GeneralDerivedCRS
(from SC_CoordinateReferenceSystem)


<<Abstract>>


CC_Conversion
(from CC_CoordinateOperation)


SC_GeographicCRS
(from SC_CoordinateReferenceSystem)


SC_ProjectedCRS
(from SC_CoordinateReferenceSystem)


CS_CoordinateSystem
(from CS_CoordinateSystem)


<<Abstract>>


CS_CartesianCS
(from CS_CoordinateSystem)


CS_AxisDirection


+ east
+ north
+ south
+ west


(from CS_CoordinateSystem)


<<CodeList>>


CS_RangeMeaning


+ exact
+ wraparound


(from CS_CoordinateSystem)


<<CodeList>>
IO_IdentifiedObject


+ name : RS_Identifier
(from IO_IdentifiedObject)


<<Abstract>>


+usesAxis


0..*


{ordered}


0..*


+definedBy
Conversion 1


0..*


1


+baseCRS1


0..*


1


0..*


0..*


0..*0..* 0..*


+usesCS11


0..*


 


Figure 4 — ProjectedCRS full UML class diagram 


© Open Geospatial Consortium (2005) 11 
 







OGC 05-011 


6.4 Coordinate conversions 


6.4.1 Simple UML model 


A SC_ProjectedCRS is defined by a CC_Conversion, which is a concrete subtype of the 
CC_CoordinateOperation class. Figure 5 is a simplified UML class diagram for a 
CC_Conversion used for a projected CRS. This diagram shows the concrete (non-
abstract) objects classes and associations related to the CC_Conversion class when used 
to define a SC_ProjectedCRS, except for the CC_ParameterValueGroup and 
CC_OperationParameterGroup classes, which are not normally useful in defining a 
projected CRS. 


+usesParameter


CC_OperationParameter
(from CC_CoordinateOperation)


CC_OperationMethod
(from CC_CoordinateOperation)


0..*


0..*


0..*


0..*


CC_ParameterValue
(from CC_CoordinateOperation)


<<Union>>


0..*


1


0..*


+valueOfParameter 1


CC_Conversion
(from CC_CoordinateOperation)


1


0..*


+usesMethod1


0..*


0..*


1


+usesValue 0..*


1


 


Figure 5 — Conversion UML simple UML class diagram 


To keep this diagram simple, none of the class attributes are displayed. The 
definedByConversion association from the SC_ProjectedCRS class (inherited from the 
abstract SC_GeneralDerivedCRS class) is also not shown. For a projected CRS, this 
Conversion is usually defined by about five instances of the CC_OperationParameter and 
CC_ParameterValue classes, as needed. 


6.4.2 XML document example 


An example XML document defining a CC_Conversion is: 


<?xml version="1.0" encoding="UTF-8"?> 
<Conversion xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xsi:schemaLocation="http://www.opengis.net/gml fragmentConversions.xsd" 
gml:id="EPSG19916"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26--> 
 <!-- SourceCRS: EPSG:4277 OSGB 1936 --> 
 <!-- TargetCRS: EPSG:27700 OSGB 1936 / British National Grid --> 


12 © Open Geospatial Consortium (2005)
 







OGC 05-011 


 <coordinateOperationName>Transverse 
Mercator</coordinateOperationName> 
 <coordinateOperationID> 
  <name 
codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name> 
 </coordinateOperationID> 
 <usesMethod> 
  <OperationMethod gml:id="EPSG9807"> 
   <methodName>Transverse Mercator</methodName> 
   <methodID> 
    <name codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name> 
   </methodID> 
   <methodFormula>See Section 1.4.6 "Transverse Mercator" of EPSG 
Guidance Note 7, December 2000. </methodFormula> 
   <sourceDimensions>2</sourceDimensions> 
   <targetDimensions>2</targetDimensions> 
   <usesParameter> 
    <OperationParameter gml:id="EPSG8801"> 
     <parameterName>Latitude of natural 
origin</parameterName> 
     <parameterID> 
      <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name> 
     </parameterID> 
    </OperationParameter> 
   </usesParameter> 
   <usesParameter> 
    <OperationParameter gml:id="EPSG8802"> 
     <parameterName>Longitude of natural 
origin</parameterName> 
     <parameterID> 
      <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name> 
     </parameterID> 
    </OperationParameter> 
   </usesParameter> 
   <usesParameter> 
    <OperationParameter gml:id="EPSG8805"> 
     <parameterName>Scale factor at natural 
origin</parameterName> 
     <parameterID> 
      <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name> 
     </parameterID> 
    </OperationParameter> 
   </usesParameter> 
   <usesParameter> 
    <OperationParameter gml:id="EPSG8806"> 
     <parameterName>False Easting</parameterName> 
     <parameterID> 
      <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name> 
     </parameterID> 
    </OperationParameter> 
   </usesParameter> 
   <usesParameter> 
    <OperationParameter gml:id="EPSG8807"> 
     <parameterName>False Northing</parameterName> 


© Open Geospatial Consortium (2005) 13 
 







OGC 05-011 


     <parameterID> 
      <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name> 
     </parameterID> 
    </OperationParameter> 
   </usesParameter> 
  </OperationMethod> 
 </usesMethod> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:degree">49</value> 
  <valueOfParameter xlink:href="#EPSG8801" xlink:title="Latitude of 
natural origin"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:degree">-2</value> 
  <valueOfParameter xlink:href="#EPSG8802" xlink:title="Longitude 
of natural origin"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value> 
  <valueOfParameter xlink:href="#EPSG8805" xlink:title="Scale 
factor at natural origin"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value> 
  <valueOfParameter xlink:href="#EPSG8806" xlink:title="False 
Easting"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</value> 
  <valueOfParameter xlink:href="#EPSG8807" xlink:title="False 
Northing"/> 
 </usesValue> 
</Conversion> 
 
The corresponding GML 3.1.1 XML Schema fragment for defining a CC_Conversion is 
attached in the file fragmentConversions.xsd. That XML Schema fragment omits the 
encoding of the CC_OperationParameterGroup and CC_ParameterValueGroup classes, 
plus the validArea and positionalAccuracy attributes, in the UML model. 


6.4.3 Full UML model 


Figure 6 is a more complete UML class diagram for a CC_Conversion used for a 
projected CRS. This diagram shows the classes and associations related to the 
CC_Conversion class when used to define a SC_ProjectedCRS, except for the: 


a) Contents of the DQ_PositionalAccuracy and EX_Extent classes, defined in ISO 
19115 


b) CC_ParameterValueGroup and CC_OperationParameterGroup classes, which are not 
normally useful in defining a projected CRS 


c) Details of the SC_GeneralDerivedCRS class, because they are shown on the diagram 
in Figure 4 


14 © Open Geospatial Consortium (2005)
 







OGC 05-011 


CC_SingleOperation
(from CC_CoordinateOperation)


<<Abstract>>


DQ_PositionalAccuracy
(from DQ_DataQual ity)


<<Abstract>>


CC_CoordinateOperation


+ operationVersion [0..1] : CharacterString
+ domainOfValidity [0..1] : EX_Extent
+ scope [0..*] : CharacterString
+ coordinateOperationAccuracy [0..*] : DQ_PositionalAccuracy


(from CC_CoordinateOperation)


<<Abstract>>


EX_Extent
(from EX_Extent)


<<DataType>>


CC_Conversion


+ operationVersion [0..0] : CharacterString
(from CC_CoordinateOperation)


SC_GeneralDerivedCRS
(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObject


+ name : RS_Identifier
(from IO_Identi fiedObject)


<<Abstract>>


Defined in 
ISO 19115


+definedByConversion 1


0..*


1


0..*


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier
+ alias [0..*] : GenericName
+ remarks [0..1] : CharacterString


(from IO_Identi fiedObject)


<<Abstract>>


CC_ParameterValue


+ value : Measure
+ stringValue : CharacterString
+ integerValue : Integer
+ booleanValue : Boolean
+ valueList : Sequence<Measure>
+ integerValueList : Sequence<Integer>
+ valueFile : CharacterString


(from CC_CoordinateOperation)


<<Union>>


CC_OperationParameter
(from CC_CoordinateOperation)


CC_OperationMethod


+ formula : CharacterString
+ sourceDimensions : Integer
+ targetDimensions : Integer


(from CC_CoordinateOperation)


CC_GeneralOperationParameter


+ minimumOccurs [0..1] : Integer
(from CC_CoordinateOperation)


<<Abstract>>


CC_GeneralParameterValue
(from CC_CoordinateOperation)


<<Abstract>>


0..*


+valueOfParameter


10..* 1


0..*


+usesParameter 0..*


0..*


0..*


CC_Operation
(from CC_CoordinateOperation)


<<Abstract>>


0..* 10..*


+usesMethod


1


0..*


0..*


0..*


+usesValue0..*


 


Figure 6 — Conversion full UML class diagram 


© Open Geospatial Consortium (2005) 15 
 







OGC 05-011 


6.5 Vertical CRSs 


6.5.1 Simple UML model 


Figure 9 is a simplified UML class diagram for Vertical CRSs extracted from Topic 2. 
This diagram shows the concrete (non-abstract) object classes and associations related to 
the SC_VerticalCRS class. 


CD_VerticalDatum
(from CD_Datum)


SC_VerticalCRS
(from SC_CoordinateReferenceSystem)


CS_CoordinateSystemAxis
(from CS_CoordinateSystem)


CS_VerticalCS
(from CS_CoordinateSystem)


+usesDatum1


0..*0..*


1


0..*


+usesAxis1


+usesCS 11


0..*


0..*


1


0..*


 


Figure 7 — VerticalCRS simple UML class diagram 


6.5.2 XML document example 


An example XML document defining a VerticalCRS is: 


<?xml version="1.0" encoding="UTF-8"?> 
<VerticalCRS xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.opengis.net/gml 
fragmentVerticalCRSs.xsd" gml:id="EPSG5701"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26--> 
 <srsName>Newlyn</srsName> 
 <srsID> 
  <name codeSpace="urn:ogc:def:crs:EPSG:6.0:">5701</name> 
 </srsID> 
 <usesVerticalCS> 
  <VerticalCS gml:id="EPSG6499"> 
   <csName>Height up in metres</csName> 
   <csID> 
    <name codeSpace="urn:ogc:def:cs:EPSG:6.0:">6499</name> 
   </csID> 
   <usesAxis> 
    <CoordinateSystemAxis gml:id="EPSG9904" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 


16 © Open Geospatial Consortium (2005)
 







OGC 05-011 


     <name>Gravity-related height in up direction with metre 
units</name> 
     <axisID> 
      <name 
codeSpace="urn:ogc:def:axis:EPSG:6.0:">9904</name> 
     </axisID> 
     <axisAbbrev>H</axisAbbrev> 
     <axisDirection>up</axisDirection> 
    </CoordinateSystemAxis> 
   </usesAxis> 
  </VerticalCS> 
 </usesVerticalCS> 
 <usesVerticalDatum> 
  <VerticalDatum gml:id="EPSG5101"> 
   <datumName>Ordnance Datum Newlyn</datumName> 
   <datumID> 
    <name codeSpace="urn:ogc:def:datum:EPSG:6.0:">5101</name> 
 
   </datumID> 
   <verticalDatumType 
codeSpace="urn:ogc:def:verticalDatumType:OGC:1.0:">geoidal</verticalDat
umType> 
  </VerticalDatum> 
 </usesVerticalDatum> 
</VerticalCRS> 
  
The corresponding GML 3.1.1 XML Schema fragment for defining a VerticalCRS is 
attached in the file fragmentVerticalCRSs.xsd. 


6.5.3 Full UML model 


Figure 10 is a more complete UML class diagram extracted from Topic 2 that shows 
more of the classes and associations related to the SC_VerticalCRS class. 


© Open Geospatial Consortium (2005) 17 
 







OGC 05-011 


RS_ReferenceSystem


+ name : RS_Identifier
+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>>


SC_CRS


+ scope [0..*] : CharacterString
(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier
+ alias [0..*] : GenericName
+ remarks [0..1] : CharacterString


(from IO_IdentifiedObject)


<<Abstract>>


CD_Datum


+ anchorPoint [0..1] : CharacterString
+ realizationEpoch [0..1] : Date
+ domainOfValidity [0..1] : EX_Extent
+ scope [0..*] : CharacterString


(from CD_Datum)


<<Abstract>>


CS_AxisDirection


+ down
+ up


(from CS_CoordinateSystem)


<<CodeList>>


IO_IdentifiedObject


+ name : RS_Identifier
(from IO_IdentifiedObject)


<<Abstract>>


EX_Extent
(from EX_Extent)


<<DataType>>
MD_Identifier


+ authority [0..1] : CI_Citation
+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString
+ version [0..1] : CharacterString


(from RS_ReferenceSystem)
Defined in 
ISO 19115


CS_RangeMeaning


+ exact
+ wraparound


(from CS_CoordinateSystem)


<<CodeList>>


CS_CoordinateSystemAxis


+ axisAbbrev : CharacterString
+ axisDirection : CS_AxisDirection
+ axisUnitID : UnitOfMeasure
+ minimumValue [0..1] : Number
+ maximumValue [0..1] : Number
+ rangeMeaning [0..1] : CS_RangeMeaning


(from CS_CoordinateSystem)


CS_CoordinateSystem
(from CS_CoordinateSystem)


<<Abstract>>


SC_SingleCRS
(from SC_CoordinateReferenceSystem)


<<Abstract>>


CD_VerticalDatum
(from CD_Datum)


CS_VerticalCS
(from CS_CoordinateSystem)


SC_VerticalCRS
(from SC_CoordinateReferenceSystem)


+usesAxis0..*
{ordered}


0..*


0..*


0..*


+usesDatum 1 +usesCS1


0..*0..*


1


0..*


1


0..*


 


Figure 8 — VerticalCRS full UML class diagram 


18 © Open Geospatial Consortium (2005)
 







OGC 05-011 


6.6 Compound CRSs 


6.6.1 Simple UML model 


Figure 9 is a simplified UML class diagram for Compound CRSs extracted from Topic 2. 
This diagram shows the concrete (non-abstract) object classes and associations related to 
the SC_CompoundCRS class, when it combines a SC_ProjectedCRS and a 
SC_VerticalCRS. Similarly, a 2D SC_GeographicCRS could be combined with a 
SC_VerticalCRS. This figure does not detail the SC_ProjectedCRS class which is 
discussed in Subclause 6.3, or the SC_VerticalCRS class which is discussed in Subclause 
6.5. 


SC_ProjectedCRS
(from SC_CoordinateReferenceSystem)


SC_CompoundCRS
(from SC_CoordinateReferenceSystem)


1


0..*


+includesCRS (1) 1


0..*


SC_VerticalCRS
(from SC_CoordinateReferenceSystem)


1


0..*


+includesCRS (2)1


0..*


 


Figure 9 — CompoundCRS simple UML class diagram 


6.6.2 XML document example 


An example XML document defining a CompoundCRS is: 


<?xml version="1.0" encoding="UTF-8"?> 
<CompoundCRS xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.opengis.net/gml 
fragmentCompoundCRSs.xsd" gml:id="EPSG7405"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2004-01-26--> 
 <srsName>OSGB36 /British National Grid + ODN</srsName> 
 <srsID> 
  <name codeSpace="urn:ogc:def:crs:EPSG:6.3:">7405</name> 
 </srsID> 
 <validArea> 
  <description>United Kingdom (UK) - Great Britain - England 
Scotland Wales - onshore; Isle of Man. 
</description> 
 </validArea> 
 <includesCRS xlink:href="urn:ogc:def:crs:EPSG:6.3:27700" 
xlink:title="OSGB 1936 / British National Grid"/> 
 <includesCRS xlink:href="urn:ogc:def:cs:EPSG:6.3:6499" 
xlink:title="Newlyn"/> 
</CompoundCRS> 
  


© Open Geospatial Consortium (2005) 19 
 







OGC 05-011 


This example uses URNs referencing the two included CRSs. Alternately, the complete 
definitions of those CRSs could be XML encoded (as shown in above examples) within 
the two includesCRS elements. 


The corresponding GML 3.1.1 XML Schema fragment for defining a CompoundCRS is 
attached in the file fragmentCompoundCRSs.xsd. 


6.6.3 Full UML model 


Figure 10 is a more complete UML class diagram extracted from Topic 2 that shows 
more of the classes and associations related to the SC_CompoundCRS class, when it 
combines a Projected CRS and a VerticalCRS. Again, this figure does not detail the 
SC_ProjectedCRS class which is discussed in Subclause 6.3, or the SC_VerticalCRS 
class which is discussed in Subclause 6.5. 


20 © Open Geospatial Consortium (2005)
 







OGC 05-011 


RS_ReferenceSystem


+ name : RS_Identifier
+ domainOfValidity [0..*] : EX_Extent


(from RS_ReferenceSystem)


<<Abstract>>


SC_CRS


+ scope [0..*] : CharacterString
(from SC_CoordinateReferenceSystem)


<<Abstract>>


IO_IdentifiedObjectBase


+ identifier [0..*] : RS_Identifier
+ alias [0..*] : GenericName
+ remarks [0..1] : CharacterString


(from IO_Identi fiedObject)


<<Abstract>>


EX_Extent
(from EX_Extent)


<<DataType>>MD_Identifier


+ authority [0..1] : CI_Citation
+ code : CharacterString


(from MD_Metadata)


<<DataType>>


RS_Identifier


+ codeSpace [0..1] : CharacterString
+ version [0..1] : CharacterString


(from RS_ReferenceSystem)


Defined in 
ISO 19115


SC_SingleCRS
(from SC_CoordinateReferenceSystem)


<<Abstract>>


SC_CompoundCRS
(from SC_CoordinateReferenceSystem)


2..*0..*


+includesCRS


2..*


{ordered}


0..*


SC_ProjectedCRS
(from SC_CoordinateReferenceSystem)


SC_GeneralDerivedCRS
(from SC_CoordinateReferenceSystem)


<<Abstract>>


CC_Conversion
(from CC_CoordinateOperation)


0..*


1


0..*


+definedBy
Conversion1


SC_VerticalCRS
(from SC_CoordinateReferenceSystem)


 


Figure 10 — CompoundCRS full UML class diagram 


7 Supporting information 


This clause introduces information provided in the annexes supporting the encoding 
described in Clause 6: 


• Annex A (informative) describes the expected OGC uses (or use cases) for 
transferring CRS and coordinate operation definition data. 


• Annex B (normative) specifies the requirements for OGC Implementation 
Specification conformance to the CRS portions of GML 3.1.1, and an abstract test 
suite for checking such conformance. Requirements are also specified for compliance 
of Application Schemas. 


© Open Geospatial Consortium (2005) 21 
 







OGC 05-011 


• Annex C (informative) provides more example XML documents using the CRS 
Schemas. 


• Annex D (informative) provides an example application schema based on the CRS 
Schemas, with corresponding example XML documents and UML models. 


• Annex E (informative) describes some example operation methods. 


22 © Open Geospatial Consortium (2005)
 







OGC 05-011 


Annex A 
(informative) 


 
Expected uses of CRS definition data 


A.1 Introduction 


The expected OGC uses (or use cases) for transferring CRS and coordinate operation 
definition data produce requirements to be satisfied by the XML encoding of that data. 
Three broad uses of such definition data transfer have been identified: 


a) Use to transfer definition of a Coordinate Reference System (CRS), used by other 
geospatial data 


b) Use to transfer definition of a Coordinate Transformation (CT), that can be performed 
by a coordinate transformation service 


c) Use to transfer lineage or history of other geospatial data 


Additional OGC uses of the proposed CRS and coordinate operation definition data 
might be identified in the future. These expected OGC uses assume the OGC is 
standardizing software-to-software interfaces (or Application Programming Interfaces, 
APIs) and associated data transfer formats, but is not (currently) trying to standardize 
human-computer interfaces. 


Each OGC standard interface must allow both server and client software to be written 
that implements that interface. Simplicity of the interfaces is highly desirable, to simplify 
client software. Simplicity of server implementation software is somewhat important, but 
not as important as interface simplicity. 


The following subclauses first discuss the multiple uses of definition data, the alternate 
ways in which definition data can be transferred, and then the three data transfer uses 
listed above. 


A.2 Multiple uses of definition data 


CRS and CT definition data can be used in at least three broad overlapping ways, to: 


a) Describe a specific CRS or CT to a human user. Note that different human users need 
different degrees of definition detail. 


b) Uniquely identify a specific CRS or CT to software. For a CRS, such identification 
can be used by software to check if different geospatial datasets are recorded using 
the same CRS, or to find additional data about a CRS that is stored elsewhere. 


c) Provide data for performing coordinate transformations and conversions, useful to 
transformation software. For a CT, such data might be used to perform that 
transformation. For a CRS, such data might be used in transforming point positions to 
or from that CRS. 


© Open Geospatial Consortium (2005) 23 
 







OGC 05-011 


A.3 Alternative ways to transfer definition data 


CRS and CT definition data can be transferred in three alternative ways: 


a) Transfer only identifier and perhaps name, of each CRS or CT 
b) Transfer complete definition, of each CRS or CT 
c) Transfer partial definition with identifiers (and perhaps names) for remaining parts, of 


each CRS or CT 


Only an identifier needs to be transferred for a complete CRS or CT, or for any part 
thereof, for any part that is well-known to the receiving software. Well-known usually 
means that some recognized authority has produced and published a complete 
specification of that part. Server software could have those well-known definitions coded 
into the software. Alternately, server software could be coded to access those definitions 
when needed from a separate service known to the server. Such a separate service may be 
maintained by the authority or by a third party. 


In general, there will be several CRS and CT specification authorities that one server or 
client might use, separately and together. Of course, some software implementations may 
use no such authority, or only one such authority. One widely-used, publicly-available 
authority is the European Petroleum Survey Group (EPSG), and use of this authority is 
currently specified in several OGC Implementation Specifications. However, other and 
more private authorities exist and must be supported by some OGC standard interfaces, 
including military affiliated authorities (e.g., DIGEST). Somewhat private authorities are 
expected to be used for many engineering and image coordinate reference systems. 


A complete CRS or CT specification must be transferred for a CRS or CT, or for any part 
thereof, for any part that is not well-known to the receiving software. Some server or 
client implementations could support no well-known CRS and/or CT definitions. More 
likely, some applications are expected to use some non-well-known CRS or CT 
definitions. For example, a grid coverage can use a CRS specific to that coverage. Also, 
an image coordinate transformation is likely to be specific to one image, and may not be 
supported by any authority that makes that CT well-known. 


A.4 Use to transfer coordinate reference system definition 


XML can be used to transfer the definition of a Coordinate Reference System (CRS) used 
by other geospatial data, especially data encoded using XML. In most cases, one 
geospatial dataset will use only one CRS. The definition of a CRS for a geospatial dataset 
can be transferred (usually through an OGC interface) for several different purposes, 
including: 


a) Coordinate Transformation (CT) interface. The current Coordinate Transformation 
(CT) server interface allows use of XML to transfer definitions of CRSs. That is, a 
client can send the definition of one CRS that the client is requesting access, to server 


24 © Open Geospatial Consortium (2005)
 







OGC 05-011 


software. Similarly, the server software can send to a client the definition of one CRS 
that the client currently has access to. 


b) Geography Markup Language (GML). The encoding of features in XML, now 
specified in the GML Implementation Specification, might use this CRS XML to 
define the CRS of a feature collection or feature. 


c) Web Map Server (WMS) interface. A future version of the WMS interface might use 
XML to define the CRS that the client is requesting “map” data in. (The WMS 
interface does not currently use XML for this purpose.) In the current WMS interface, 
only well-known CRSs are supported, so only the identifier of that well-known CRS 
is transferred in a Get Map request. 


d) Grid Coverage (GC) interface. A future version of the GC (access) interface might 
use XML to define the CRS used by a coverage, when requested by a client. (The 
current GC interface does not use XML for this purpose.) In the current draft GC 
interface, the CRS can be defined for one specific grid coverage, requiring transfer of 
a more complete specification of that CRS. That grid CRS is usually specified as a 
custom affine coordinate conversion or transformation from another CRS. 


A.4.1 Current CRS transfer by low-level CT interface 


The current low-level Coordinate Transformation (CT) Implementation Specification 
(OGC document 01-009) supports XML transfer of a CRS definition in one operation and 
in one attribute. 


The createFromXML operation of the CS_CoordinateSystemFactory <<Interface>> class 
creates a CS_CoordinateSystem object from a XML character string. One server will 
implement one CS_CoordinateSystemFactory object. The signature of this UML 
operation is: 


createFromXML (xml:CharacterString) : CS_CoordinateSystem 
 
The “XML” read-only UML attribute of the CS_Info class allows a client to get an XML 
character string representation of an object, which can be either a CS_CoordinateSystem 
or a CS_Unit UML object. Objects of both the CS_CoordinateSystem and CS_Unit UML 
classes can be instantiated by multiple other objects visible to one client. Note that a 
CS_CoordinateSystem object can be created in several ways other than use of the 
createFromXML operation. The signature of this UML attribute is: 


XML : CharacterString 
 
In the createFromXML operation, and when the UML attribute is used to get XML for a 
CS_CoordinateSystem object, the XML DTD for CS_CoordinateSystem provided in 
Section 15.1.1 (pages 113 through 115) of 00-007r4 is used. Example XML using that 
XML DTD is provided in Section 15.1.2 (pages 116 and 117) of 01-009. (Because that 
XML DTD and example XML are each more than one page, they are not copied here.) 


NOTE  A future version of the Coordinate Transformation (CT) Implementation Specification could 
use XML in additional places, especially where use of WKT is now supported but use of XML is not now 
supported. 


© Open Geospatial Consortium (2005) 25 
 







OGC 05-011 


A.4.2 Current CRS transfer by ICT and high-level CT interfaces 


A draft high-level Coordinate Transformation (CT) Implementation Specification (OGC 
document 01-013r1) supports XML transfer of a CRS definition by two operations. The 
same two operations are supported by the draft Image Coordinate Transformation (ICT) 
interface (OGC document 00-045r1). These two operations are provided to clients by the 
one Ground Coordinate Transformation Service <<Interface>> object. The UML 
operation signatures of these two operations are: 


addTransformation (metadata : TransformationMetadata,  
format : TextFormat) : TransformationID 


transformationMetadata (transformation : TransformationID, 
format : TextFormat) : TransformationMetadata 


 
XML is one possible format used by the Transformation Metadata <<DataType>> class 
that is used by these two operations. The Transformation Metadata class contains three 
UML attributes, with the signatures: 


sourceCS : CoordinateSystemDefinition 
targetCS : CoordinateSystemDefinition 
transformation [0..1]: TransformationDefinition 


 
The CoordinateReferenceSystem XML element, with all its contents, specified in this 
document could to be used for each Coordinate System Definition instance in the 
Transformation Metadata. (However, the Transformation XML element specified in 
GML 3.1.1, with all their contents, alternately could be used for complete Transformation 
Metadata, including both the source and target CoordinateReferenceSystems.) 


A.5 Use to transfer coordinate transformation (CT) definition 


XML can be used to transfer the definition of a Coordinate Transformation (CT) in the 
interfaces to Coordinate Transformation (CT) services. These interfaces include the 
accepted (low level) CT Implementation Specification, OGC document 01-009. These 
interfaces also include a high-level CT interface now proposed in document 01-013, plus 
draft Image Coordinate Transformation interfaces documented in 00-045r1. These CT 
interfaces use XML to transfer CT definitions with and without associated source and 
target CRSs. 


A.5.1 Current CT transfer by low-level CT Interface 


The current low-level Coordinate Transformation (CT) Implementation Specification 
(OGC document 01-009) supports XML transfer of a CT definition in one operation and 
one attribute. 


The createFromXML operation of the CT_MathTransformFactory <<Interface>> class 
creates a CT_MathTransform object from a XML character string. One server will 
implement one CT_MathTransformFactory object. The UML signature of this operation 
is: 


26 © Open Geospatial Consortium (2005)
 







OGC 05-011 


createFromXML (xml:CharacterString) : CT_MathTransform 
 
The “XML” read-only UML attribute of the CT_MathTransform class allows a client to 
get an XML character string representation of this UML object. Objects of the 
CT_MathTransform class can be instantiated by multiple UML objects visible to one 
client. Note that a CT_MathTransform object can be created in several ways other than 
use of the createFromXML operation. The signature of this UML attribute is: 


XML : CharacterString 
 
For both of these XML uses, the XML DTD for CT_MathTransform provided in Section 
15.1.1 (page 113) of 01-009 is used. Example XML using that XML DTD is not provided 
in 01-009. The XML DTD for CT_MathTransform now in Section 15.1.1 is: 


<!DOCTYPE CT_MathTransform [ 
<!ELEMENT CT_MathTransform ( 


CT_ConcatenatedTransform | 
CT_InverseTransform | 
CT_ParameterizedMathTransform | 
CT_PassThroughTransform) > 


 
<!ELEMENT CT_ParameterizedMathTransform (CT_Parameter*)> 
<!ATTLIST CT_ParameterizedMathTransform 


ClassName           CDATA    #REQUIRED 
> 


 
<!ELEMENT CT_PassThroughTransform (CT_MathTransform)> 
<!ATTLIST CT_PassThroughTransform 


FirstAffectedOrdinate   CDATA    #REQUIRED 
> 


 
<!ELEMENT CT_ConcatenatedTransform (CT_MathTransform*)> 
<!ELEMENT CT_InverseTransform (CT_MathTransform)> 


 
<!ELEMENT CT_Parameter EMPTY> 
<!ATTLIST CT_Parameter 


Name                CDATA    #REQUIRED 
Value               CDATA    #REQUIRED 
> 


]> 
 
NOTE  This CT_MathTransform does not include any information on the source and target coordinate 
systems. Also, a future version of the low-level Coordinate Transformation (CT) Implementation 
Specification could use XML in additional places, especially where use of WKT is now supported but use 
of XML is not now supported.) 


A.5.2 Current CT transfer by ICT and high-level CT interfaces 


A draft high-level Coordinate Transformation (CT) interface specification (OGC 
document 01-013) supports XML transfer of a CT definition by two operations. The same 
two operations are supported by the draft Image Coordinate Transformation (ICT) 
interface (OGC document 00-045r1). These two operations are provided to clients by the 


© Open Geospatial Consortium (2005) 27 
 







OGC 05-011 


one Ground Coordinate Transformation Service <<Interface>> object. The signatures of 
these two UML operations are: 


addTransformation (metadata : TransformationMetadata,  
format : TextFormat) : TransformationID 


transformationMetadata (transformation : TransformationID, 
format : TextFormat) : TransformationMetadata 


 
XML is one possible format used by the Transformation Metadata <<DataType>> class 
that is used by these two operations. The Transformation Metadata class contains three 
UML attributes, with the signatures: 


sourceCS : CoordinateSystemDefinition 
targetCS : CoordinateSystemDefinition 
transformation [0..1]: TransformationDefinition 


 
The Transformation XML element specified in GML 3.1.1, with all their contents, could 
be used for a complete Transformation Metadata instance, including both the source and 
target CoordinateReferenceSystems. The Conversion XML element, with all its' contents 
probably can also be used for each Transformation Metadata instance. 


A.6 Use to transfer dataset lineage or history 


XML can be used to transfer the lineage or history of geospatial data, especially data encoded 
using XML. Such lineage information is specified by ISO 19115: Geographic 
information – Metadata to be part of the useful metadata about a dataset, and that 
metadata could be recorded in XML. (The OGC encourages use of ISO 19115 Metadata, 
but there are no uses of XML to transfer dataset lineage or history in current draft or 
accepted OGC Implementation Specifications.) 


The lineage of a dataset, or of a part of a larger dataset, is likely to include the original 
CRS of the positions in that data, plus the sequence of coordinate transformations used to 
change these positions into the CRS in which the data is now recorded. Alternately, one 
concatenated coordinate transformation could be recorded that includes the original CRS 
and the sequence of coordinate transformations used. Similar metadata might be recorded 
for data still in the original CRS, but planned to be converted into a different CRS. 


28 © Open Geospatial Consortium (2005)
 







OGC 05-011 


Annex B 
(normative) 


  
Conformance 


B.1 Conformance requirements 


Each OGC Implementation Specification that uses XML encoding to transfer data 
defining coordinate reference systems and/or coordinate operations shall transfer 
definition data that conforms to this Recommendation Paper. Each relevant data transfer 
situation specified by such a specification shall transfer data that contains the entire 
applicable subset of the definition data specified in this Paper. Each such data transfer 
should include any additional data needed. Each relevant OGC Implementation 
Specification shall clearly specify the contents, structure, and format of the XML 
encoded data transferred in each specified data transfer situation, usually partially 
specified as an Application Schema based on these CRS schemas. 


NOTE 1 In many cases, an Implementation Specification will specify the Application Programming 
Interface (API) to service software. In those cases, each specified data transfer situation is each input and 
output argument of each operation in a UML model of the service interface. Of course, multiple operation 
arguments will often transfer the same possible data, and thus use the same subset of the definition data 
specified here. Also, multiple arguments may use the same subset of the definition data specified here, 
although different arguments use different subsets of that data. 


NOTE 2 Many of the concrete XML elements defined in the CRS Schemas can be used without 
Application Schemas, if no contents extensions or restrictions are needed. However, the Conversion, 
Transformation, ParameterValue, and ParameterValueGroup elements should not be used for well-known 
coordinate operation methods having many element instances. Instead, an Application Schema that defines 
operation-method-specialized element names and contents should be prepared and standardized, see 
Subclause B.3. 


Whenever coordinate reference system and/or coordinate operation definition data is 
transferred using XML encoding, the data contents and structure specified in GML shall 
be used wherever applicable. The data contents and structure aspects specified that shall 
be used include: 


a) Name of each specified XML element and attribute 


NOTE 3 When an Application Schema is used, the same name can be used in different namespaces. 


b) Meaning of each specified name 
c) Contents of each specified complexType 
d) Sequence of elements included within each specified complexType 
e) Multiplicity and optionality of each element and attribute in each specified 


complexType 


f) Data type of each specified individual data item 


When a data transfer situation requires a subset of the definition information specified, a 
suitable subset profile can be used. When a data transfer situation requires a superset of 


© Open Geospatial Consortium (2005) 29 
 







OGC 05-011 


the definition information specified, a suitable Application Schema shall be specified, 
and its' use shall be required. Each such Application Schema shall conform to the Rules 
for Application Schemas specified in Subclause B.3. The changes permitted in an 
Application Schema include: 


a) Add additional elements to a specified complexType, containing additional 
information 


b) Omit a specified element, when not needed and that element is specified as being 
optional (minOccurs="0") 


c) Remove some of the set of alternative elements in a specified <choice> data structure  
d) Make an optional element required (minOccurs not specified, default ="1") 
e) Reduce specified maximum number-of-repetitions of an element 
f) Change data type of an element to a more restrictive type 
g) Restrict the meaning of a specified name, to match a restriction of an Implementation 


Specification 


h) Specify standard contents and contents patterns for selected elements and attributes, 
for interoperability. 


i) Specify standard XML and other documents to be referenced or otherwise used, for 
interoperability. 


Many possible changes to the definition data specified here are not allowed, such as: 


a) Completely change the definition of a specified name 
b) Expand the set of alternative contents in a specified <choice> data structure 
c) Make optional an element or attribute required in a specified complexType 
d) Increase maximum number-of-repetitions of an element 
e) Change data type of a specified element to a less restrictive type 
f) Change the required order of elements in a specified complexType 


B.2 Abstract test suite 


Conformance of each application of these CRS Schemas shall be tested by inspecting the 
specification of each transferred XML encoded data structure and individual data item. 
The tested specification of XML encoded data shall include all Application Schemas 
used. This testing shall be done for each XML element and attribute that can be included 
in each specified data transfer. For each such XML element and attribute, the following 
questions shall be answered: 


a) What is the (complete) meaning of this XML element or attribute? 
b) Is this meaning part of the definition of an XML element or attribute specified herein? 


If not related, this data structure or item IS conformant. 


30 © Open Geospatial Consortium (2005)
 







OGC 05-011 


c) Is this meaning similar to the meaning of any XML element or attribute specified 
herein? If not similar, this data structure or item IS conformant. 


d) Is this meaning the same as, or a restriction of, the most similar meaning specified 
herein? If not the same or restricted, this data structure or item is NOT conformant. 


e) Is the name of this XML element or attribute the same as the name of the 
corresponding item specified herein? If not the same name, this data structure or item 
is NOT conformant. 


f) Is the type of this XML element or attribute the same as the type of the corresponding 
item specified herein, a subtype of that type, or a type with all the relevant contents of 
that type? If the type is not the same or equivalent, this item is NOT conformant. 


If an individual XML element or attribute with a simpleType is being inspected, the 
questions continue: 


g) Is the data type of this item the same as, or a subset of, the data type of the 
corresponding item specified here? If not the same or a subset, this data item is NOT 
conformant. 


h) Does this element have a specified multiplicity range that extends outside the allowed 
multiplicity of the corresponding element specified here? If a larger multiplicity range 
is allowed, this element is NOT conformant. 


If a XML element with a complexType is being inspected, the questions continue: 


g) Do the contents of this complexType include all or a subset of the XML elements and 
attributes included in the corresponding complexType specified here? If doesn’t 
include all or a subset, this complexType is NOT conformant. 


h) Do the contents of this complexType include the corresponding XML elements in the 
same required order? If not the same order, this complexType is NOT conformant. 


i) If this complexType extends a complexType specified here, and the <documentation> 
element in that complexType specified here states constraints on inclusion of 
additional elements, and those constraints are not all satisfied, this complexType is 
NOT conformant. 


j) For each XML element or attribute included in this complexType that has a 
corresponding item in the complexType specified here, is the element or attribute 
multiplicity (including optionality) compatible? 


1) If the multiplicity and optionality are the same, this item IS conformant. 
2) If an element or attribute is now omitted instead of optional, this item IS 


conformant. 


3) If an element or attribute is now required instead of optional, this item IS 
conformant. 


4) If an element or attribute is now optional instead of required, this item is NOT 
conformant. 


© Open Geospatial Consortium (2005) 31 
 







OGC 05-011 


5) If an element is now not repeated instead of being repeated one or more times, 
this item IS conformant. 


6) If an element can now be repeated instead of not being repeated, this item is 
NOT conformant. 


7) If the <documentation> element in the complexType specified here states a 
constraint on the multiplicity of this item and this constraint is not satisfied, this 
item is NOT conformant. 


B.3 Rules for application schemas 


B.3.1 Introduction 


An Application Schema is an XML Schema that imports and builds upon one or more of 
the GML Schemas. Such an Application Schema defines one or more XML elements 
useful for transfer of encoded geospatial data. An Application Schema can specify a 
single top level element for use by an XML document, with the XML elements and types 
that it uses. That single top level XML element can be an object with identity, but this is 
not required. Such a Schema with its imported GML Schemas defines a vocabulary for a 
particular domain of discourse by defining and describing the terms of that vocabulary 
(see ISO TC/211 19109). 


Most of the concrete XML elements defined in the CRS Schemas within GML can be 
used without Application Schemas, whenever no content extensions or restrictions are 
needed. An Application Schema shall be used whenever element contents extension is 
required, and should be used in some other cases to specify needed restrictions. That is, 
an Application Schema should be defined to extend and/or restrict elements as needed for 
a specific application, or a set of applications, to: 


a) Add elements to contents of existing elements, for recording additional data about 
that item needed for that application. 


b) Restrict the multiplicity of current contents elements, to eliminate flexibility not 
needed and perhaps confusing for that application. 


c) Use a different element name, to be more easily understood in that specific 
application, primarily for elements that will be instantiated many times. 


d) Specify standard contents and contents patterns for selected elements and attributes, 
as needed to improve interoperability. 


e) Specify standard XML and other documents to be referenced or otherwise used, as 
needed to improve interoperability. 


Application Schemas can thus be used for XML document contents extensions, 
restrictions, or both. Contents extension is expected to be often used to record additional 
data needed for applications. Contents restriction is expected to be frequently used to 
increase interoperability and reduce ambiguity when greater flexibility is not needed for 
applications. Extensions of existing concrete elements can be defined by extending that 


32 © Open Geospatial Consortium (2005)
 







OGC 05-011 


concrete element. In many cases, restrictions of existing concrete elements can be done 
by extending the abstract element from which that concrete element is derived, by adding 
somewhat different but corresponding extensions.  


Application Schemas could define an additional concrete element using by extending an 
abstract element, if needed. However, an additional concrete element using or extending 
an abstract element should not be defined if that concrete element is largely similar to an 
existing element, and thus probably should extend or use an existing concrete element. In 
many cases, the existing concrete elements that use an abstract element are believed to be 
largely exhaustive. This is particularly true when the existing concrete elements include 
one element that is quite general, such as the elements EngineeringCRS, DerivedCRS, 
EngineeringDatum, UserDefinedCS, OperationParameter, and 
OperationParameterGroup. 


The Conversion, Transformation, ParameterValue, and ParameterValueGroup elements 
can be used for well-known coordinate operation methods, especially when only one 
instance of that element is needed for that operation method. However, these elements 
probably should not be used for well-known coordinate operation methods when many 
instances of that element are needed for one operation method. Instead, an Application 
Schema that defines operation-method-specialized element names and contents should be 
prepared for each such operation method. Subclause D.2 provides an example of such an 
Application Schema. For interoperability, a suitable geospatial information community 
should standardize each such Application Schema. 


NOTE  This use of Application Schemas follows the GML 3 patterns. This GML pattern is to generally 
use Application Schemas, especially when use of Application Schemas allows definition of XML Schema 
having: 1) complexTypes with more specific restrictions on the contents of elements, sometime in ways 
that allow XML parsers to more completely check for correct contents of XML documents, and 2) elements 
with more specific and understandable names, to make XML documents easier to understand by humans. 


Conformance of an application of these CRS Schemas shall be tested by inspecting each 
Application Schema used, if any. Notice that the CRS set of GML Schemas can be used 
without an Application Schema, and such use is allowed whenever appropriate. To use 
those CRS Schemas without an Application Schema, any defined XML concrete element 
can be used as the basis for an XML document. There are about 30 such concrete 
elements defined that may be directly useful. In addition, all of those concrete elements 
can be used inside a GML 3 Dictionary element. Furthermore, all of those concrete 
elements or a Dictionary can be used inside a GenericMetaData element inside a 
metaDataProperty element, which can be included in many other elements. 


The remainder of this subclause specifies the requirements (or rules) for an Application 
Schema to be considered conformant with this Recommendation Paper. Notice that it is 
clearly possible to develop Application Schemas that use the CRS Schemas specified 
herein which are valid XML Schemas but do not follow all these rules, and are thus not 
conformant with this Recommendation Paper. 


© Open Geospatial Consortium (2005) 33 
 







OGC 05-011 


B.3.2 General rules 


All conformant Application Schemas shall be constructed by building upon one or more 
of the CRS set of GML 3.1.1 Schemas. Such a Schema shall be a valid XML Schema, as 
specified in the XML Schema specification. 


Each application schema must declare a target namespace. This is the namespace in 
which the XML elements or terms of the vocabulary “live”. This shall not be the GML 
namespace (http://www.opengis.net/gml). It is conventional for the namespace identifier 
to be a URL controlled by the application schema author’s organization. A target 
namespace is declared in the application schema using the targetNamespace attribute of 
the schema element from XML Schema. 


B.3.4 Import needed schemas 


An Application Schema must import the necessary XML Schemas from GML 3, with the 
correct namespace assignment. For example, in order to define coordinate reference 
systems, it is necessary to import coordinateReferenceSystems.xsd, either directly or 
indirectly. Direct import is done by including the declaration: 


<xsd:import namespace="http://www.opengis.net/gml" 
schemaLocation="../coordinateReferenceSystems.xsd"/> 


 
Notice that the <import> element specifies that the components described in 
coordinateReferenceSystems.xsd are in the GML namespace 
http://www.opengis.net/gml. This namespace identifier must match the target namespace 
specified in the schema being imported, to ensure XML Schema validity. 


The schemaLocation of the imported .xsd file can be a local reference or a URI reference 
to the file. A URI reference can be to some remote repository, such as the repository 
http://schemas.opengis.net/gml on the OGC web site. The above example assumes that 
the coordinateReferenceSystems.xsd file is stored locally at a location relative to this 
Application Schemas .xsd file. 


In addition, the required import of a GML schema may be provided by the import of an 
equivalent subset schema as described in Subclause 7.14 of the GML 3.0 Implementation 
Specification, or by the import of an equivalent schema from a GML profile. These are 
all equivalent schemas with respect to satisfying the schema import requirements. 


The above example imports coordinateReferenceSystems.xsd, which (directly and 
indirectly) includes the other five CRS Schemas plus nine other GML 3.1 Schemas. For 
some Application Schemas, coordinateReferenceSystems.xsd may not be needed, but one 
or more of the other CRS Schemas may be needed. 


B.3.5 GML objects and properties 


The content models of almost all (about 30) concrete elements are derived from 
gml:DefinitionType. These elements are ultimately derived from the AbstractGMLType 


34 © Open Geospatial Consortium (2005)
 



http://www.opengis.net/gml

http://www.opengis.net/gml





OGC 05-011 


and are thus GML Objects. These elements shall thus follow the GML class/property 
model, as specified in Subclause 7.2.2 of the GML 3.0 Implementation Specification. 
That is, the children of these elements must not be elements whose content models derive 
directly or indirectly from AbstractGMLType. The children of these elements are 
properties that describe that component. 


B.3.6 Global and local names 


Note that elements included in complex types that are defined with local names in an 
Application Schema will prevent derivation by restriction in another namespace, unless 
the local names are dropped in the restriction. Such complex types are appropriate for 
elements intended for use “as is” in their own namespace, and should be declared to be 
final=”restriction”. Elements included in complex types by reference to global elements 
support derivation by restriction in another namespace, allowing restriction of cardinality, 
and/or replacement by a member of a substitution group. Such complex types designed 
for derivation by restriction are appropriate “library types” for elements in substitution 
groups that cross namespaces. 


B.4 UML models for application schemas 


Each Application Schema can be produced by converting a UML model (or part of such a 
model), as required to comply with ISO 19118. If such a UML model is encoded, the 
XML encoding rules used should be similar to the encoding rules used for GML, as 
described in Annex G of [03-010r9]. 


To comply with this specification, each such UML model shall be based on the same 
UML model as these CRS Schemas. For Application Schemas, subclasses can be defined 
for most non-abstract classes in this UML model. A subclass can extend and/or restrict a 
current concrete class to: 


a) Add UML attributes and/or navigable associations, for recording additional data 
about that class needed for that application. 


b) Restrict the multiplicity of current attributes and/or navigable associations, to 
eliminate flexibility not needed and perhaps confusing for that application. 


c) Use a different class name, to be more easily understood in that specific application, 
primarily for classes that will be instantiated many times. 


d) Specify standard or default contents for selected UML attributes, for interoperability. 


Application Schemas could define additional concrete subclasses of abstract classes in 
this UML model, if needed. However, additional concrete subclasses should not be 
defined that are largely similar to existing subclasses, and thus probably should be a 
subclass of an existing concrete subclass. In most cases, the existing concrete subclasses 
of an abstract class are believed to be largely exhaustive. This is particularly true when 
the existing subclasses include one subclass that is quite general, such as the classes 
SC_EngineeringCSR, SC_DerivedCRS, CD_EngineeringDatum, CS_UserDefinedCS, 
and CC_OperationParameter. 


© Open Geospatial Consortium (2005) 35 
 







OGC 05-011 


Annex C 
(informative) 


 
More XML document examples 


C.1 Introduction 


This annex provides additional example XML documents using the GML 3.1.1 Schemas. 
These XML examples omit some optional XML elements and attributes that might be 
included, and include some optional elements and attributes that might be omitted. This 
omission or inclusion was partially based on whether reasonable values were known for 
optional elements and attributes. The optional elements that are omitted in these 
examples XML include: 


a) The “remarks” element in all IdentifierType and object elements. 
b) The "scope" element in all elements that could include it. 


These XML examples use patterns that are not specified in this document for values of 
the "gml:id" and "xlink:title" XML attributes. 


NOTE  For interoperability, the patterns or formats used for the values of these attributes must be 
specified somewhere, perhaps in or with an Application Schema. 


C.2 Extended example XML for compound coordinate reference system 


This subclause provides a more complete example XML document using the Coordinate 
Reference System subtype CompoundCRS XML element, with its contained elements, 
applied to a 3D compound coordinate reference system that combines a Projected and a 
Vertical CRS. Note that this Compound CRS Definition contains three other CRS 
definitions, for a Vertical CRS, a Geographic 2D CRS, and a Projected CRS. 


<?xml version="1.0" encoding="UTF-8"?> 
<CompoundCRS xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xsi:schemaLocation="http://www.opengis.net/gml 
gml/3.1.1/base/coordinateReferenceSystems.xsd" gml:id="EPSG7405"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26 --> 
 <srsName>OSGB36 /British National Grid + ODN</srsName> 
 <srsID> 
  <name codeSpace="urn:ogc:def:crs:EPSG:6.3:">7405</name> 
 </srsID> 
 <validArea> 
  <description>United Kingdom (UK) - Great Britain - England 
Scotland Wales - onshore; Isle of Man. </description> 
 </validArea> 
 <includesCRS> 
  <ProjectedCRS gml:id="EPSG27700"> 


36 © Open Geospatial Consortium (2005)
 







OGC 05-011 


   <srsName>OSGB 1936 / British National Grid</srsName> 
   <srsID> 
    <name codeSpace="urn:ogc:def:crs:EPSG:6.3:">27700</name> 
   </srsID> 
   <validArea> 
    <description>United Kingdom (UK) - Great Britain - England 
Scotland Wales - onshore; Isle of Man. </description> 
   </validArea> 
   <baseCRS> 
    <GeographicCRS gml:id="EPSG4277"> 
     <srsName>OSGB 1936</srsName> 
     <srsID> 
      <name 
codeSpace="urn:ogc:def:crs:EPSG:6.3:">4277</name> 
     </srsID> 
     <validArea> 
      <description>United Kingdom (UK) - Great Britain - 
England Scotland Wales - onshore; Isle of Man. </description> 
     </validArea> 
     <usesEllipsoidalCS> 
      <EllipsoidalCS gml:id="EPSG6402"> 
       <csName>ellipsoidal</csName> 
       <csID> 
        <name 
codeSpace="urn:ogc:def:cs:EPSG:6.3:">6402</name> 
       </csID> 
       <usesAxis> 
        <CoordinateSystemAxis gml:id="EPSG9901" 
gml:uom="urn:ogc:def:uom:OGC:1.0:degree"> 
         <name>Geodetic latitude in north direction 
with degree units</name> 
         <axisID> 
          <name 
codeSpace="urn:ogc:def:axis:EPSG:6.3:">9901</name> 
         </axisID> 
         <axisAbbrev>Lat</axisAbbrev> 
         <axisDirection>north</axisDirection> 
        </CoordinateSystemAxis> 
       </usesAxis> 
       <usesAxis> 
        <CoordinateSystemAxis gml:id="EPSG9902" 
gml:uom="urn:ogc:def:uom:OGC:1.0:degree"> 
         <name>Geodetic longitude in east direction 
with degree units</name> 
         <axisID> 
          <name 
codeSpace="urn:ogc:def:axis:EPSG:6.3:">9902</name> 
         </axisID> 
         <axisAbbrev>Lon</axisAbbrev> 
         <axisDirection>east</axisDirection> 
        </CoordinateSystemAxis> 
       </usesAxis> 
      </EllipsoidalCS> 
     </usesEllipsoidalCS> 
     <usesGeodeticDatum> 
      <GeodeticDatum gml:id="EPSG6277"> 
       <datumName>OSGB 1936</datumName> 
       <datumID> 


© Open Geospatial Consortium (2005) 37 
 







OGC 05-011 


        <name 
codeSpace="urn:ogc:def:datum:EPSG:6.3:">6277</name> 
       </datumID> 
       <usesPrimeMeridian> 
        <PrimeMeridian gml:id="EPSG8901"> 
         <meridianName>Greenwich</meridianName> 
         <meridianID> 
          <name 
codeSpace="urn:ogc:def:meridian:EPSG:6.3:">8901</name> 
         </meridianID> 
         <greenwichLongitude> 
          <angle 
uom="urn:ogc:def:uom:OGC:1.0:degree">0</angle> 
         </greenwichLongitude> 
        </PrimeMeridian> 
       </usesPrimeMeridian> 
       <usesEllipsoid> 
        <Ellipsoid gml:id="EPSG7001"> 
         <ellipsoidName>Airy 1830</ellipsoidName> 
         <ellipsoidID> 
          <name 
codeSpace="urn:ogc:def:ellipsoid:EPSG:6.3:">7001</name> 
         </ellipsoidID> 
         <semiMajorAxis 
uom="urn:ogc:def:uom:OGC:1.0:metre">6377563.396</semiMajorAxis> 
         <secondDefiningParameter> 
          <inverseFlattening 
uom="urn:ogc:def:uom:OGC:1.0:unity">299.3249646</inverseFlattening> 
         </secondDefiningParameter> 
        </Ellipsoid> 
       </usesEllipsoid> 
      </GeodeticDatum> 
     </usesGeodeticDatum> 
    </GeographicCRS> 
   </baseCRS> 
   <definedByConversion> 
    <Conversion gml:id="EPSG19916"> 
     <coordinateOperationName>Transverse 
Mercator</coordinateOperationName> 
     <coordinateOperationID> 
      <name 
codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name> 
     </coordinateOperationID> 
     <usesMethod> 
      <OperationMethod gml:id="EPSG9807"> 
       <methodName>Transverse Mercator</methodName> 
       <methodID> 
        <name 
codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name> 
       </methodID> 
       <methodFormula>See Section 1.4.6 "Transverse 
Mercator" of EPSG Guidance Note 7, December 2000. </methodFormula> 
       <sourceDimensions>2</sourceDimensions> 
       <targetDimensions>2</targetDimensions> 
       <usesParameter> 
        <OperationParameter gml:id="EPSG8801"> 


38 © Open Geospatial Consortium (2005)
 







OGC 05-011 


         <parameterName>Latitude of natural 
origin</parameterName> 
         <parameterID> 
          <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name> 
         </parameterID> 
        </OperationParameter> 
       </usesParameter> 
       <usesParameter> 
        <OperationParameter gml:id="EPSG8802"> 
         <parameterName>Longitude of natural 
origin</parameterName> 
         <parameterID> 
          <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name> 
         </parameterID> 
        </OperationParameter> 
       </usesParameter> 
       <usesParameter> 
        <OperationParameter gml:id="EPSG8805"> 
         <parameterName>Scale factor at natural 
origin</parameterName> 
         <parameterID> 
          <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name> 
         </parameterID> 
        </OperationParameter> 
       </usesParameter> 
       <usesParameter> 
        <OperationParameter gml:id="EPSG8806"> 
         <parameterName>False Easting</parameterName> 
         <parameterID> 
          <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name> 
         </parameterID> 
        </OperationParameter> 
       </usesParameter> 
       <usesParameter> 
        <OperationParameter gml:id="EPSG8807"> 
         <parameterName>False 
Northing</parameterName> 
         <parameterID> 
 
          <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name> 
         </parameterID> 
        </OperationParameter> 
       </usesParameter> 
      </OperationMethod> 
     </usesMethod> 
     <usesValue> 
      <value 
uom="urn:ogc:def:uom:OGC:1.0:degree">49</value> 
      <valueOfParameter xlink:href="#EPSG8801" 
xlink:title="Latitude of natural origin"/> 
     </usesValue> 
     <usesValue> 


© Open Geospatial Consortium (2005) 39 
 







OGC 05-011 


      <value uom="urn:ogc:def:uom:OGC:1.0:degree">-
2</value> 
      <valueOfParameter xlink:href="#EPSG8802" 
xlink:title="Longitude of natural origin"/> 
     </usesValue> 
     <usesValue> 
      <value 
uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value> 
      <valueOfParameter xlink:href="#EPSG8805" 
xlink:title="Scale factor at natural origin"/> 
     </usesValue> 
     <usesValue> 
      <value 
uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value> 
      <valueOfParameter xlink:href="#EPSG8806" 
xlink:title="False Easting"/> 
     </usesValue> 
     <usesValue> 
      <value uom="urn:ogc:def:uom:OGC:1.0:metre">-
100000</value> 
      <valueOfParameter xlink:href="#EPSG8807" 
xlink:title="False Northing"/> 
     </usesValue> 
    </Conversion> 
   </definedByConversion> 
   <usesCartesianCS> 
    <CartesianCS gml:id="EPSG4400"> 
     <csName>Easting and Northing in metres</csName> 
     <csID> 
      <name 
codeSpace="urn:ogc:def:cs:EPSG:6.3:">4400</name> 
     </csID> 
     <usesAxis> 
      <CoordinateSystemAxis gml:id="EPSG9906" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
       <name>Easting in east direction with metre 
units</name> 
       <axisID> 
        <name 
codeSpace="urn:ogc:def:axis:EPSG:6.3:">9906</name> 
       </axisID> 
       <axisAbbrev>E</axisAbbrev> 
       <axisDirection>east</axisDirection> 
      </CoordinateSystemAxis> 
     </usesAxis> 
     <usesAxis> 
      <CoordinateSystemAxis gml:id="EPSG9907" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
       <name>Northing in north direction with metre 
units</name> 
       <axisID> 
        <name 
codeSpace="urn:ogc:def:axis:EPSG:6.3:">9907</name> 
       </axisID> 
       <axisAbbrev>N</axisAbbrev> 
       <axisDirection>north</axisDirection> 
      </CoordinateSystemAxis> 


40 © Open Geospatial Consortium (2005)
 







OGC 05-011 


     </usesAxis> 
    </CartesianCS> 
   </usesCartesianCS> 
  </ProjectedCRS> 
 </includesCRS> 
 <includesCRS> 
  <VerticalCRS gml:id="EPSG5701"> 
   <srsName>Newlyn</srsName> 
   <srsID> 
    <name codeSpace="urn:ogc:def:crs:EPSG:6.3:">5701</name> 
   </srsID> 
   <usesVerticalCS> 
    <VerticalCS gml:id="EPSG6499"> 
     <csName>Gravity-related height up in metres</csName> 
     <csID> 
      <name 
codeSpace="urn:ogc:def:cs:EPSG:6.3:">6499</name> 
     </csID> 
     <usesAxis> 
      <CoordinateSystemAxis gml:id="EPSG9904" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
       <name>Gravity-related height in up direction with 
metre units</name> 
       <axisID> 
        <name 
codeSpace="urn:ogc:def:axis:EPSG:6.3:">9904</name> 
       </axisID> 
       <axisAbbrev>H</axisAbbrev> 
       <axisDirection>up</axisDirection> 
      </CoordinateSystemAxis> 
     </usesAxis> 
    </VerticalCS> 
   </usesVerticalCS> 
   <usesVerticalDatum> 
    <VerticalDatum gml:id="EPSG5101"> 
     <datumName>Ordnance Datum Newlyn</datumName> 
     <datumID> 
      <name 
codeSpace="urn:ogc:def:datum:EPSG:6.3:">5101</name> 
     </datumID> 
     <verticalDatumType codeSpace=" 
urn:ogc:def:verticalDatumType:OGC:1.0:">geoidal</verticalDatumType> 
    </VerticalDatum> 
   </usesVerticalDatum> 
  </VerticalCRS> 
 </includesCRS> 
</CompoundCRS> 
 


C.3 Simplified example XML for conversion 


The coordinate Conversion example in Subclause 6.4.2 contains most details within the 
usesMethod element. If the details of that Transverse Mercator operation method are 
sufficiently available elsewhere, a much shorter example XML document can be used: 


<?xml version="1.0" encoding="UTF-8"?> 


© Open Geospatial Consortium (2005) 41 
 







OGC 05-011 


<Conversion xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xsi:schemaLocation="http://www.opengis.net/gml 
gml/3.1.1/base/coordinateOperations.xsd" gml:id="EPSG19916"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26--> 
 <!-- SourceCRS: EPSG:4277 OSGB 1936 --> 
 <!-- TargetCRS: EPSG:27700 OSGB 1936 / British National Grid --> 
 <coordinateOperationName>Transverse 
Mercator</coordinateOperationName> 
 <coordinateOperationID> 
  <name 
codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name> 
  <version>6.0</version> 
 </coordinateOperationID> 
 <usesMethod xlink:href="urn:ogc:def:method:EPSG:6.3:9807" 
xlink:title="Transverse Mercator"/> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:degree">49</value> 
  <valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8801" xlink:title="Latitude 
of natural origin"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:degree">-2</value> 
  <valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8802" xlink:title="Longitude 
of natural origin"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value> 
  <valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8805" xlink:title="Scale 
factor at natural origin"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value> 
  <valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8806" xlink:title="False 
Easting"/> 
 </usesValue> 
 <usesValue> 
  <value uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</value> 
  <valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8807" xlink:title="False 
Northing"/> 
 </usesValue> 
</Conversion> 
 
This example assumes that information for the Transverse Mercator OperationMethod is 
available elsewhere. Example XML for this method is given in the following subclause. 


42 © Open Geospatial Consortium (2005)
 







OGC 05-011 


C.4 Example XML for operation method 


This subclause provides an example XML document using the OperationMethod 
element, with data for the Transverse Mercator conversion method. 


<?xml version="1.0" encoding="UTF-8"?> 
<OperationMethod xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xsi:schemaLocation="http://www.opengis.net/gml 
gml/3.1.1/base/coordinateOperations.xsd" gml:id="EPSG9807"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26 --> 
 <methodName>Transverse Mercator</methodName> 
 <methodID> 
  <name codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name> 
  <version>6.0</version> 
 </methodID> 
 <methodFormula>See Section 1.4.6 "Transverse Mercator" of EPSG 
Guidance Note 7, December 2000. </methodFormula> 
 <sourceDimensions>2</sourceDimensions> 
 <targetDimensions>2</targetDimensions> 
 <usesParameter> 
  <OperationParameter gml:id="EPSG8801"> 
   <parameterName>Latitude of natural origin</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name> 
   </parameterID> 
  </OperationParameter> 
 </usesParameter> 
 <usesParameter> 
  <OperationParameter gml:id="EPSG8802"> 
   <parameterName>Longitude of natural origin</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name> 
   </parameterID> 
  </OperationParameter> 
 </usesParameter> 
 <usesParameter> 
  <OperationParameter gml:id="EPSG8805"> 
   <parameterName>Scale factor at natural origin</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name> 
   </parameterID> 
  </OperationParameter> 
 </usesParameter> 
 <usesParameter> 
  <OperationParameter gml:id="EPSG8806"> 
   <parameterName>False Easting</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name> 
   </parameterID> 
  </OperationParameter> 


© Open Geospatial Consortium (2005) 43 
 







OGC 05-011 


 </usesParameter> 
 <usesParameter> 
  <OperationParameter gml:id="EPSG8807"> 
   <parameterName>False Northing</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name> 
   </parameterID> 
 
  </OperationParameter> 
 </usesParameter> 
</OperationMethod> 
 


C.5 Example XML for CRS dictionary 


This subclause provides an example XML document using the Dictionary element from 
the dictionary.xsd schema of GML 3.1, with its’ contained elements, applied to the 
example CompoundCRS used in Subclause C.2 with all of its components separated in 
the dictionary. 


<?xml version="1.0" encoding="UTF-8"?> 
<Dictionary xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xsi:schemaLocation="http://www.opengis.net/gml 
gml/3.1.1/base/coordinateReferenceSystems.xsd" gml:id="CrsDictionary"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26--> 
 <description>Example GML Dictionary of some coordinate reference 
systems and components. </description> 
 <name>CRS Dictionary</name> 
 <dictionaryEntry> 
  <CompoundCRS gml:id="EPSG7405"> 
   <srsName>OSGB36 /British National Grid + ODN</srsName> 
   <srsID> 
    <name codeSpace="urn:ogc:def:crs:EPSG:6.3:">7405</name> 
   </srsID> 
   <validArea> 
    <description>United Kingdom (UK) - Great Britain - England 
Scotland Wales - onshore; Isle of Man. </description> 
   </validArea> 
   <includesCRS xlink:href="#EPSG27700" xlink:title="OSGB 1936 / 
British National Grid"/> 
   <includesCRS xlink:href="#EPSG5701" xlink:title="Newlyn"/> 
  </CompoundCRS> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <ProjectedCRS gml:id="EPSG27700"> 
   <srsName>OSGB 1936 / British National Grid</srsName> 
   <srsID> 
    <name codeSpace="urn:ogc:def:crs:EPSG:6.3:">27700</name> 
   </srsID> 
   <validArea> 
    <description>United Kingdom (UK) - Great Britain - England 
Scotland Wales - onshore; Isle of Man. </description> 


44 © Open Geospatial Consortium (2005)
 







OGC 05-011 


   </validArea> 
   <baseCRS xlink:href="#EPSG4277" xlink:title="OSGB 1936"/> 
   <definedByConversion xlink:href="#EPSG19916" 
xlink:title="Transverse Mercator"/> 
   <usesCartesianCS xlink:href="#EPSG4400" 
xlink:title="Cartesian"/> 
  </ProjectedCRS> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <GeographicCRS gml:id="EPSG4277"> 
   <srsName>OSGB 1936</srsName> 
   <srsID> 
    <name codeSpace="urn:ogc:def:crs:EPSG:6.3:">4277</name> 
   </srsID> 
   <validArea> 
    <description>United Kingdom (UK) - Great Britain - England 
Scotland Wales - onshore; Isle of Man. </description> 
   </validArea> 
   <usesEllipsoidalCS xlink:href="#EPSG6402" 
xlink:title="ellipsoidal"/> 
   <usesGeodeticDatum xlink:href="#EPSG6277" xlink:title="OSGB 
1936"/> 
  </GeographicCRS> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <EllipsoidalCS gml:id="EPSG6402"> 
   <csName>ellipsoidal</csName> 
   <csID> 
    <name codeSpace="urn:ogc:def:cs:EPSG:6.3:">6402</name> 
   </csID> 
   <usesAxis xlink:href="#EPSG9901northDegreeEPSG9901" 
xlink:title="Geodetic latitude in north direction with degree 
unitsGeodetic latitude"/> 
   <usesAxis xlink:href="#EPSG9902eastDegreeEPSG9902" 
xlink:title="Geodetic longitude in east direction with degree 
unitsGeodetic longitude"/> 
  </EllipsoidalCS> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <CoordinateSystemAxis gml:id="EPSG9901" 
gml:uom="urn:ogc:def:uom:OGC:1.0:degree"> 
   <name>Geodetic latitude in north direction with degree 
units</name> 
   <axisID> 
    <name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9901</name> 
   </axisID> 
   <axisAbbrev>Lat</axisAbbrev> 
   <axisDirection>north</axisDirection> 
  </CoordinateSystemAxis> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <CoordinateSystemAxis gml:id="EPSG9902" 
gml:uom="urn:ogc:def:uom:OGC:1.0:degree"> 
   <name>Geodetic longitude in east direction with degree 
units</name> 
   <axisID> 
    <name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9902</name> 
   </axisID> 


© Open Geospatial Consortium (2005) 45 
 







OGC 05-011 


   <axisAbbrev>Lon</axisAbbrev> 
   <axisDirection>east</axisDirection> 
  </CoordinateSystemAxis> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <GeodeticDatum gml:id="EPSG6277"> 
   <datumName>OSGB 1936</datumName> 
   <datumID> 
    <name codeSpace="urn:ogc:def:datum:EPSG:6.3:">6277</name> 
   </datumID> 
   <usesPrimeMeridian xlink:href="#EPSG8901" 
xlink:title="Greenwich"/> 
   <usesEllipsoid xlink:href="#EPSG7001" xlink:title="Airy 
1830"/> 
  </GeodeticDatum> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <PrimeMeridian gml:id="EPSG8901"> 
   <meridianName>Greenwich</meridianName> 
   <meridianID> 
    <name 
codeSpace="urn:ogc:def:meridian:EPSG:6.3:">8901</name> 
   </meridianID> 
   <greenwichLongitude> 
    <angle uom="urn:ogc:def:uom:OGC:1.0:degree">0</angle> 
   </greenwichLongitude> 
  </PrimeMeridian> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <Ellipsoid gml:id="EPSG7001"> 
   <ellipsoidName>Airy 1830</ellipsoidName> 
   <ellipsoidID> 
    <name 
codeSpace="urn:ogc:def:ellipsoid:EPSG:6.3:">7001</name> 
   </ellipsoidID> 
   <semiMajorAxis 
uom="urn:ogc:def:uom:OGC:1.0:metre">6377563.396</semiMajorAxis> 
   <secondDefiningParameter> 
    <inverseFlattening 
uom="urn:ogc:def:uom:OGC:1.0:unity">299.3249646</inverseFlattening> 
   </secondDefiningParameter> 
  </Ellipsoid> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <Conversion gml:id="EPSG19916"> 
   <coordinateOperationName>Transverse 
Mercator</coordinateOperationName> 
   <coordinateOperationID> 
    <name 
codeSpace="urn:ogc:def:coordinateOperation:EPSG:6.3:">19916</name> 
   </coordinateOperationID> 
   <usesMethod xlink:href="#EPSG9807" xlink:title="Transverse 
Mercator"/> 
   <usesValue> 
    <value uom="urn:ogc:def:uom:OGC:1.0:degree">49</value> 
    <valueOfParameter xlink:href="#EPSG8801" 
xlink:title="Latitude of natural origin"/> 


46 © Open Geospatial Consortium (2005)
 







OGC 05-011 


   </usesValue> 
   <usesValue> 
    <value uom="urn:ogc:def:uom:OGC:1.0:degree">-2</value> 
    <valueOfParameter xlink:href="#EPSG8802" 
xlink:title="Longitude of natural origin"/> 
   </usesValue> 
   <usesValue> 
    <value 
uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</value> 
    <valueOfParameter xlink:href="#EPSG8805" xlink:title="Scale 
factor at natural origin"/> 
   </usesValue> 
   <usesValue> 
    <value uom="urn:ogc:def:uom:OGC:1.0:metre">400000</value> 
    <valueOfParameter xlink:href="#EPSG8806" xlink:title="False 
Easting"/> 
   </usesValue> 
   <usesValue> 
    <value uom="urn:ogc:def:uom:OGC:1.0:metre">-100000</value> 
    <valueOfParameter xlink:href="#EPSG8807" xlink:title="False 
Northing"/> 
   </usesValue> 
  </Conversion> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <OperationMethod gml:id="EPSG9807"> 
   <methodName>Transverse Mercator</methodName> 
   <methodID> 
    <name codeSpace="urn:ogc:def:method:EPSG:6.3:">9807</name> 
   </methodID> 
   <methodFormula>See Section 1.4.6 "Transverse Mercator" of EPSG 
Guidance Note 7, December 2000. </methodFormula> 
   <sourceDimensions>2</sourceDimensions> 
   <targetDimensions>2</targetDimensions> 
   <usesParameter xlink:href="#EPSG8801" xlink:title="Latitude of 
natural origin"/> 
   <usesParameter xlink:href="#EPSG8802" xlink:title="Longitude 
of natural origin"/> 
   <usesParameter xlink:href="#EPSG8805" xlink:title="Scale 
factor at natural origin"/> 
   <usesParameter xlink:href="#EPSG8806" xlink:title="False 
Easting"/> 
   <usesParameter xlink:href="#EPSG8807" xlink:title="False 
Northing"/> 
  </OperationMethod> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <OperationParameter gml:id="EPSG8801"> 
   <parameterName>Latitude of natural origin</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8801</name> 
   </parameterID> 
  </OperationParameter> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <OperationParameter gml:id="EPSG8802"> 
   <parameterName>Longitude of natural origin</parameterName> 


© Open Geospatial Consortium (2005) 47 
 







OGC 05-011 


   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8802</name> 
   </parameterID> 
  </OperationParameter> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <OperationParameter gml:id="EPSG8805"> 
   <parameterName>Scale factor at natural origin</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8805</name> 
   </parameterID> 
  </OperationParameter> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <OperationParameter gml:id="EPSG8806"> 
   <parameterName>False Easting</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8806</name> 
   </parameterID> 
  </OperationParameter> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <OperationParameter gml:id="EPSG8807"> 
   <parameterName>False Northing</parameterName> 
   <parameterID> 
    <name 
codeSpace="urn:ogc:def:parameter:EPSG:6.3:">8807</name> 
   </parameterID> 
  </OperationParameter> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <CartesianCS gml:id="EPSG4400"> 
   <csName>Easting and Northing in metres</csName> 
   <csID> 
    <name codeSpace="urn:ogc:def:cs:EPSG:6.3:">4400</name> 
   </csID> 
   <usesAxis xlink:href="#EPSG9906eastMetreEPSG9906" 
xlink:title="Easting in east direction with metre unitsEasting"/> 
   <usesAxis xlink:href="#EPSG9907northMetreEPSG9907" 
xlink:title="Northing in north direction with metre unitsNorthing"/> 
  </CartesianCS> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <CoordinateSystemAxis gml:id="EPSG9906" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
   <name>Easting in east direction with metre units</name> 
   <axisID> 
    <name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9906</name> 
   </axisID> 
   <axisAbbrev>E</axisAbbrev> 
   <axisDirection>east</axisDirection> 
  </CoordinateSystemAxis> 
 </dictionaryEntry> 
 <dictionaryEntry> 


48 © Open Geospatial Consortium (2005)
 







OGC 05-011 


  <CoordinateSystemAxis gml:id="EPSG9907" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
   <name>Northing in north direction with metre units</name> 
   <axisID> 
    <name codeSpace="urn:ogc:def:axis:EPSG:6.3:">9907</name> 
   </axisID> 
   <axisAbbrev>N</axisAbbrev> 
   <axisDirection>north</axisDirection> 
  </CoordinateSystemAxis> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <VerticalCS gml:id="EPSG6499"> 
   <csName>Height up in metres</csName> 
   <csID> 
    <name codeSpace="urn:ogc:def:cs:EPSG:6.0:">6499</name> 
   </csID> 
   <usesAxis xlink:href="urn:ogc:def:axis:EPSG:6.0:9904"/> 
  </VerticalCS> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <CoordinateSystemAxis gml:id="EPSG9904" 
gml:uom="urn:ogc:def:uom:OGC:1.0:metre"> 
   <name>Gravity-related height in up direction with metre 
units</name> 
   <axisID> 
    <name codeSpace="urn:ogc:def:axis:EPSG:6.0:">9904</name> 
   </axisID> 
   <axisAbbrev>H</axisAbbrev> 
   <axisDirection>up</axisDirection> 
  </CoordinateSystemAxis> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <VerticalDatum gml:id="EPSG5101"> 
   <datumName>Ordnance Datum Newlyn</datumName> 
   <datumID> 
    <name codeSpace="urn:ogc:def:datum:EPSG:6.0:">5101</name> 
   </datumID> 
   <verticalDatumType 
codeSpace="urn:ogc:def:verticalDatumType:OGC:1.0:">geoidal</verticalDat
umType> 
  </VerticalDatum> 
 </dictionaryEntry> 
</Dictionary> 
 


C.6 Example XML for units dictionary 


This subclause provides an example XML document using the Dictionary element from 
the dictionary.xsd schema of GML 3, with its contained elements, applied to the units of 
measure used in the preceding XML examples. 


<?xml version="1.0" encoding="UTF-8"?> 
<Dictionary xmlns="http://www.opengis.net/gml" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xsi:schemaLocation="http://www.opengis.net/gml 


© Open Geospatial Consortium (2005) 49 
 







OGC 05-011 


gml/3.1.1/base/coordinateReferenceSystems.xsd" 
gml:id="UnitsDictionary"> 
 <!-- Primary editor: Arliss Whiteside. Last updated 2005-01-26 --> 
 <description>Example GML Dictinary of unit 
definitions.</description> 
 <name>Units Dictionary</name> 
 <dictionaryEntry> 
  <ConventionalUnit gml:id="degree"> 
   <name>degree</name> 
   <name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">9102</name> 
   <name codeSpace="urn:ogc:def:uom:OGC:1.0:">degree</name> 
   <quantityType>angle</quantityType> 
   <conversionToPreferredUnit uom="#radian"> 
    <factor>1.74532925199433E-02</factor> 
   </conversionToPreferredUnit> 
  </ConventionalUnit> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <BaseUnit gml:id="radian"> 
   <name>radian</name> 
   <name codeSpace="urn:ogc:def:uom:OGC:1.0:">radian</name> 
   <quantityType>angle</quantityType> 
   <unitsSystem xlink:href="urn:ogc:ToBeSupplied"/> 
  </BaseUnit> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <BaseUnit gml:id="metre"> 
   <name>metre</name> 
   <name codeSpace="urn:ogc:def:parameter:EPSG:6.3:">9001</name> 
   <name codeSpace="urn:ogc:def:uom:OGC:1.0:">metre</name> 
   <quantityType>length</quantityType> 
   <unitsSystem xlink:href="urn:ogc:SI"/> 
  </BaseUnit> 
 </dictionaryEntry> 
 <dictionaryEntry> 
  <BaseUnit gml:id="unity"> 
   <name>unity</name> 
   <name codeSpace="urn:ogc:def:uom:EPSG:6.3:">8805</name> 
   <name codeSpace="urn:ogc:def:uom:OGC:1.0:">unity</name> 
   <quantityType>scale factor</quantityType> 
   <unitsSystem xlink:href="urn:ogc:ToBeSupplied"/> 
  </BaseUnit> 
 </dictionaryEntry> 
</Dictionary> 
 


50 © Open Geospatial Consortium (2005)
 







OGC 05-011 


Annex D 
(informative) 


 
Application schema example 


D.1 Introduction 


This annex provides an example Application Schema based on the CRS Schemas in 
GML 3.1.1. This example includes a corresponding example XML document using that 
Application Schema plus the example UML model from which that Application Schemas 
was converted. For more information on Application Schemas, see Subclauses B.3 and 
B.4 of this document. 


These XML examples use URNs to reference known objects by "xlink:href" and 
"gml:uom" XML attributes, based on “URNs of definitions in ogc namespace” [OGC 05-
010]. 


D.2 Transverse Mercator conversion 


D.2.1 Introduction 


Standardized XML encoding is desirable for a number of commonly-used types of 
coordinate conversions and transformations. This subclause provides an example of one 
such encoding, applied to one commonly-used conversion type, namely the Transverse 
Mercator map projection. The following subclauses contain: 


a) A draft class diagram of a UML package for the Transverse Mercator type of map 
projection, which builds on the UML model in OGC Abstract Specification Topic 2. 


b) A draft XML Schema for encoding a Transverse Mercator projection, produced by 
converting this UML package. 


c) Two example XML documents based on this draft XML Schema for encoding an 
example Transverse Mercator map projection 


D.2.2 UML package 


Figure D.1 is a draft class diagram of a UML package for Transverse Mercator map 
projections. This class diagram is incomplete in that many of the needed association role 
names and multiplicities are not shown due to lack of space. This UML package builds 
on the UML model in OGC Abstract Specification Topic 2 [04-046r3]. 


© Open Geospatial Consortium (2005) 51 
 







OGC 05-011 


CC_Conversion
(from CC_CoordinateOperation)


CC_OperationParameter
(from CC_CoordinateOperation)


CC_GeneralOperationParamet
er


(from CC_CoordinateOperation)


<<Abstract>>


LongitudeOfNaturalOriginValue
+ angleValue : Angle


FalseEastingValue
+ lengthValue : Length


FalseNorthingValue
+ lengthValue : Length


LatitudeOfNaturalOriginValue
+ angleValue : Angle


1


0..n


+valueOfParameter


1


0..n


ScaleFatorAtNaturalOriginValue
+ scaleValue : Scale


1


0..n


+valueOfParameter


1


0..n


CC_OperationMethod
(from CC_CoordinateOperation)


0..n


0..n


0..n


+usesParameter 0..n


TransverseMercatorConversion


1


0..*


+usesMethod


1


CC_ParameterValue
(from CC_CoordinateOperation)


<<Union>>
0..*


 


Figure D.1 — UML package for Transverse Mercator projection 


52 © Open Geospatial Consortium (2005) 
 







OGC 05-011 


D.2.3 Application schema 


This subclause contains an example XML Schema for encoding a Transverse Mercator 
projection, produced by converting the above UML package. This XML Schema builds 
on the coordinateOperations.xsd GML Schema. This draft Application Schema is written 
following the same GML 3 patterns and ISO 19118 XML encoding rules as used in the 
CRS Schemas in GML 3.1.1. As required, this draft Application Schema is written in a 
different namespace. Of course, it could be rewritten as an additional XML Schema in the 
GML namespace, and would be similar. 


EDITORS NOTE:  In this draft XML Schema, I included documentation element text based on my limited 
understanding of the Transverse Mercator map projection. I urge John Bobbitt, Roel Nicolai, and others to 
suggest improvements in the wording of these documentation elements. 


This draft Application Schema is: 


<?xml version="1.0" encoding="UTF-8"?> 
<schema xmlns="http://www.w3.org/2001/XMLSchema" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:ex="http://www.opengis.net/examples" 
targetNamespace="http://www.opengis.net/examples" 
elementFormDefault="qualified" xml:lang="en"> 
 <annotation> 
  <documentation> 
   <name>transverseMercator.xsd</name> 
   <scope>How to encode definition of specific Transverse 
Mercator conversion. </scope> 
   <description>Example Application Schema to encode the data 
needed to define a specific Transverse Mercator type of map projection, 
which is a coordinate conversion. Builds on coordinateOperations.xsd, 
and follows same GML 3 patterns and ISO 19118 encoding. Written in the 
"ex" namespace. Primary editor: Arliss Whiteside. Last updated 2005-01-
28</description> 
   <reference>Guidance Note Number 7 "Coordinate Conversions and 
Transformations including Formulas" (available through 
http://www.epsg.org/), especially Section 1.4.6 "Transverse Mercator". 
</reference> 
   <copyright>Copyright (c) Open Geospatial Consortium (2005) 
</copyright> 
   <conformance>This schema encodes a draft Transverse Mercator 
package that builds on the Coordinate Operation (CC_) package of the 
extended UML Model for OGC Abstract Specification Topic 2: Spatial 
Referencing by Coordinates. That draft package defines restricted 
subtypes of the CC_Conversion and CC_ParameterValue classes as needed 
for the Transverse Mercator map projection conversion. </conformance> 
  </documentation> 
 </annotation> 
 <!-- ====================================================== 
       includes and imports 
 ====================================================== --> 
 <import namespace="http://www.opengis.net/gml" 
schemaLocation="../gml/3.1.1/base/coordinateOperations.xsd"/> 
 <import namespace="http://www.w3.org/1999/xlink" 
schemaLocation="../gml/3.1.1/xlink/xlinks.xsd"/> 


© Open Geospatial Consortium (2005) 53 
 







OGC 05-011 


 <!-- ====================================================== 
       elements and types 
 ====================================================== --> 
 <element name="TransverseMercatorConversion" 
type="ex:TransverseMercatorConversionType" 
substitutionGroup="gml:_GeneralConversion"/> 
 <!-- =================================================== --> 
 <complexType name="TransverseMercatorConversionType"> 
  <annotation> 
   <documentation>Specific Transverse Mercator map projection. 
Uses the AbstractGeneralConversionType with restricted values for 
included elements, including elements in the coordinateOperationID 
element with the IdentifierType. If appropriate, the "codeSpace" 
element should have the string value "EPSG", and the "code" element 
should then have the appropriate EPSG code value. The other elements in 
the IdentifierType can be omitted. The "coordinateOperationName" 
element shall have a string value that names a specific Transverse 
Mercator map projection. The "_PositionalAccuracy" and 
"metaDataProperty" elements can be omitted. </documentation> 
  </annotation> 
  <complexContent> 
   <extension base="gml:AbstractGeneralConversionType"> 
    <sequence> 
     <element ref="ex:usesTransverseMercatorMethod"/> 
     <element ref="ex:usesLatitudeOfNaturalOriginValue"/> 
     <element ref="ex:usesLongitudeOfNaturalOriginValue"/> 
     <element ref="ex:usesScaleFactorAtNaturalOriginValue"/> 
     <element ref="ex:usesFalseEastingValue"/> 
     <element ref="ex:usesFalseNorthingValue"/> 
    </sequence> 
   </extension> 
  </complexContent> 
 </complexType> 
 <!-- =================================================== --> 
 <!-- =================================================== --> 
 <element name="usesTransverseMercatorMethod"> 
  <annotation> 
   <documentation>Reference to Transverse Mercator operation 
method. </documentation> 
  </annotation> 
  <complexType> 
   <sequence/> 
   <attribute ref="xlink:href" use="required" 
fixed="urn:ogc:def:method:EPSG:6.3:9807"/> 
  </complexType> 
 </element> 
 <!-- =================================================== --> 
 <element name="usesLatitudeOfNaturalOriginValue" 
type="ex:AngleValueType" 
substitutionGroup="gml:_generalParameterValue"> 
  <annotation> 
   <documentation>Value of the Latitude of the natural origin 
parameter for a specific coordinate conversion. </documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 


54 © Open Geospatial Consortium (2005)
 







OGC 05-011 


 <element name="usesLongitudeOfNaturalOriginValue" 
type="ex:AngleValueType" 
substitutionGroup="gml:_generalParameterValue"> 
  <annotation> 
   <documentation>Value of the Longitude of the natural origin 
(or central meridian) parameter for a specific coordinate conversion. 
</documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 
 <element name="usesScaleFactorAtNaturalOriginValue" 
type="ex:ScaleValueType" 
substitutionGroup="gml:_generalParameterValue"> 
  <annotation> 
   <documentation>Value of the scale factor at the natural origin 
(on the central meridian) parameter for a specific coordinate 
conversion. </documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 
 <element name="usesFalseEastingValue" type="ex:LengthValueType" 
substitutionGroup="gml:_generalParameterValue"> 
  <annotation> 
   <documentation>Value of the false Easting coordinate of the 
origin parameter for a specific coordinate conversion. </documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 
 <element name="usesFalseNorthingValue" type="ex:LengthValueType" 
substitutionGroup="gml:_generalParameterValue"> 
  <annotation> 
   <documentation>Value of the false Northing coordinate of the 
origin parameter for a specific coordinate conversion. </documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 
 <!-- =================================================== --> 
 <complexType name="AngleValueType"> 
  <annotation> 
   <documentation>Angle measure operation parameter value. 
</documentation> 
  </annotation> 
  <complexContent> 
   <extension base="gml:AbstractGeneralParameterValueType"> 
    <sequence> 
     <choice> 
      <element ref="ex:angleValue"/> 
      <element ref="gml:dmsAngleValue"/> 
     </choice> 
     <element ref="gml:valueOfParameter"/> 
    </sequence> 
   </extension> 
  </complexContent> 
 </complexType> 
 <!-- =================================================== --> 
 <complexType name="ScaleValueType"> 
  <annotation> 


© Open Geospatial Consortium (2005) 55 
 







OGC 05-011 


   <documentation>Scale measure operation parameter value. 
</documentation> 
  </annotation> 
  <complexContent> 
   <extension base="gml:AbstractGeneralParameterValueType"> 
    <sequence> 
     <element ref="ex:scaleValue"/> 
     <element ref="gml:valueOfParameter"/> 
    </sequence> 
   </extension> 
  </complexContent> 
 </complexType> 
 <!-- =================================================== --> 
 <complexType name="LengthValueType"> 
  <annotation> 
   <documentation>Length measure operation parameter value. 
</documentation> 
  </annotation> 
  <complexContent> 
   <extension base="gml:AbstractGeneralParameterValueType"> 
    <sequence> 
     <element ref="ex:lengthValue"/> 
     <element ref="gml:valueOfParameter"/> 
    </sequence> 
   </extension> 
  </complexContent> 
 </complexType> 
 <!-- =================================================== --> 
 <!-- =================================================== --> 
 <element name="angleValue" type="gml:AngleType" 
substitutionGroup="gml:value"> 
  <annotation> 
   <documentation>Angle value of an operation parameter, recorded 
as a single number, with a unit of measure suitable for an angle, such 
as degrees or radians. </documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 
 <element name="scaleValue" type="gml:ScaleType" 
substitutionGroup="gml:value"> 
  <annotation> 
   <documentation>Scale factor value of an operation parameter, 
with a unit of measure suitable for a scale factor, such as percent, 
permil, or parts-per-million. </documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 
 <element name="lengthValue" type="gml:LengthType" 
substitutionGroup="gml:value"> 
  <annotation> 
   <documentation>Length value of an operation parameter, with a 
unit of measure suitable for a length, such as metres or feet. 
</documentation> 
  </annotation> 
 </element> 
 <!-- =================================================== --> 
</schema> 


56 © Open Geospatial Consortium (2005)
 







OGC 05-011 


  


D.2.4 Example XML document 


An example XML document based on this example XML Schema for encoding an 
example Transverse Mercator map projection is: 


<?xml version="1.0" encoding="UTF-8"?> 
<TransverseMercatorConversion xmlns="http://www.opengis.net/examples" 
xmlns:gml="http://www.opengis.net/gml" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.opengis.net/examples 
transverseMercator.xsd" gml:id="EPSG19916"> 
 <!-- Example XML document. Primary editor: Arliss Whiteside. Last 
updated 2005-01-28--> 
 <!-- SourceCRS: EPSG:4277 OSGB 1936 --> 
 <!-- TargetCRS: EPSG:27700 OSGB 1936 / British National Grid --> 
 <gml:coordinateOperationName>Transverse 
Mercator</gml:coordinateOperationName> 
 <gml:validArea> 
  <gml:description>United Kingdom (UK) - Great Britain - England 
Scotland Wales - onshore; Isle of Man. </gml:description> 
 </gml:validArea> 
 <usesTransverseMercatorMethod 
xlink:href="urn:ogc:def:method:EPSG:6.3:9807"/> 
 <usesLatitudeOfNaturalOriginValue> 
  <angleValue uom="urn:ogc:def:uom:degree">49</angleValue> 
  <gml:valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8801"/> 
 </usesLatitudeOfNaturalOriginValue> 
 <usesLongitudeOfNaturalOriginValue> 
  <angleValue uom="urn:ogc:def:uom:OGC:1.0:degree">-2</angleValue> 
  <gml:valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8802"/> 
 </usesLongitudeOfNaturalOriginValue> 
 <usesScaleFactorAtNaturalOriginValue> 
  <scaleValue 
uom="urn:ogc:def:uom:OGC:1.0:unity">0.999601272</scaleValue> 
  <gml:valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8805"/> 
 </usesScaleFactorAtNaturalOriginValue> 
 <usesFalseEastingValue> 
  <lengthValue 
uom="urn:ogc:def:uom:OGC:1.0:metre">400000</lengthValue> 
  <gml:valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8806"/> 
 </usesFalseEastingValue> 
 <usesFalseNorthingValue> 
  <lengthValue uom="urn:ogc:def:uom:OGC:1.0:metre">-
100000</lengthValue> 
  <gml:valueOfParameter 
xlink:href="urn:ogc:def:parameter:EPSG:6.3:8807"/> 
 </usesFalseNorthingValue> 
</TransverseMercatorConversion> 


© Open Geospatial Consortium (2005) 57 
 







OGC 05-011 


Annex E 
(informative) 


 
Coordinate operation methods 


E.1 Introduction 


This annex contains brief descriptions of some conversion and transformation operation 
methods. It references the methods defined in the EPSG v 6.3 database, and lists some 
methods applicable to the transformation of coordinates. 


Each operation method should uniquely specify the algorithm to be used for a coordinate 
transformation. This specification may comprise two algorithms, forward and inverse, as 
is sometimes used for map projection algorithms. Each conversion and transformation, 
and each operation method, should use a well-known data set in referencing such 
algorithms. 


NOTE  Of course, referencing a well-known algorithm does not imply that software which implements 
these algorithms has correctly implemented it, or has implemented all referenced algorithms. Similarly, 
referencing a well-known set of parameter values does not imply that software which implements these 
values uses the correct values. 


E.2 EPSG defined operation methods 


The well-known database from EPSG (version 6.3) specifies a number of operation 
methods. Please note that the EPSG data set is neither prescriptive, nor exhaustive. This 
document mentions a small subset of the methods in the EPSG data set. Methods not 
listed in this document, but listed in the EPSG data set, can easily be implemented using 
the OperationMethod and OperationParameter elements, making use of the method name 
and parameter names specified in the EPSG data set. 


These operation methods are defined making use of well-defined operation parameters. 
When a coordinate operation is specified referencing an EPSG defined operation method, 
the detailed specification in an XML document should adhere to the EPSG definitions of 
the operation parameters. 


The detailed definition of these operation method algorithms, with their formulas and a 
worked example is included in the EPSG data set, available on the Web, through the 
reflector: http://www.epsg.org/. 


These and other information on coordinate operation methods is available on: 
http://www.remotesensing.org/geotiff/proj_list/. See also 
http://www.posc.org/Epicentre.2_2/DataModel/ExamplesofUsage/eu_cs.html.


58 © Open Geospatial Consortium (2005)
 



http://www.epsg.org/

http://www.remotesensing.org/geotiff/proj_list/

http://www.posc.org/Epicentre.2_2/DataModel/ExamplesofUsage/eu_cs.html.





OGC 05-011 


E.3. Other operation methods  


E.3.1 Introduction 


The following operation methods are not specified in any well-known data set but are 
implied in the specification of Coordinate Systems and Coordinate Reference Systems. 


a) Polar / Cartesian (2D) conversion 
b) Spherical / Cartesian (3D) conversion 
c) Cylindrical / Cartesian conversion 
d) Geographic3D to Geographic2D/GravityRelatedHeight conversion 


E.3.2 Polar / Cartesian (2D) conversion 


This method converts two-dimensional polar coordinates to plane Cartesian coordinates 
and vice versa (the inverse algorithm is implied in this transformation method). 


E.3.3 Spherical / Cartesian (3D) conversion  


This method converts spherical coordinates (sometimes referred to as polar 3D 
coordinates) to 3D Cartesian coordinates and vice versa (the inverse algorithm is again 
implied in this transformation method). Please bear in mind that when the spherical 
coordinate system is used in a local context (e.g.., in an EngineeringCRS); the converted 
Cartesian coordinate system can only be used in the same context: there is no datum 
change involved. Transformation to a Geocentric Cartesian system is possible only when 
the spherical coordinate system is also geocentric.  


E.3.4 Cylindrical / Cartesian conversion 


This method converts (3D) cylindrical coordinates to 3D Cartesian coordinates and vice 
versa. The area of use of the cylindrical coordinate system is unlikely to be other than 
local. The Cartesian coordinate system will therefore also be associated with an 
EngineeringCRS. A further (or indeed a one-step) transformation to a Geocentric system 
will be incorrect, although it may seem mathematically correct. 


© Open Geospatial Consortium (2005) 59 
 







OGC 05-011 


Bibliography 


[1] ISO 19118, Geographic information – Encoding 


[2] Version N1316 of ISO CD 19118: Geographic information - Encoding is 
supplemented by XML Schema documents posted on David Skogan’s web page on 
ISO 19118 encoding: http://www.ifi.uio.no/~davids/encoding. 


[3] OGC 00-045r1, Draft RFC on Image Coordinate Transformations 


[4] OGC 01-009, Implementation Specification: Coordinate Transformation Services 


[5] OGC 03-010r9, Recommended XML encoding of coordinate reference systems and 
coordinate transformations 


[6] OGC 04-071, Some image geometry models 


[7] OGC 05-014, Image CRSs for IH4DS 


 


60 © Open Geospatial Consortium (2005)
 





		Scope

		Conformance

		Normative references

		Terms and definitions

		Conventions

		Symbols (and abbreviated terms)

		UML Notation

		Document terms and definitions



		Common coordinate reference systems

		Introduction

		Geographic CRSs

		Simple UML model

		XML document example

		Full UML model



		Projected CRSs

		Simple UML model

		XML document example

		Full UML model



		Coordinate conversions

		Simple UML model

		XML document example

		Full UML model



		Vertical CRSs

		Simple UML model

		XML document example

		Full UML model



		Compound CRSs

		Simple UML model

		XML document example

		Full UML model





		Supporting information





05-011 Common CRSs Folder/compoundCRS#2.xml
 
	
	 OSGB36 /British National Grid + ODN
	 
		 7405
	
	 
		 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. 
	
	 
		 
			 OSGB 1936 / British National Grid
			 
				 27700
			
			 
				 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. 
			
			 
				 
					 OSGB 1936
					 
						 4277
					
					 
						 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. 
					
					 
						 
							 ellipsoidal
							 
								 6402
							
							 
								 
									 Geodetic latitude in north direction with degree units
									 
										 9901
									
									 Lat
									 north
								
							
							 
								 
									 Geodetic longitude in east direction with degree units
									 
										 9902
									
									 Lon
									 east
								
							
						
					
					 
						 
							 OSGB 1936
							 
								 6277
							
							 
								 
									 Greenwich
									 
										 8901
									
									 
										 0
									
								
							
							 
								 
									 Airy 1830
									 
										 7001
									
									 6377563.396
									 
										 299.3249646
									
								
							
						
					
				
			
			 
				 
					 Transverse Mercator
					 
						 19916
					
					 
						 
							 Transverse Mercator
							 
								 9807
							
							 See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. 
							 2
							 2
							 
								 
									 Latitude of natural origin
									 
										 8801
									
								
							
							 
								 
									 Longitude of natural origin
									 
										 8802
									
								
							
							 
								 
									 Scale factor at natural origin
									 
										 8805
									
								
							
							 
								 
									 False Easting
									 
										 8806
									
								
							
							 
								 
									 False Northing
									 
										 8807
									
								
							
						
					
					 
						 49
						 
					
					 
						 -2
						 
					
					 
						 0.999601272
						 
					
					 
						 400000
						 
					
					 
						 -100000
						 
					
				
			
			 
				 
					 Easting and Northing in metres
					 
						 4400
					
					 
						 
							 Easting in east direction with metre units
							 
								 9906
							
							 E
							 east
						
					
					 
						 
							 Northing in north direction with metre units
							 
								 9907
							
							 N
							 north
						
					
				
			
		
	
	 
		 
			 Newlyn
			 
				 5701
			
			 
				 
					 Gravity-related height up in metres
					 
						 6499
					
					 
						 
							 Gravity-related height in up direction with metre units
							 
								 9904
							
							 H
							 up
						
					
				
			
			 
				 
					 Ordnance Datum Newlyn
					 
						 5101
					
					 geoidal
				
			
		
	




05-011 Common CRSs Folder/crsDictionaryv1.xml
 
	
	 Example GML Dictionary of some coordinate reference systems and components. 
	 CRS Dictionary
	 
		 
			 OSGB36 /British National Grid + ODN
			 
				 7405
			
			 
				 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. 
			
			 
			 
		
	
	 
		 
			 OSGB 1936 / British National Grid
			 
				 27700
			
			 
				 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. 
			
			 
			 
			 
		
	
	 
		 
			 OSGB 1936
			 
				 4277
			
			 
				 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. 
			
			 
			 
		
	
	 
		 
			 ellipsoidal
			 
				 6402
			
			 
			 
		
	
	 
		 
			 Geodetic latitude in north direction with degree units
			 
				 9901
			
			 Lat
			 north
		
	
	 
		 
			 Geodetic longitude in east direction with degree units
			 
				 9902
			
			 Lon
			 east
		
	
	 
		 
			 OSGB 1936
			 
				 6277
			
			 
			 
		
	
	 
		 
			 Greenwich
			 
				 8901
			
			 
				 0
			
		
	
	 
		 
			 Airy 1830
			 
				 7001
			
			 6377563.396
			 
				 299.3249646
			
		
	
	 
		 
			 Transverse Mercator
			 
				 19916
			
			 
			 
				 49
				 
			
			 
				 -2
				 
			
			 
				 0.999601272
				 
			
			 
				 400000
				 
			
			 
				 -100000
				 
			
		
	
	 
		 
			 Transverse Mercator
			 
				 9807
			
			 See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. 
			 2
			 2
			 
			 
			 
			 
			 
		
	
	 
		 
			 Latitude of natural origin
			 
				 8801
			
		
	
	 
		 
			 Longitude of natural origin
			 
				 8802
			
		
	
	 
		 
			 Scale factor at natural origin
			 
				 8805
			
		
	
	 
		 
			 False Easting
			 
				 8806
			
		
	
	 
		 
			 False Northing
			 
				 8807
			
		
	
	 
		 
			 Easting and Northing in metres
			 
				 4400
			
			 
			 
		
	
	 
		 
			 Easting in east direction with metre units
			 
				 9906
			
			 E
			 east
		
	
	 
		 
			 Northing in north direction with metre units
			 
				 9907
			
			 N
			 north
		
	
	 
		 
			 Height up in metres
			 
				 6499
			
			 
		
	
	 
		 
			 Gravity-related height in up direction with metre units
			 
				 9904
			
			 H
			 up
		
	
	 
		 
			 Ordnance Datum Newlyn
			 
				 5101
			
			 geoidal
		
	




05-011 Common CRSs Folder/exampleCompoundCRS.xml
 
	
	 OSGB36 /British National Grid + ODN
	 
		 7405
	
	 
		 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man.

	
	 
	 




05-011 Common CRSs Folder/exampleConversion.xml
 
	
	
	
	 Transverse Mercator
	 
		 19916
	
	 
		 
			 Transverse Mercator
			 
				 9807
			
			 See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. 
			 2
			 2
			 
				 
					 Latitude of natural origin
					 
						 8801
					
				
			
			 
				 
					 Longitude of natural origin
					 
						 8802
					
				
			
			 
				 
					 Scale factor at natural origin
					 
						 8805
					
				
			
			 
				 
					 False Easting
					 
						 8806
					
				
			
			 
				 
					 False Northing
					 
						 8807
					
				
			
		
	
	 
		 49
		 
	
	 
		 -2
		 
	
	 
		 0.999601272
		 
	
	 
		 400000
		 
	
	 
		 -100000
		 
	




05-011 Common CRSs Folder/exampleGeographicCRS.xml
 
	
	 OSGB 1936
	 
		 4277
	
	 
		 
			 ellipsoidal
			 
				 6402
			
			 
				 
					 Geodetic latitude in north direction with degree units
					 
						 9901
					
					 Lat
					 north
				
			
			 
				 
					 Geodetic longitude in east direction with degree units
					 
						 9902
					
					 Lon
					 east
				
			
		
	
	 
		 
			 OSGB 1936
			 
				 6277
			
			 
				 
					 Greenwich
					 
						 8901
					
					 
						 0
					
				
			
			 
				 
					 Airy 1830
					 
						 7001
					
					 6377563.396
					 
						 299.3249646
					
				
			
		
	




05-011 Common CRSs Folder/exampleProjectedCRS.xml
 
	
	 OSGB 1936 / British National Grid
	 
		 27700
	
	 
	 
	 
		 
			 Easting and Northing in metres
			 
				 4400
			
			 
				 
					 Easting in east direction with metre units 
					 
						 9906
					
					 E
					 east
				
			
			 
				 
					 Northing in north direction with metre units 
					 
						 9907
					
					 N
					 north
				
			
		
	




05-011 Common CRSs Folder/exampleVerticalCRS.xml
 
	
	 Newlyn
	 
		 5701
	
	 
		 
			 Height up in metres
			 
				 6499
			
			 
				 
					 Gravity-related height in up direction with metre units
					 
						 9904
					
					 H
					 up
				
			
		
	
	 
		 
			 Ordnance Datum Newlyn
			 
				 5101
			
			 geoidal
		
	




05-011 Common CRSs Folder/fragmentCompoundCRSs.xsd
 
	 
		 
			 fragmentCompoundCRSs.xsd
			 How to encode CompoundCRS definitions. 
			 Primary editor: Arliss Whiteside. Last updated 2004/12/15 
			 Copyright (c) 2004 OGC, All Rights Reserved.
		
	
	
	 
	
	 
		 
			 A coordinate reference system consists of an ordered sequence of coordinate system axes that are related to the earth through a datum. A coordinate reference system is defined by one datum and by one coordinate system. Most coordinate reference system do not move relative to the earth, except for engineering coordinate reference systems defined on moving platforms such as cars, ships, aircraft, and spacecraft. For further information, see OGC Abstract Specification Topic 2.

Coordinate reference systems are commonly divided into sub-types. The common classification criterion for sub-typing of coordinate reference systems is the way in which they deal with earth curvature. This has a direct effect on the portion of the earth's surface that can be covered by that type of CRS with an acceptable degree of error. The exception to the rule is the subtype "Temporal" which has been added by analogy. 
		
	
	
	 
		 
			 Association to a coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A coordinate reference system describing the position of points through two or more independent coordinate reference systems. 
		
		 
			 
				 
					 
						 
							 Ordered sequence of associations to all the component coordinate reference systems included in this compound coordinate reference system. 
						
					
				
			
		
	
	
	 
		 
			 An association to a component coordinate reference system included in this compound coordinate reference system. 
		
	
	




05-011 Common CRSs Folder/fragmentConversions.xsd
 
	 
		 
			 fragmentConversions.xsd
			 How to encode coordinate Conversions. 
			 Primary editor: Arliss Whiteside. Last updated 2004/12/15 
			 Copyright (c) 2004 OGC, All Rights Reserved.
		
	
	
	 
	 
	
	 
	
	 
		 
			 Basic encoding for coordinate operation objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this coordinate operation is identified. 
		
	
	
	 
		 
			 A mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values must be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate operation. The first coordinateOperationID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate operation, including source information. 
						
					
					 
					 
					 
					 
						 
							 Unordered set of estimates of the impact of this coordinate operation on point position accuracy. Gives position error estimates for target coordinates of this coordinate operation, assuming no errors in source coordinates. 
						
					
					 
					 
				
			
		
	
	
	 
		 
			 An identification of a coordinate operation. 
		
	
	
	 
		 
			 Version of the coordinate transformation (i.e., instantiation due to the stochastic nature of the parameters). Mandatory when describing a transformation, and should not be supplied for a conversion. 
		
	
	
	 
		 
			 Association to the source CRS (coordinate reference system) of this coordinate operation. 
		
	
	
	 
		 
			 Association to the target CRS (coordinate reference system) of this coordinate operation. For constraints on multiplicity of "sourceCRS" and "targetCRS", see UML model of Coordinate Operation package in OGC Abstract Specification topic 2. 
		
	
	
	 
		 
			 A single (not concatenated) coordinate operation. 
		
	
	
	 
		 
			 A parameterized mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. This coordinate operation uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type.

This abstract complexType shall not be directly used, extended, or restricted in a compliant Application Schema. 
		
	
	
	
	 
	
	 
		 
			 An abstract operation on coordinates that does not include any change of datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.

This abstract complexType is expected to be extended for well-known operation methods with many Conversion instances, in Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "_generalParameterValue" element. 
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 A concrete operation on coordinates that does not include any change of Datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.

This concrete complexType can be used with all operation methods, without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Conversion instance. 
		
		 
			 
				 
					 
					 
						 
							 Unordered list of composition associations to the set of parameter values used by this conversion operation. 
						
					
				
			
		
	
	
	 
		 
			 Association to the operation method used by this coordinate operation. 
		
	
	
	 
		 
			 Composition association to a parameter value used by this coordinate operation. 
		
	
	
	 
		 
			 Association to a concrete general-purpose conversion, either referencing or containing the definition of that conversion. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Abstract parameter value or group of parameter values.
			
This abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "valueOfParameter" element that references one element substitutable for the "OperationParameter" element. 
		
		 
	
	
	 
	
	 
		 
			 A parameter value, ordered sequence of values, or reference to a file of parameter values. This concrete complexType can be used for operation methods without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one instance. This complexType can be used, extended, or restricted for well-known operation methods, especially for methods with many instances. 
		
		 
			 
				 
					 
						 
						 
						 
						 
						 
						 
						 
						 
					
					 
				
			
		
	
	
	 
		 
			 Numeric value of an operation parameter, with its associated unit of measure. 
		
	
	
	 
		 
			 Value of an angle operation parameter, in either degree-minute-second format or single value format. 
		
	
	
	 
		 
			 String value of an operation parameter. A string value does not have an associated unit of measure. 
		
	
	
	 
		 
			 Positive integer value of an operation parameter, usually used for a count. An integer value does not have an associated unit of measure. 
		
	
	
	 
		 
			 Boolean value of an operation parameter. A Boolean value does not have an associated unit of measure. 
		
	
	
	 
		 
			 Ordered sequence of two or more numeric values of an operation parameter list, where each value has the same associated unit of measure. An element of this type contains a space-separated sequence of double values. 
		
	
	
	 
		 
			 Ordered sequence of two or more integer values of an operation parameter list, usually used for counts. These integer values do not have an associated unit of measure. An element of this type contains a space-separated sequence of integer values. 
		
	
	
	 
		 
			 Reference to a file or a part of a file containing one or more parameter values, each numeric value with its associated unit of measure. When referencing a part of a file, that file must contain multiple identified parts, such as an XML encoded document. Furthermore, the referenced file or part of a file can reference another part of the same or different files, as allowed in XML documents. 
		
	
	
	 
		 
			 Association to the operation parameter that this is a value of. 
		
	
	
	
	 
	
	 
		 
			 Basic encoding for operation method objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this operation method is identified. 
		
	
	
	 
		 
			 Definition of an algorithm used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this operation method. The first methodID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this operation method, including source information.
						
					
					 
					 
					 
					 
						 
							 Unordered list of associations to the set of operation parameters and parameter groups used by this operation method. 
						
					
				
			
		
	
	
	 
		 
			 An identification of an operation method. 
		
	
	
	 
		 
			 Formula(s) used by this operation method. The value may be a reference to a publication. Note that the operation method may not be analytic, in which case this element references or contains the procedure, not an analytic formula.
		
	
	
	 
		 
			 Number of dimensions in the source CRS of this operation method. 
		
	
	
	 
		 
			 Number of dimensions in the target CRS of this operation method. 
		
	
	
	 
		 
			 Association to an operation parameter or parameter group used by this operation method. 
		
	
	
	 
		 
			 Association to a concrete general-purpose operation method, either referencing or containing the definition of that method. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Abstract definition of a parameter or group of parameters used by an operation method. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 The minimum number of times that values for this parameter group or parameter are required. If this attribute is omitted, the minimum number is one. 
		
	
	
	 
	
	 
		 
			 Association to an operation parameter or group, either referencing or containing the definition of that parameter or group. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Basic encoding for operation parameter objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this operation parameter is identified. 
		
	
	
	 
		 
			 The definition of a parameter used by an operation method. Most parameter values are numeric, but other types of parameter values are possible. This complexType is expected to be used or extended for all operation methods, without defining operation-method-specialized element names.  
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this operation parameter. The first parameterID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this operation parameter, including source information. 
						
					
				
			
		
	
	
	 
		 
			 An identification of an operation parameter. 
		
	
	
	 
		 
			 Association to an operation parameter, either referencing or containing the definition of that parameter. 
		
		 
			 
		
		 
	
	




05-011 Common CRSs Folder/fragmentGeographicCRSs.xsd
 
	 
		 
			 fragmentGeographicCRSs.xsd
			 How to encode GeographicCRS definitions. 
			 Primary editor: Arliss Whiteside. Last updated 2004/12/16 
			 Copyright (c) 2004 OGC, All Rights Reserved.
		
	
	
	 
	
	 
		 
			 A coordinate reference system consists of an ordered sequence of coordinate system axes that are related to the earth through a datum. A coordinate reference system is defined by one datum and by one coordinate system. Most coordinate reference system do not move relative to the earth, except for engineering coordinate reference systems defined on moving platforms such as cars, ships, aircraft, and spacecraft. For further information, see OGC Abstract Specification Topic 2.

Coordinate reference systems are commonly divided into sub-types. The common classification criterion for sub-typing of coordinate reference systems is the way in which they deal with earth curvature. This has a direct effect on the portion of the earth's surface that can be covered by that type of CRS with an acceptable degree of error. The exception to the rule is the subtype "Temporal" which has been added by analogy. 
		
	
	
	 
	
	 
		 
			 Association to a coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A coordinate reference system based on an ellipsoidal approximation of the geoid; this provides an accurate representation of the geometry of geographic features for a large portion of the earth's surface.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the ellipsoidal coordinate system used by this CRS. 
		
	
	
	 
		 
			 Association to the geodetic datum used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to a geographic coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for coordinate system axis objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
						 
							 The name by which this coordinate system axis is identified. 
						
					
				
				 
			
		
	
	
	 
		 
			 Definition of a coordinate system axis. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system axis. The first axisID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system axis, including data source information. 
						
					
					 
					 
				
				 
			
		
	
	
	 
		 
			 An identification of a coordinate system axis. 
		
	
	
	 
		 
			 The abbreviation used for this coordinate system axis. This abbreviation can be used to identify the ordinates in a coordinate tuple. Examples are X and Y. The codeSpace attribute can reference a source of more information on a set of standardized abbreviations, or on this abbreviation. 
		
	
	
	 
		 
			 Direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin). Examples: north or south, east or west, up or down. Within any set of coordinate system axes, only one of each pair of terms can be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction. Note that an EngineeringCRS can include specific descriptions of the directions of its coordinate system axes. For example, the path of a linear CRS axis can be referenced in another document, such as referencing a GML feature that references or includes a curve geometry. The codeSpace attribute can reference a source of more information on a set of standardized directions, or on this direction. 
		
	
	
	 
		 
			 Identifier of the unit of measure used for this coordinate system axis. The value of this coordinate in a coordinate tuple shall be recorded using this unit of measure, whenever those coordinates use a coordinate reference system that uses a coordinate system that uses this axis.
		
	
	
	 
	
	 
		 
			 Association to a coordinate system axis, either referencing or containing the definition of that axis. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for coordinate system objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this coordinate system is identified. 
		
	
	
	 
		 
			 A coordinate system (CS) is the set of coordinate system axes that spans a given coordinate space. A CS is derived from a set of (mathematical) rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system. The first csID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system, including data source information. 
						
					
					 
						 
							 Ordered sequence of associations to the coordinate system axes included in this coordinate system. 
						
					
				
			
		
	
	
	 
		 
			 An identification of a coordinate system. 
		
	
	
	 
		 
			 Association to a coordinate system axis. 
		
	
	
	 
	
	 
		 
			 Association to a coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A two- or three-dimensional coordinate system in which position is specified by geodetic latitude, geodetic longitude, and (in the three-dimensional case) ellipsoidal height. An EllipsoidalCS shall have two or three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to an ellipsoidal coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for datum objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this datum is identified. 
		
	
	
	 
		 
			 A datum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype can be associated with only specific types of coordinate systems. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this datum. The first datumID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on this reference system, including source information. 
						
					
					 
					 
					 
				
			
		
	
	
	 
		 
			 An identification of a datum. 
		
	
	
	 
		 
			 Description, possibly including coordinates, of the point or points used to anchor the datum to the Earth. Also known as the "origin", especially for engineering and image datums. The codeSpace attribute can be used to reference a source of more detailed on this point or surface, or on a set of such descriptions. 
- For a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.
- For an engineering datum, the anchor point may be a physical point, or it may be a point with defined coordinates in another CRS. When appropriate, the coordinates of this anchor point can be referenced in another document, such as referencing a GML feature that references or includes a point position.
- For an image datum, the anchor point is usually either the centre of the image or the corner of the image.
- For a temporal datum, this attribute is not defined. Instead of the anchor point, a temporal datum carries a separate time origin of type DateTime. 
		
	
	
	 
		 
			 The time after which this datum definition is valid. This time may be precise (e.g. 1997.0 for IRTF97) or merely a year (e.g. 1983 for NAD83). In the latter case, the epoch usually refers to the year in which a major recalculation of the geodetic control network, underlying the datum, was executed or initiated. An old datum can remain valid after a new datum is defined. Alternatively, a datum may be superseded by a later datum, in which case the realization epoch for the new datum defines the upper limit for the validity of the superseded datum. 
		
	
	
	 
	
	 
		 
			 Association to a datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A geodetic datum defines the precise location and orientation in 3-dimensional space of a defined ellipsoid (or sphere) that approximates the shape of the earth, or of a Cartesian coordinate system centered in this ellipsoid (or sphere). 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the prime meridian used by this geodetic datum. 
		
	
	
	 
		 
			 Association to the ellipsoid used by this geodetic datum. 
		
	
	
	 
	
	 
		 
			 Association to a geodetic datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for prime meridian objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this prime meridian is identified. The meridianName most common value is Greenwich, and that value shall be used when the greenwichLongitude value is zero. 
		
	
	
	 
		 
			 A prime meridian defines the origin from which longitude values are determined.
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this prime meridian. The first meridianID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this prime meridian, including source information. 
						
					
					 
				
			
		
	
	
	 
		 
			 An identification of a prime meridian. 
		
	
	
	 
		 
			 Longitude of the prime meridian measured from the Greenwich meridian, positive eastward. The greenwichLongitude most common value is zero, and that value shall be used when the meridianName value is Greenwich. 
		
	
	
	 
	
	 
		 
			 Association to a prime meridian, either referencing or containing the definition of that meridian. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Basic encoding for ellipsoid objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this ellipsoid is identified. 
		
	
	
	 
		 
			 An ellipsoid is a geometric figure that can be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this ellipsoid. The first ellipsoidID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this ellipsoid, including source information. 
						
					
					 
					 
				
			
		
	
	
	 
		 
			 An identification of an ellipsoid. 
		
	
	
	 
		 
			 Length of the semi-major axis of the ellipsoid, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet. 
		
	
	
	 
	
	 
		 
			 Association to an ellipsoid, either referencing or containing the definition of that ellipsoid. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Definition of the second parameter that defines the shape of an ellipsoid. An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.
		
		 
			 
			 
			 
		
	
	
	 
		 
			 Inverse flattening value of the ellipsoid. Value is a scale factor (or ratio) that has no physical unit. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a scale factor, such as percent, permil, or parts-per-million. 
		
	
	
	 
		 
			 Length of the semi-minor axis of the ellipsoid. 
		
	
	
	 
		 
			 The ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere. 
		
		 
			 
				 
			
		
	
	




05-011 Common CRSs Folder/fragmentProjectedCRSs.xsd
 
	 
		 
			 fragmentProjectedCRSs.xsd
			 How to encode ProjectedCRS definitions. 
			 Primary editor: Arliss Whiteside. Last updated 2004/12/16 
			 Copyright (c) 2004 OGC, All Rights Reserved.
		
	
	
	 
	 
	
	 
		 
			 A coordinate reference system consists of an ordered sequence of coordinate system axes that are related to the earth through a datum. A coordinate reference system is defined by one datum and by one coordinate system. Most coordinate reference system do not move relative to the earth, except for engineering coordinate reference systems defined on moving platforms such as cars, ships, aircraft, and spacecraft. For further information, see OGC Abstract Specification Topic 2.

Coordinate reference systems are commonly divided into sub-types. The common classification criterion for sub-typing of coordinate reference systems is the way in which they deal with earth curvature. This has a direct effect on the portion of the earth's surface that can be covered by that type of CRS with an acceptable degree of error. The exception to the rule is the subtype "Temporal" which has been added by analogy. 
		
	
	
	 
	
	 
		 
			 Association to a coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A coordinate reference system that is defined by its coordinate conversion from another coordinate reference system (not by a datum). This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the coordinate reference system used by this derived CRS. 
		
	
	
	 
		 
			 Association to the coordinate conversion used to define this derived CRS. 
		
	
	
	 
	
	 
		 
			 A 2D coordinate reference system used to approximate the shape of the earth on a planar surface, but in such a way that the distortion that is inherent to the approximation is carefully controlled and known. Distortion correction is commonly applied to calculated bearings and distances to produce values that are a close match to actual field values. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 Association to the Cartesian coordinate system used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to a projected coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for coordinate system axis objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
						 
							 The name by which this coordinate system axis is identified. 
						
					
				
				 
			
		
	
	
	 
		 
			 Definition of a coordinate system axis. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system axis. The first axisID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system axis, including data source information. 
						
					
					 
					 
				
				 
			
		
	
	
	 
		 
			 An identification of a coordinate system axis. 
		
	
	
	 
		 
			 The abbreviation used for this coordinate system axis. This abbreviation can be used to identify the ordinates in a coordinate tuple. Examples are X and Y. The codeSpace attribute can reference a source of more information on a set of standardized abbreviations, or on this abbreviation. 
		
	
	
	 
		 
			 Direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin). Examples: north or south, east or west, up or down. Within any set of coordinate system axes, only one of each pair of terms can be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction. Note that an EngineeringCRS can include specific descriptions of the directions of its coordinate system axes. For example, the path of a linear CRS axis can be referenced in another document, such as referencing a GML feature that references or includes a curve geometry. The codeSpace attribute can reference a source of more information on a set of standardized directions, or on this direction. 
		
	
	
	 
		 
			 Identifier of the unit of measure used for this coordinate system axis. The value of this coordinate in a coordinate tuple shall be recorded using this unit of measure, whenever those coordinates use a coordinate reference system that uses a coordinate system that uses this axis.
		
	
	
	 
	
	 
		 
			 Association to a coordinate system axis, either referencing or containing the definition of that axis. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for coordinate system objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this coordinate system is identified. 
		
	
	
	 
		 
			 A coordinate system (CS) is the set of coordinate system axes that spans a given coordinate space. A CS is derived from a set of (mathematical) rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system. The first csID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system, including data source information. 
						
					
					 
						 
							 Ordered sequence of associations to the coordinate system axes included in this coordinate system. 
						
					
				
			
		
	
	
	 
		 
			 An identification of a coordinate system. 
		
	
	
	 
		 
			 Association to a coordinate system axis. 
		
	
	
	 
	
	 
		 
			 Association to a coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A 1-, 2-, or 3-dimensional coordinate system. Gives the position of points relative to orthogonal straight axes in the 2- and 3-dimensional cases. In the 1-dimensional case, it contains a single straight coordinate axis. In the multi-dimensional case, all axes shall have the same length unit of measure. A CartesianCS shall have one, two, or three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a Cartesian coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	




05-011 Common CRSs Folder/fragmentVerticalCRSs.xsd
 
	 
		 
			 fragmentVerticalCRSs.xsd
			 How to encode vertical CRSs. 
			 Primary editor: Arliss Whiteside. Last updated 2004/12/15 
			 Copyright (c) 2004 OGC, All Rights Reserved.
		
	
	
	 
	
	 
		 
			 A coordinate reference system consists of an ordered sequence of coordinate system axes that are related to the earth through a datum. A coordinate reference system is defined by one datum and by one coordinate system. Most coordinate reference system do not move relative to the earth, except for engineering coordinate reference systems defined on moving platforms such as cars, ships, aircraft, and spacecraft. For further information, see OGC Abstract Specification Topic 2.

Coordinate reference systems are commonly divided into sub-types. The common classification criterion for sub-typing of coordinate reference systems is the way in which they deal with earth curvature. This has a direct effect on the portion of the earth's surface that can be covered by that type of CRS with an acceptable degree of error. The exception to the rule is the subtype "Temporal" which has been added by analogy. 
		
	
	
	 
	
	 
		 
			 A 1D coordinate reference system used for recording heights or depths. Vertical CRSs make use of the direction of gravity to define the concept of height or depth, but the relationship with gravity may not be straightforward. By implication, ellipsoidal heights (h) cannot be captured in a vertical coordinate reference system. Ellipsoidal heights cannot exist independently, but only as an inseparable part of a 3D coordinate tuple defined in a geographic 3D coordinate reference system. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the vertical coordinate system used by this CRS. 
		
	
	
	 
		 
			 Association to the vertical datum used by this CRS. 
		
	
	
	
	 
	
	 
		 
			 Basic encoding for coordinate system axis objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
						 
							 The name by which this coordinate system axis is identified. 
						
					
				
				 
			
		
	
	
	 
		 
			 Definition of a coordinate system axis. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system axis. The first axisID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system axis, including data source information. 
						
					
					 
					 
				
				 
			
		
	
	
	 
		 
			 An identification of a coordinate system axis. 
		
	
	
	 
		 
			 The abbreviation used for this coordinate system axis. This abbreviation can be used to identify the ordinates in a coordinate tuple. Examples are X and Y. The codeSpace attribute can reference a source of more information on a set of standardized abbreviations, or on this abbreviation. 
		
	
	
	 
		 
			 Direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin). Examples: north or south, east or west, up or down. Within any set of coordinate system axes, only one of each pair of terms can be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction. Note that an EngineeringCRS can include specific descriptions of the directions of its coordinate system axes. For example, the path of a linear CRS axis can be referenced in another document, such as referencing a GML feature that references or includes a curve geometry. The codeSpace attribute can reference a source of more information on a set of standardized directions, or on this direction. 
		
	
	
	 
		 
			 Identifier of the unit of measure used for this coordinate system axis. The value of this coordinate in a coordinate tuple shall be recorded using this unit of measure, whenever those coordinates use a coordinate reference system that uses a coordinate system that uses this axis.
		
	
	
	 
		 
			 Association to a coordinate system axis, either referencing or containing the definition of that axis. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for coordinate system objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this coordinate system is identified. 
		
	
	
	 
		 
			 A coordinate system (CS) is the set of coordinate system axes that spans a given coordinate space. A CS is derived from a set of (mathematical) rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system. The first csID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system, including data source information. 
						
					
					 
						 
							 Ordered sequence of associations to the coordinate system axes included in this coordinate system. 
						
					
				
			
		
	
	
	 
		 
			 An identification of a coordinate system. 
		
	
	
	 
		 
			 Association to a coordinate system axis. 
		
	
	
	 
	
	 
		 
			 A one-dimensional coordinate system used to record the heights (or depths) of points. Such a coordinate system is usually dependent on the Earth's gravity field, perhaps loosely as when atmospheric pressure is the basis for the vertical coordinate system axis. A VerticalCS shall have one usesAxis association. 
		
		 
			 
		
	
	
	 
		 
			 Association to a vertical coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for datum objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this datum is identified. 
		
	
	
	 
		 
			 A datum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype can be associated with only specific types of coordinate systems. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this datum. The first datumID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on this reference system, including source information. 
						
					
					 
					 
					 
					 
				
			
		
	
	
	 
		 
			 An identification of a datum. 
		
	
	
	 
		 
			 Description, possibly including coordinates, of the point or points used to anchor the datum to the Earth. Also known as the "origin", especially for engineering and image datums. The codeSpace attribute can be used to reference a source of more detailed on this point or surface, or on a set of such descriptions. 
- For a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.
- For an engineering datum, the anchor point may be a physical point, or it may be a point with defined coordinates in another CRS. When appropriate, the coordinates of this anchor point can be referenced in another document, such as referencing a GML feature that references or includes a point position.
- For an image datum, the anchor point is usually either the centre of the image or the corner of the image.
- For a temporal datum, this attribute is not defined. Instead of the anchor point, a temporal datum carries a separate time origin of type DateTime. 
		
	
	
	 
		 
			 The time after which this datum definition is valid. This time may be precise (e.g. 1997.0 for IRTF97) or merely a year (e.g. 1983 for NAD83). In the latter case, the epoch usually refers to the year in which a major recalculation of the geodetic control network, underlying the datum, was executed or initiated. An old datum can remain valid after a new datum is defined. Alternatively, a datum may be superseded by a later datum, in which case the realization epoch for the new datum defines the upper limit for the validity of the superseded datum. 
		
	
	
	 
	
	 
		 
			 A textual description and/or a set of parameters identifying a particular reference level surface used as a zero-height surface, including its position with respect to the Earth for any of the height types recognized by this standard. There are several types of Vertical Datums, and each may place constraints on the Coordinate Axis with which it is combined to create a Vertical CRS. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 Type of a vertical datum. 
		
		 
			 
				 
					 
						 Reference to a source of information specifying the values and meanings of all the allowed string values for this VerticalDatumTypeType. 
					
				
			
		
	
	
	 
		 
			 Association to a vertical datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/basicTypes.xsd
 
   
     basicTypes.xsd
     
    Generic simpleContent components for use in GML 
    Copyright (c) 2004 OGC, All Rights Reserved.
    
  
  
   
     
        Some common reasons for a null value:   
			
        innapplicable - the object does not have a value
        missing - The correct value is not readily available to the sender of this data.  
                           Furthermore, a correct value may not exist.
        template - the value will be available later
        unknown - The correct value is not known to, and not computable by, the sender of this data. 
                           However, a correct value probably exists.
        withheld - the value is not divulged 
        
        other:reason - as indicated by "reason" string
        
        Specific communities may agree to assign more strict semantics when these terms are used in a particular context.  
      
    
     
       
         
           
           
           
           
           
        
      
       
         
           
        
      
    
  
  
   
     
       Utility type for null elements.  The value may be selected from one of the enumerated tokens, or may be a URI in which case this should identify a resource which describes the reason for the null. 
    
     
  
  
   
  
   
     
       Utility type used in various places 
      - e.g. to indicate the direction of topological objects;
      "+" for forwards, or "-" for backwards.
    
     
       
       
    
  
  
   
     
       Union of the XML Schema boolean type and the GML Nulltype.  An element which uses this type may have content which is either a boolean {0,1,true,false} or a value from Nulltype
    
     
  
  
   
     
       XML List based on the union type defined above.  An element declared with this type contains a space-separated list of boolean values {0,1,true,false} with null values interspersed as needed
    
     
  
  
   
     
       XML List based on XML Schema boolean type.  An element of this type contains a space-separated list of boolean values {0,1,true,false}
    
     
  
  
   
     
       Union of the XML Schema string type and the GML Nulltype.  An element which uses this type may have content which is either a string or a value from Nulltype.  Note that a "string" may contain whitespace.  
    
     
  
  
   
     
       Union of the XML Schema Name type and the GML Nulltype.  An element which uses this type may have content which is either a Name or a value from Nulltype.  Note that a "Name" may not contain whitespace.  
    
     
  
  
   
     
       XML List based on the union type defined above.  An element declared with this type contains a space-separated list of Name values with null values interspersed as needed
    
     
  
  
   
     
       XML List based on XML Schema Name type.  An element of this type contains a space-separated list of Name values
    
     
  
  
   
     
       Union of the XML Schema double type and the GML Nulltype.  An element which uses this type may have content which is either a double or a value from Nulltype
    
     
  
  
   
     
       XML List based on the union type defined above.  An element declared with this type contains a space-separated list of double values with null values interspersed as needed
    
     
  
  
   
     
       XML List based on XML Schema double type.  An element of this type contains a space-separated list of double values
    
     
  
  
   
     
       Union of the XML Schema integer type and the GML Nulltype.  An element which uses this type may have content which is either an integer or a value from Nulltype
    
     
  
  
   
     
       XML List based on the union type defined above.  An element declared with this type contains a space-separated list of integer values with null values interspersed as needed
    
     
  
  
   
     
       XML List based on XML Schema integer type.  An element of this type contains a space-separated list of integer values
    
     
  
  
   
     
       Name or code with an (optional) authority.  Text token.  
      If the codeSpace attribute is present, then its value should identify a dictionary, thesaurus 
      or authority for the term, such as the organisation who assigned the value, 
      or the dictionary from which it is taken.  
      A text string with an optional codeSpace attribute. 
    
     
       
         
      
    
  
  
   
     
       List of values on a uniform nominal scale.  List of text tokens.   
      In a list context a token should not include any spaces, so xsd:Name is used instead of xsd:string.   
      If a codeSpace attribute is present, then its value is a reference to 
      a Reference System for the value, a dictionary or code list.
    
     
       
         
      
    
  
  
   
     
       List of values on a uniform nominal scale.  List of text tokens.   
      In a list context a token should not include any spaces, so xsd:Name is used instead of xsd:string.  
      A member of the list may be a typed null.  
      If a codeSpace attribute is present, then its value is a reference to 
      a Reference System for the value, a dictionary or code list.
    
     
       
         
      
    
  
  
   
     
       Number with a scale.  
      The value of uom (Units Of Measure) attribute is a reference to a Reference System for the amount, either a ratio or position scale. 
    
     
       
         
      
    
  
  
   
     
       List of numbers with a uniform scale.  
      The value of uom (Units Of Measure) attribute is a reference to 
      a Reference System for the amount, either a ratio or position scale. 
    
     
       
         
      
    
  
  
   
     
       List of numbers with a uniform scale.  
      A member of the list may be a typed null. 
      The value of uom (Units Of Measure) attribute is a reference to 
      a Reference System for the amount, either a ratio or position scale. 
    
     
       
         
      
    
  
  
   
     
       Tables or arrays of tuples.  
        May be used for text-encoding of values from a table.  
        Actually just a string, but allows the user to indicate which characters are used as separators.  
        The value of the 'cs' attribute is the separator for coordinate values, 
        and the value of the 'ts' attribute gives the tuple separator (a single space by default); 
        the default values may be changed to reflect local usage.
        Defaults to CSV within a tuple, space between tuples.  
        However, any string content will be schema-valid.  
    
     
       
         
         
         
      
    
  
  
   
     
       A set of values, representing a list of token with the lexical value space of NCName. The tokens are seperated by whitespace.
    
     
  
  
   
     
       A set of values, representing a list of token with the lexical value space of QName. The tokens are seperated by whitespace.
    
     
  
  




05-011 Common CRSs Folder/gml/3.1.1/base/coordinateOperations.xsd
 
	 
		 
		 
			 coordinateOperations.xsd
			 3.1.1
			 How to encode coordinate operation definitions. 
			 Builds on referenceSystems.xsd to encode the data needed to define coordinate operations, including Transformations, Conversions, and other specific subtypes of operations. Primary editor: Arliss Whiteside. Last updated 2004/11/02. 
			 Copyright (c) 2002-2003 OpenGIS, All Rights Reserved.
			 This schema encodes the Coordinate Operation (CC_) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates. That UML model is adapted from ISO 19111 - Spatial referencing by coordinates, as described in Annex C of Topic 2. 

			Caution: The CRS package in GML 3.1 and GML 3.1.1 is preliminary, and is expected to undergo some modifications that are not backward compatible during the development of GML 3.2 (ISO 19136). 
			The GML 3.2 package will implement the model described in the revised version of ISO 19111. 
		
	
	
	 
	 
	
	 
	
	 
		 
			 Basic encoding for coordinate operation objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this coordinate operation is identified. 
		
	
	
	 
		 
			 A mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values must be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate operation. The first coordinateOperationID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate operation, including source information. 
						
					
					 
					 
					 
					 
						 
							 Unordered set of estimates of the impact of this coordinate operation on point position accuracy. Gives position error estimates for target coordinates of this coordinate operation, assuming no errors in source coordinates. 
						
					
					 
					 
				
			
		
	
	
	 
		 
			 An identification of a coordinate operation. 
		
	
	
	 
		 
			 Version of the coordinate transformation (i.e., instantiation due to the stochastic nature of the parameters). Mandatory when describing a transformation, and should not be supplied for a conversion. 
		
	
	
	 
		 
			 Association to the source CRS (coordinate reference system) of this coordinate operation. 
		
	
	
	 
		 
			 Association to the target CRS (coordinate reference system) of this coordinate operation. For constraints on multiplicity of "sourceCRS" and "targetCRS", see UML model of Coordinate Operation package in OGC Abstract Specification topic 2. 
		
	
	
	 
	
	 
		 
			 Association to a coordinate operation, either referencing or containing the definition of that coordinate operation. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 An ordered sequence of two or more single coordinate operations. The sequence of operations is constrained by the requirement that the source coordinate reference system of step (n+1) must be the same as the target coordinate reference system of step (n). The source coordinate reference system of the first step and the target coordinate reference system of the last step are the source and target coordinate reference system associated with the concatenated operation. Instead of a forward operation, an inverse operation may be used for one or more of the operation steps mentioned above, if the inverse operation is uniquely defined by the forward operation.
		
		 
			 
				 
					 
						 
							 Ordered sequence of associations to the two or more single operations used by this concatenated operation. 
						
					
				
			
		
	
	
	 
		 
			 Association to a single operation. 
		
	
	
	 
	
	 
		 
			 Association to a concatenated operation, either referencing or containing the definition of that concatenated operation. 
		
		 
			 
		
		 
	
	
	 
		 
			 A single (not concatenated) coordinate operation. 
		
	
	
	 
	
	 
		 
			 Association to a single operation, either referencing or containing the definition of that single operation. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A pass-through operation specifies that a subset of a coordinate tuple is subject to a specific coordinate operation. 
		
		 
			 
				 
					 
						 
							 Ordered sequence of positive integers defining the positions in a coordinate tuple of the coordinates affected by this pass-through operation. 
						
					
					 
				
			
		
	
	
	 
		 
			 A positive integer defining a position in a coordinate tuple. 
		
	
	
	 
		 
			 Association to the operation applied to the specified ordinates. 
		
	
	
	 
	
	 
		 
			 Association to a pass through operation, either referencing or containing the definition of that pass through operation. 
		
		 
			 
		
		 
	
	
	 
		 
			 A parameterized mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. This coordinate operation uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type.

This abstract complexType shall not be directly used, extended, or restricted in a compliant Application Schema. 
		
	
	
	 
	
	 
		 
			 Association to an abstract operation, either referencing or containing the definition of that operation. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 An abstract operation on coordinates that does not include any change of datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.

This abstract complexType is expected to be extended for well-known operation methods with many Conversion instances, in Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "_generalParameterValue" element. 
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 Association to a general conversion, either referencing or containing the definition of that conversion. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A concrete operation on coordinates that does not include any change of Datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.

This concrete complexType can be used with all operation methods, without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Conversion instance. 
		
		 
			 
				 
					 
					 
						 
							 Unordered list of composition associations to the set of parameter values used by this conversion operation. 
						
					
				
			
		
	
	
	 
		 
			 Association to the operation method used by this coordinate operation. 
		
	
	
	 
		 
			 Composition association to a parameter value used by this coordinate operation. 
		
	
	
	 
	
	 
		 
			 Association to a concrete general-purpose conversion, either referencing or containing the definition of that conversion. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 An abstract operation on coordinates that usually includes a change of Datum. The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation.

This abstract complexType is expected to be extended for well-known operation methods with many Transformation instances, in Application Schemas that define operation-method-specialized value element names and contents. This transformation uses an operation method with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references one "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include one or more elements each named "uses...Value" that each use the type of an element substitutable for the "_generalParameterValue" element. 
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 Association to a general transformation, either referencing or containing the definition of that transformation. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A concrete operation on coordinates that usually includes a change of datum. The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation.

This concrete complexType can be used for all operation methods, without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Transformation instance. 
		
		 
			 
				 
					 
					 
						 
							 Unordered set of composition associations to the set of parameter values used by this transformation operation. 
						
					
				
			
		
	
	
	 
	
	 
		 
			 Association to a transformation, either referencing or containing the definition of that transformation. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Abstract parameter value or group of parameter values.
			
This abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "valueOfParameter" element that references one element substitutable for the "OperationParameter" element. 
		
		 
	
	
	 
	
	 
		 
			 A parameter value, ordered sequence of values, or reference to a file of parameter values. This concrete complexType can be used for operation methods without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one instance. This complexType can be used, extended, or restricted for well-known operation methods, especially for methods with many instances. 
		
		 
			 
				 
					 
						 
						 
						 
						 
						 
						 
						 
						 
					
					 
				
			
		
	
	
	 
		 
			 Numeric value of an operation parameter, with its associated unit of measure. 
		
	
	
	 
		 
			 Value of an angle operation parameter, in either degree-minute-second format or single value format. 
		
	
	
	 
		 
			 String value of an operation parameter. A string value does not have an associated unit of measure. 
		
	
	
	 
		 
			 Positive integer value of an operation parameter, usually used for a count. An integer value does not have an associated unit of measure. 
		
	
	
	 
		 
			 Boolean value of an operation parameter. A Boolean value does not have an associated unit of measure. 
		
	
	
	 
		 
			 Ordered sequence of two or more numeric values of an operation parameter list, where each value has the same associated unit of measure. An element of this type contains a space-separated sequence of double values. 
		
	
	
	 
		 
			 Ordered sequence of two or more integer values of an operation parameter list, usually used for counts. These integer values do not have an associated unit of measure. An element of this type contains a space-separated sequence of integer values. 
		
	
	
	 
		 
			 Reference to a file or a part of a file containing one or more parameter values, each numeric value with its associated unit of measure. When referencing a part of a file, that file must contain multiple identified parts, such as an XML encoded document. Furthermore, the referenced file or part of a file can reference another part of the same or different files, as allowed in XML documents. 
		
	
	
	 
		 
			 Association to the operation parameter that this is a value of. 
		
	
	
	
	 
	
	 
		 
			 A group of related parameter values. The same group can be repeated more than once in a Conversion, Transformation, or higher level parameterValueGroup, if those instances contain different values of one or more parameterValues which suitably distinquish among those groups. This concrete complexType can be used for operation methods without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one instance. This complexType can be used, extended, or restricted for well-known operation methods, especially for methods with many instances. 
		
		 
			 
				 
					 
						 
							 Unordered set of composition associations to the parameter values and groups of values included in this group. 
						
					
					 
				
			
		
	
	
	 
		 
			 A composition association to a parameter value or group of values included in this group. 
		
	
	
	 
		 
			 Association to the operation parameter group for which this element provides parameter values. 
		
	
	
	
	 
	
	 
		 
			 Basic encoding for operation method objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this operation method is identified. 
		
	
	
	 
		 
			 Definition of an algorithm used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this operation method. The first methodID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this operation method, including source information.
						
					
					 
					 
					 
					 
						 
							 Unordered list of associations to the set of operation parameters and parameter groups used by this operation method. 
						
					
				
			
		
	
	
	 
		 
			 An identification of an operation method. 
		
	
	
	 
		 
			 Formula(s) used by this operation method. The value may be a reference to a publication. Note that the operation method may not be analytic, in which case this element references or contains the procedure, not an analytic formula.
		
	
	
	 
		 
			 Number of dimensions in the source CRS of this operation method. 
		
	
	
	 
		 
			 Number of dimensions in the target CRS of this operation method. 
		
	
	
	 
		 
			 Association to an operation parameter or parameter group used by this operation method. 
		
	
	
	 
	
	 
		 
			 Association to a concrete general-purpose operation method, either referencing or containing the definition of that method. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Abstract definition of a parameter or group of parameters used by an operation method. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 The minimum number of times that values for this parameter group or parameter are required. If this attribute is omitted, the minimum number is one. 
		
	
	
	 
	
	 
		 
			 Association to an operation parameter or group, either referencing or containing the definition of that parameter or group. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Basic encoding for operation parameter objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this operation parameter is identified. 
		
	
	
	 
		 
			 The definition of a parameter used by an operation method. Most parameter values are numeric, but other types of parameter values are possible. This complexType is expected to be used or extended for all operation methods, without defining operation-method-specialized element names.  
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this operation parameter. The first parameterID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this operation parameter, including source information. 
						
					
				
			
		
	
	
	 
		 
			 An identification of an operation parameter. 
		
	
	
	 
	
	 
		 
			 Association to an operation parameter, either referencing or containing the definition of that parameter. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Basic encoding for operation parameter group objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this operation parameter group is identified. 
		
	
	
	 
		 
			 The definition of a group of parameters used by an operation method. This complexType is expected to be used or extended for all applicable operation methods, without defining operation-method-specialized element names.  
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this operation parameter group. The first groupID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this operation parameter group, including source information. 
						
					
					 
					 
						 
							 Unordered list of associations to the set of operation parameters that are members of this group. 
						
					
				
			
		
	
	
	 
		 
			 An identification of an operation parameter group. 
		
	
	
	 
		 
			 The maximum number of times that values for this parameter group can be included. If this attribute is omitted, the maximum number is one. 
		
	
	
	 
		 
			 Association to an operation parameter that is a member of a group. 
		
	
	
	 
	
	 
		 
			 Association to an operation parameter, either referencing or containing the definition of that parameter. 
		
		 
			 
		
		 
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/coordinateReferenceSystems.xsd
 
	 
		 
		 
			 coordinateReferenceSystems.xsd
			 3.1.1
			 How to encode coordinate reference system definitions. 
			 Builds on referenceSystems.xsd to encode the data needed to define coordinate reference systems, including the specific subtypes of coordinate reference systems. Primary editor: Arliss Whiteside. Last updated 2004/11/02. 
			 Copyright (c) 2002-2003 Open GIS Consortium, All Rights Reserved.
			 This schema encodes the Coordinate Reference System (SC_) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates, with the exception of the abstract "SC_CRS" class. The "SC_CRS" class is encoded in referenceSystems.xsd, to eliminate the (circular) references from coordinateOperations.xsd to coordinateReferenceSystems.xsd. That UML model is adapted from ISO 19111 - Spatial referencing by coordinates, as described in Annex C of Topic 2. 

			Caution: The CRS package in GML 3.1 and GML 3.1.1 is preliminary, and is expected to undergo some modifications that are not backward compatible during the development of GML 3.2 (ISO 19136). 
			The GML 3.2 package will implement the model described in the revised version of ISO 19111. 
		
	
	
	 
	 
	 
	
	 
		 
			 A coordinate reference system consists of an ordered sequence of coordinate system axes that are related to the earth through a datum. A coordinate reference system is defined by one datum and by one coordinate system. Most coordinate reference system do not move relative to the earth, except for engineering coordinate reference systems defined on moving platforms such as cars, ships, aircraft, and spacecraft. For further information, see OGC Abstract Specification Topic 2.

Coordinate reference systems are commonly divided into sub-types. The common classification criterion for sub-typing of coordinate reference systems is the way in which they deal with earth curvature. This has a direct effect on the portion of the earth's surface that can be covered by that type of CRS with an acceptable degree of error. The exception to the rule is the subtype "Temporal" which has been added by analogy. 
		
	
	
	 
	
	 
		 
			 Association to a coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A coordinate reference system describing the position of points through two or more independent coordinate reference systems. 
		
		 
			 
				 
					 
						 
							 Ordered sequence of associations to all the component coordinate reference systems included in this compound coordinate reference system. 
						
					
				
			
		
	
	
	 
		 
			 An association to a component coordinate reference system included in this compound coordinate reference system. 
		
	
	
	 
	
	 
		 
			 Association to a compound coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A coordinate reference system based on an ellipsoidal approximation of the geoid; this provides an accurate representation of the geometry of geographic features for a large portion of the earth's surface.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the ellipsoidal coordinate system used by this CRS. 
		
	
	
	 
		 
			 Association to the geodetic datum used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to a geographic coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A 1D coordinate reference system used for recording heights or depths. Vertical CRSs make use of the direction of gravity to define the concept of height or depth, but the relationship with gravity may not be straightforward. By implication, ellipsoidal heights (h) cannot be captured in a vertical coordinate reference system. Ellipsoidal heights cannot exist independently, but only as an inseparable part of a 3D coordinate tuple defined in a geographic 3D coordinate reference system. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the vertical coordinate system used by this CRS. 
		
	
	
	 
		 
			 Association to the vertical datum used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to a vertical coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A 3D coordinate reference system with the origin at the approximate centre of mass of the earth. A geocentric CRS deals with the earth's curvature by taking a 3D spatial view, which obviates the need to model the earth's curvature. 
		
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	
	 
		 
			 Association to the Cartesian coordinate system used by this CRS. 
		
	
	
	 
		 
			 Association to the spherical coordinate system used by this CRS.
		
	
	
	 
	
	 
		 
			 Association to a geocentric coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A coordinate reference system that is defined by its coordinate conversion from another coordinate reference system (not by a datum). This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the coordinate reference system used by this derived CRS. 
		
	
	
	 
		 
			 Association to the coordinate conversion used to define this derived CRS. 
		
	
	
	 
	
	 
		 
			 A 2D coordinate reference system used to approximate the shape of the earth on a planar surface, but in such a way that the distortion that is inherent to the approximation is carefully controlled and known. Distortion correction is commonly applied to calculated bearings and distances to produce values that are a close match to actual field values. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 Association to a projected coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A coordinate reference system that is defined by its coordinate conversion from another coordinate reference system but is not a projected coordinate reference system. This category includes coordinate reference systems derived from a projected coordinate reference system. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 Type of a derived coordinate reference system. 
		
		 
			 
				 
					 
						 Reference to a source of information specifying the values and meanings of all the allowed string values for this DerivedCRSTypeType. 
					
				
			
		
	
	
	 
		 
			 Association to the coordinate system used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to a non-projected derived coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A contextually local coordinate reference system; which can be divided into two broad categories:
- earth-fixed systems applied to engineering activities on or near the surface of the earth;
- CRSs on moving platforms such as road vehicles, vessels, aircraft, or spacecraft.
For further information, see OGC Abstract Specification Topic 2. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the engineering datum used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to an engineering coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 An engineering coordinate reference system applied to locations in images. Image coordinate reference systems are treated as a separate sub-type because a separate user community exists for images with its own terms of reference. 
		
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	
	 
		 
			 Association to the oblique Cartesian coordinate system used by this CRS.
		
	
	
	 
		 
			 Association to the image datum used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to an image coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A 1D coordinate reference system used for the recording of time. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the temporal coordinate system used by this CRS. 
		
	
	
	 
		 
			 Association to the temporal datum used by this CRS. 
		
	
	
	 
	
	 
		 
			 Association to a temporal coordinate reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/coordinateSystems.xsd
 
	 
		 
		 
			 coordinateSystems.xsd
			 3.1.1
			 How to encode coordinate system definitions. 
			 Builds on referenceSystems.xsd to encode the data needed to define coordinate systems, including the specific subtypes of coordinate systems. Primary editor: Arliss Whiteside. Last updated 2004/11/02. 
			 Copyright (c) 2002-2003 OpenGIS, All Rights Reserved.
			 This schema encodes the Coordinate System (CS_) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates. That UML model is adapted from ISO 19111 - Spatial referencing by coordinates, as described in Annex C of Topic 2. 

			Caution: The CRS package in GML 3.1 and GML 3.1.1 is preliminary, and is expected to undergo some modifications that are not backward compatible during the development of GML 3.2 (ISO 19136). 
			The GML 3.2 package will implement the model described in the revised version of ISO 19111. 
		
	
	
	 
	
	 
	
	 
		 
			 Basic encoding for coordinate system axis objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
						 
							 The name by which this coordinate system axis is identified. 
						
					
				
				 
			
		
	
	
	 
		 
			 Definition of a coordinate system axis. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system axis. The first axisID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system axis, including data source information. 
						
					
					 
					 
				
				 
			
		
	
	
	 
		 
			 An identification of a coordinate system axis. 
		
	
	
	 
		 
			 The abbreviation used for this coordinate system axis. This abbreviation can be used to identify the ordinates in a coordinate tuple. Examples are X and Y. The codeSpace attribute can reference a source of more information on a set of standardized abbreviations, or on this abbreviation. 
		
	
	
	 
		 
			 Direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin). Examples: north or south, east or west, up or down. Within any set of coordinate system axes, only one of each pair of terms can be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction. Note that an EngineeringCRS can include specific descriptions of the directions of its coordinate system axes. For example, the path of a linear CRS axis can be referenced in another document, such as referencing a GML feature that references or includes a curve geometry. The codeSpace attribute can reference a source of more information on a set of standardized directions, or on this direction. 
		
	
	
	 
		 
			 Identifier of the unit of measure used for this coordinate system axis. The value of this coordinate in a coordinate tuple shall be recorded using this unit of measure, whenever those coordinates use a coordinate reference system that uses a coordinate system that uses this axis.
		
	
	
	 
	
	 
		 
			 Association to a coordinate system axis, either referencing or containing the definition of that axis. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for coordinate system objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this coordinate system is identified. 
		
	
	
	 
		 
			 A coordinate system (CS) is the set of coordinate system axes that spans a given coordinate space. A CS is derived from a set of (mathematical) rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this coordinate system. The first csID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this coordinate system, including data source information. 
						
					
					 
						 
							 Ordered sequence of associations to the coordinate system axes included in this coordinate system. 
						
					
				
			
		
	
	
	 
		 
			 An identification of a coordinate system. 
		
	
	
	 
		 
			 Association to a coordinate system axis. 
		
	
	
	 
	
	 
		 
			 Association to a coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A two- or three-dimensional coordinate system in which position is specified by geodetic latitude, geodetic longitude, and (in the three-dimensional case) ellipsoidal height. An EllipsoidalCS shall have two or three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to an ellipsoidal coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A 1-, 2-, or 3-dimensional coordinate system. Gives the position of points relative to orthogonal straight axes in the 2- and 3-dimensional cases. In the 1-dimensional case, it contains a single straight coordinate axis. In the multi-dimensional case, all axes shall have the same length unit of measure. A CartesianCS shall have one, two, or three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a Cartesian coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A one-dimensional coordinate system used to record the heights (or depths) of points. Such a coordinate system is usually dependent on the Earth's gravity field, perhaps loosely as when atmospheric pressure is the basis for the vertical coordinate system axis. A VerticalCS shall have one usesAxis association. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a vertical coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A one-dimensional coordinate system containing a single time axis, used to describe the temporal position of a point in the specified time units from a specified time origin. A TemporalCS shall have one usesAxis association. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a temporal coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A one-dimensional coordinate system that consists of the points that lie on the single axis described. The associated ordinate is the distance from the specified origin to the point along the axis. Example: usage of the line feature representing a road to describe points on or along that road. A LinearCS shall have one usesAxis association. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a linear coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A two- or three-dimensional coordinate system that consists of any combination of coordinate axes not covered by any other coordinate system type. An example is a multilinear coordinate system which contains one coordinate axis that may have any 1-D shape which has no intersections with itself. This non-straight axis is supplemented by one or two straight axes to complete a 2 or 3 dimensional coordinate system. The non-straight axis is typically incrementally straight or curved. A UserDefinedCS shall have two or three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a user-defined coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A three-dimensional coordinate system with one distance measured from the origin and two angular coordinates. Not to be confused with an ellipsoidal coordinate system based on an ellipsoid "degenerated" into a sphere. A SphericalCS shall have three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a spherical coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A two-dimensional coordinate system in which position is specified by the distance from the origin and the angle between the line from the origin to a point and a reference direction. A PolarCS shall have two usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a polar coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A three-dimensional coordinate system consisting of a polar coordinate system extended by a straight coordinate axis perpendicular to the plane spanned by the polar coordinate system. A CylindricalCS shall have three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to a cylindrical coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A two- or three-dimensional coordinate system with straight axes that are not necessarily orthogonal. An ObliqueCartesianCS shall have two or three usesAxis associations. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to an oblique-Cartesian coordinate system, either referencing or containing the definition of that coordinate system. 
		
		 
			 
		
		 
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/coverage.xsd
 
	 
		 coverage.xsd
		 GML Coverage schema. 
    Copyright (c) 2002-2004 OGC, All Rights Reserved.
	
	
	 
	 
	 
	 
	
	
	
	
	 
	
	 
		 
			 Abstract element which acts as the head of a substitution group for coverages. Note that a coverage is a GML feature.
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 A continuous coverage as defined in ISO 19123 is a coverage that can return different values for the same feature attribute at different direct positions within a single spatiotemporal object in its spatiotemporal domain
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 A discrete coverage consists of a domain set, range set and optionally a coverage function. The domain set consists of either geometry or temporal objects, finite in number. The range set is comprised of a finite number of attribute values each of which is associated to every direct position within any single spatiotemporal object in the domain. In other words, the range values are constant on each spatiotemporal object in the domain. This coverage function maps each element from the coverage domain to an element in its range. This definition conforms to ISO 19123.
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 The spatiotemporal domain of a coverage.  
  Typically 
  * a geometry collection, 
  * an implicit geometry (e.g. a grid), 
  * an explicit or implicit collection of time instances or periods, or

N.B. Temporal geometric complexes and temporal grids are not yet implemented in GML.
		
		 
			 
				 
				 
			
		
		 
	
	
	 
	
	 
		 
			 
				 
					 each member _Value holds a tuple or "row" from the equivalent table
				
			
			 
				 
					 each list holds the complete set of one scalar component from the values - i.e. a "column" from the equivalent table
				
			
			 
				 
					 Its tuple list holds the values as space-separated tuples each of which contains comma-separated components, and the tuple structure is specified using the rangeParameters property.
				
			
			 
				 
					 a reference to an external source for the data, together with a description of how that external source is structured
				
			
		
	
	
	 
	
	 
		 
			 The function or rule which defines the map from members of the domainSet to the range.  
      More functions will be added to this list
		
		 
			 
			 
		
	
	
	
	
	 
	
	 
		 
			 
			 
				 
				 
			
		
	
	
	 
	
	 
	
	 
	
	 
		 
			 
			 
			 
			 
			 
		
	
	
	 
		 
			 List of codes that identifies the file structure model for records stored in files.
		
		 
			 
		
	
	
	 
	
	 
		 
			 Metadata about the rangeSet.  Definition of record structure.   
      This is required if the rangeSet is encoded in a DataBlock.  
      We use a gml:_Value with empty values as a map of the composite value structure.
		
		 
			 
		
		 
	
	
	
	
	 
		 
			 Description of a rule for associating members from the domainSet with members of the rangeSet.
		
	
	
	 
	
	 
		 
			 Defines how values in the domain are mapped to the range set. The start point and the sequencing rule are specified here.
		
		 
			 
				 
					 If absent, the implied value is "Linear".
				
			
			 
				 
					 Index position of the first grid post, which must lie somwhere in the GridEnvelope.  If absent, the startPoint is equal to the value of gridEnvelope::low from the grid definition.
				
			
		
	
	
	 
	
	 
		 
			 Exends GridFunctionType with a lookUpTable.  This contains a list of indexes of members within the rangeSet corresponding with the members of the domainSet.  The domainSet is traversed in list order if it is enumerated explicitly, or in the order specified by a SequenceRule if the domain is an implicit set.    The length of the lookUpTable corresponds with the length of the subset of the domainSet for which the coverage is defined.
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 
				 
			
		
	
	
	 
		 
			 List of codes (adopted from ISO 19123 Annex C) that identifies the rule for traversing a grid to correspond with the sequence of members of the rangeSet.
		
		 
			 
			 
			 
			 
			 
			 
		
	
	
	 
		 
			 The enumeration value here indicates the incrementation order  to be used on the first 2 axes, i.e. "+x-y" means that the points on the first axis are to be traversed from lowest to highest and  the points on the second axis are to be traversed from highest to lowest. The points on all other axes (if any) beyond the first 2 are assumed to increment from lowest to highest.
		
		 
			 
			 
			 
			 
		
	
	
	
	
	 
	
	 
		 
			 A discrete coverage type whose domain is defined by a collection of point
		
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 A discrete coverage type whose domain is defined by a collection of curves.
		
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 A discrete coverage type whose domain is defined by a collection of surface patches (includes polygons, triangles, rectangles, etc).
		
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 A discrete coverage type whose domain is defined by a collection of Solids.
		
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
				 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
				 
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/dataQuality.xsd
 
	 
		 
		 
			 dataQuality.xsd
			 3.1.1
			 How to encode positional data quality information. 
			 Builds on units.xsd to encode the data needed to describe the positional accuracy of coordinate operations. Primary editor: Arliss Whiteside. Last updated 2003/10/16. 
			 Copyright (c) 2002-2003 OpenGIS, All Rights Reserved.
			 This schema encodes the Data Quality (DQ) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates. That UML model is adapted from ISO 19111 - Spatial referencing by coordinates, as described in Annex C of Topic 2. 

			Caution: The CRS package in GML 3.1 and GML 3.1.1 is preliminary, and is expected to undergo some modifications that are not backward compatible during the development of GML 3.2 (ISO 19136). 
			The GML 3.2 package will implement the model described in the revised version of ISO 19111. 
		
	
	
	 
	
	 
	
	 
		 
			 Position error estimate (or accuracy) data. 
		
		 
			 
		
	
	
	 
		 
			 A description of the position accuracy parameter(s) provided. 
		
	
	
	 
	
	 
		 
			 Closeness of reported coordinate values to values accepted as or being true. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 Closeness of the relative positions of two or more positions to their respective relative positions accepted as or being true. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 A quantitative result defined by the evaluation procedure used, and identified by the measureDescription. 
		
	
	
	 
	
	 
		 
			 Error estimate covariance matrix. 
		
		 
			 
				 
					 
						 
							 Ordered sequence of units of measure, corresponding to the row and column index numbers of the covariance matrix, starting with row and column 1 and ending with row/column N. Each unit of measure is for the ordinate reflected in the relevant row and column of the covariance matrix. 
						
					
					 
						 
							 Unordered set of elements in this covariance matrix. Because the covariance matrix is symmetrical, only the elements in the upper or lower diagonal part (including the main diagonal) of the matrix need to be specified. Any zero valued covariance elements can be omitted. 
						
					
				
			
		
	
	
	 
	
	 
		 
			 An element of a covariance matrix.
		
		 
			 
			 
			 
		
	
	
	 
		 
			 Row number of this covariance element value. 
		
	
	
	 
		 
			 Column number of this covariance element value. 
		
	
	
	 
		 
			 Value of covariance matrix element. 
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/datums.xsd
 
	 
		 
		 
			 datums.xsd
			 3.1.1
			 How to encode datum definitions. 
			 Builds on referenceSystems.xsd to encode the data needed to define datums, including the specific subtypes of datums. Primary editor: Arliss Whiteside. Last updated 2004/11/05 
			 Copyright (c) 2002-2003-2004 Open GIS Consortium, All Rights Reserved.
			 This schema encodes the Datum (CD_) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates. That UML model is adapted from ISO 19111 - Spatial referencing by coordinates, as described in Annex C of Topic 2. 

			Caution: The CRS package in GML 3.1 and GML 3.1.1 is preliminary, and is expected to undergo some modifications that are not backward compatible during the development of GML 3.2 (ISO 19136). 
			The GML 3.2 package will implement the model described in the revised version of ISO 19111. 
		
	
	
	 
	
	 
	
	 
		 
			 Basic encoding for datum objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this datum is identified. 
		
	
	
	 
		 
			 A datum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype can be associated with only specific types of coordinate systems. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this datum. The first datumID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on this reference system, including source information. 
						
					
					 
					 
					 
					 
				
			
		
	
	
	 
		 
			 An identification of a datum. 
		
	
	
	 
		 
			 Description, possibly including coordinates, of the point or points used to anchor the datum to the Earth. Also known as the "origin", especially for engineering and image datums. The codeSpace attribute can be used to reference a source of more detailed on this point or surface, or on a set of such descriptions. 
- For a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.
- For an engineering datum, the anchor point may be a physical point, or it may be a point with defined coordinates in another CRS. When appropriate, the coordinates of this anchor point can be referenced in another document, such as referencing a GML feature that references or includes a point position.
- For an image datum, the anchor point is usually either the centre of the image or the corner of the image.
- For a temporal datum, this attribute is not defined. Instead of the anchor point, a temporal datum carries a separate time origin of type DateTime. 
		
	
	
	 
		 
			 The time after which this datum definition is valid. This time may be precise (e.g. 1997.0 for IRTF97) or merely a year (e.g. 1983 for NAD83). In the latter case, the epoch usually refers to the year in which a major recalculation of the geodetic control network, underlying the datum, was executed or initiated. An old datum can remain valid after a new datum is defined. Alternatively, a datum may be superseded by a later datum, in which case the realization epoch for the new datum defines the upper limit for the validity of the superseded datum. 
		
	
	
	 
	
	 
		 
			 Association to a datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 An engineering datum defines the origin of an engineering coordinate reference system, and is used in a region around that origin. This origin can be fixed with respect to the earth (such as a defined point at a construction site), or be a defined point on a moving vehicle (such as on a ship or satellite). 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Association to an engineering datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 An image datum defines the origin of an image coordinate reference system, and is used in a local context only. For more information, see OGC Abstract Specification Topic 2. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 Specification of the way an image grid is associated with the image data attributes. 
		
		 
			 
				 
					 
						 Reference to a source of information specifying the values and meanings of all the allowed string values for this PixelInCellType. 
					
				
			
		
	
	
	 
	
	 
		 
			 Association to an image datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A textual description and/or a set of parameters identifying a particular reference level surface used as a zero-height surface, including its position with respect to the Earth for any of the height types recognized by this standard. There are several types of Vertical Datums, and each may place constraints on the Coordinate Axis with which it is combined to create a Vertical CRS. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 Type of a vertical datum. 
		
		 
			 
				 
					 
						 Reference to a source of information specifying the values and meanings of all the allowed string values for this VerticalDatumTypeType. 
					
				
			
		
	
	
	 
	
	 
		 
			 Association to a vertical datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Partially defines the origin of a temporal coordinate reference system. This type restricts the AbstractDatumType to remove the "anchorPoint" and "realizationEpoch" elements. 
		
		 
			 
				 
					 
					 
					 
					 
					 
				
				 
			
		
	
	
	 
		 
			 Defines the origin of a temporal coordinate reference system. This type extends the TemporalDatumRestrictionType to add the "origin" element with the dateTime type. 
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 The date and time origin of this temporal datum. 
		
	
	
	 
	
	 
		 
			 Association to a temporal datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A geodetic datum defines the precise location and orientation in 3-dimensional space of a defined ellipsoid (or sphere) that approximates the shape of the earth, or of a Cartesian coordinate system centered in this ellipsoid (or sphere). 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Association to the prime meridian used by this geodetic datum. 
		
	
	
	 
		 
			 Association to the ellipsoid used by this geodetic datum. 
		
	
	
	 
	
	 
		 
			 Association to a geodetic datum, either referencing or containing the definition of that datum. 
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Basic encoding for prime meridian objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this prime meridian is identified. The meridianName most common value is Greenwich, and that value shall be used when the greenwichLongitude value is zero. 
		
	
	
	 
		 
			 A prime meridian defines the origin from which longitude values are determined.
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this prime meridian. The first meridianID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this prime meridian, including source information. 
						
					
					 
				
			
		
	
	
	 
		 
			 An identification of a prime meridian. 
		
	
	
	 
		 
			 Longitude of the prime meridian measured from the Greenwich meridian, positive eastward. The greenwichLongitude most common value is zero, and that value shall be used when the meridianName value is Greenwich. 
		
	
	
	 
	
	 
		 
			 Association to a prime meridian, either referencing or containing the definition of that meridian. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Basic encoding for ellipsoid objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this ellipsoid is identified. 
		
	
	
	 
		 
			 An ellipsoid is a geometric figure that can be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.
		
		 
			 
				 
					 
						 
							 Set of alternative identifications of this ellipsoid. The first ellipsoidID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this ellipsoid, including source information. 
						
					
					 
					 
				
			
		
	
	
	 
		 
			 An identification of an ellipsoid. 
		
	
	
	 
		 
			 Length of the semi-major axis of the ellipsoid, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet. 
		
	
	
	 
	
	 
		 
			 Association to an ellipsoid, either referencing or containing the definition of that ellipsoid. 
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			 Definition of the second parameter that defines the shape of an ellipsoid. An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.
		
		 
			 
			 
			 
		
	
	
	 
		 
			 Inverse flattening value of the ellipsoid. Value is a scale factor (or ratio) that has no physical unit. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a scale factor, such as percent, permil, or parts-per-million. 
		
	
	
	 
		 
			 Length of the semi-minor axis of the ellipsoid. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet. 
		
	
	
	 
		 
			 The ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere. 
		
		 
			 
				 
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/defaultStyle.xsd
 
	 
		 defaultStyle.xsd
		 
			 defaultStyle.xsd
			 3.1.0
			 
			 Default Style schema for GML 3.1.0
			 Copyright (c) 2001-2003 OGC, All Rights Reserved.
			 reference to ISO Specifications
		
	
	
	 
	 
	
	 
		 
			 Top-level property. Used in application schemas to "attach" the styling information to GML data. The link between the data and the style should be established through this property only.
		
	
	
	 
		 
			 [complexType of] Top-level property. Used in application schemas to "attach" the styling information to GML data. The link between the data and the style should be established through this property only.
		
		 
			 
		
		 
		 
	
	
	 
		 
			 The value of the top-level property. It is an abstract element. Used as the head element of the substitution group for extensibility purposes.
		
	
	
	 
		 
			 [complexType of] The value of the top-level property. It is an abstract element. Used as the head element of the substitution group for extensibility purposes.
		
		 
			 
		
	
	
	 
		 
			 Predefined concrete value of the top-level property. Encapsulates all other styling information.
		
	
	
	 
		 
			 [complexType of] Predefined concrete value of the top-level property. Encapsulates all other styling information.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 
		
	
	
	 
		 
			 
		
		 
			 
		
		 
		 
	
	
	 
		 
			 The style descriptor for features.
		
	
	
	 
		 
			 [complexType of] The style descriptor for features.
		
		 
			 
				 
					 
					 
					 
					 
				
				 
				 
				 
			
		
	
	
	 
		 
			 Used to specify the grammar of the feature query mechanism.
		
		 
			 
			 
			 
		
	
	
	 
		 
			 Base complex type for geometry, topology, label and graph styles.
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
		 
			 
		
	
	
	 
		 
			 
		
		 
			 
		
		 
		 
	
	
	 
		 
			 The style descriptor for geometries of a feature.
		
	
	
	 
		 
			 [complexType of] The style descriptor for geometries of a feature.
		
		 
			 
				 
					 
						 
						 
							 
								 deprecated
								 Deprecated in GML version 3.1.0. Use symbol with inline content instead.
							
						
					
					 
				
				 
				 
			
		
	
	
	 
		 
			 
		
	
	
	 
		 
			 
		
		 
			 
		
		 
		 
	
	
	 
		 
			 The style descriptor for topologies of a feature. Describes individual topology elements styles.
		
	
	
	 
		 
			 [complexType of] The style descriptor for topologies of a feature. Describes individual topology elements styles.
		
		 
			 
				 
					 
						 
						 
							 
								 deprecated
								 Deprecated in GML version 3.1.0. Use symbol with inline content instead.
							
						
					
					 
				
				 
				 
			
		
	
	
	 
		 
			 
		
	
	
	 
		 
			 
		
		 
			 
		
		 
		 
	
	
	 
		 
			 The style descriptor for labels of a feature, geometry or topology.
		
	
	
	 
		 
			 [complexType of] The style descriptor for labels of a feature, geometry or topology.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 
		
	
	
	 
		 
			 
		
		 
			 
		
		 
		 
	
	
	 
		 
			 The style descriptor for a graph consisting of a number of features. Describes graph-specific style attributes.
		
	
	
	 
		 
			 [complexType of] The style descriptor for a graph consisting of a number of features. Describes graph-specific style attributes.
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
		 
			 The symbol property. Extends the gml:AssociationType to allow for remote referencing of symbols.
		
	
	
	 
		 
			 [complexType of] The symbol property. Allows for remote referencing of symbols.
		
		 
			 
		
		 
		 
		 
		 
	
	
	 
		 
			 Used to specify the type of the symbol used.
		
		 
			 
			 
			 
		
	
	
	 
		 
			 Label is mixed -- composed of text and XPath expressions used to extract the useful information from the feature.
		
		 
			 
		
		 
	
	
	 
		 
			 Defines the geometric transformation of entities. There is no particular grammar defined for this value.
		
	
	
	 
		 
			 Used to vary individual graphic parameters and attributes of the style, symbol or text.
		
		 
			 
				 
				 
			
		
	
	
	 
		 
			 Graph-specific styling property.
		
		 
			 
			 
		
	
	
	 
		 
			 Graph-specific styling property.
		
		 
			 
			 
		
	
	
	 
		 
			 Graph-specific styling property.
		
		 
			 
			 
		
	
	
	 
		 
			 Graph-specific styling property.
		
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	




05-011 Common CRSs Folder/gml/3.1.1/base/dictionary.xsd
 
	 
		 
		 
			Dictionary schema for GML 3.1.1 
			Components to support the lists of definitions.  
    
	
	
	 
	
	
	
	
	 
		 
			 This content model group makes it easier to construct types that 
      derive from DefinitionType and its descendents "by restriction".  
      A reference to the group saves having to enumerate the standard definition properties. 
      See definition of StandardObjectProperties for more documentation
		
		 
			 
			 
			 
		
	
	
	 
	
	 
		 
			 A definition, which can be included in or referenced by a dictionary. In this extended type, the inherited "description" optional element can hold the definition whenever only text is needed. The inherited "name" elements can provide one or more brief terms for which this is the definition. The inherited "metaDataProperty" elements can be used to reference or include more information about this definition.  
The gml:id attribute is required - it must be possible to reference this definition using this handle.  
		
		 
			 
				 
					 
					 
					 
				
				 
			
		
	
	
	 
	 
	
	 
		 
			 A non-abstract bag that is specialized for use as a dictionary which contains a set of definitions. These definitions are referenced from other places, in the same and different XML documents. In this restricted type, the inherited optional "description" element can be used for a description of this dictionary. The inherited optional "name" element can be used for the name(s) of this dictionary. The inherited "metaDataProperty" elements can be used to reference or contain more information about this dictionary. The inherited required gml:id attribute allows the dictionary to be referenced using this handle. 
		
		 
			 
				 
					 
						 
							 
								 An entry in this dictionary. The content of an entry can itself be a lower level dictionary or definition collection. This element follows the standard GML property model, so the value may be provided directly or by reference. Note that if the value is provided by reference, this definition does not carry a handle (gml:id) in this context, so does not allow external references to this specific entry in this context. When used in this way the referenced definition will usually be in a dictionary in the same XML document. 
							
						
						 
							 
								 An identified reference to a remote entry in this dictionary, to be used when this entry should be identified to allow external references to this specific entry. 
							
						
					
				
			
		
	
	
	 
	 
	
	 
		 
			 An entry in a dictionary of definitions. An instance of this type contains or refers to a definition object.  

The number of definitions contained in this dictionaryEntry is restricted to one, but a DefinitionCollection or Dictionary that contains multiple definitions can be substituted if needed. Specialized descendents of this dictionaryEntry might be restricted in an application schema to allow only including specified types of definitions as valid entries in a dictionary. 
		
		 
			 
				 
					 This element in a dictionary entry contains the actual definition. 
				
			
		
		 
			 
				 A non-identified reference to a remote entry in this dictionary, to be used when this entry need not be identified to allow external references to this specific entry. The remote entry referenced will usually be in a dictionary in the same XML document. This element will usually be used in dictionaries that are inside of another dictionary. 
			
		
	
	
	 
	
	 
		 
			 An entry in a dictionary of definitions that contains a GML object which references a remote definition object. This entry is expected to be convenient in allowing multiple elements in one XML document to contain short (abbreviated XPointer) references, which are resolved to an external definition provided in a Dictionary element in the same XML document. Specialized descendents of this dictionaryEntry might be restricted in an application schema to allow only including specified types of definitions as valid entries in a dictionary. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 A proxy entry in a dictionary of definitions. An element of this type contains a reference to a remote definition object. This entry is expected to be convenient in allowing multiple elements in one XML document to contain short (abbreviated XPointer) references, which are resolved to an external definition provided in a Dictionary element in the same XML document. 
		
		 
			 
				 
					 
						 
							 A reference to a remote entry in this dictionary, used when this dictionary entry is identified to allow external references to this specific entry. The remote entry referenced can be in a dictionary in the same or different XML document. 
						
					
				
			
		
	
	
	 
	




05-011 Common CRSs Folder/gml/3.1.1/base/direction.xsd
 
	 
		 direction.xsd
		 
			This schema defines "direction" element and type.
   		    	Copyright (c) 2002-2004 OGC, All Rights Reserved.
 
	
	
	 
	
	
	 
	
	 
		 
			 
		
		 
			 
			 
			 
			 
		
		 
	
	
	 
	
	 
		 
			 Direction expressed as a vector, either using components, or using angles.  
		
		 
			 
			 
				 
				 
			
		
	
	
	 
	
	 
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/dynamicFeature.xsd
 
	 
		 
		      
    Basic support for tracking moving objects and objects with changing state.     
		    	Copyright (c) 2002-2004 OGC, All Rights Reserved.
    
	
	
	 
	 
	
	 
	 
	
	 
	
	 
		 
			 
        A timeslice encapsulates the time-varying properties of a dynamic feature--it 
        must be extended to represent a timestamped projection of a feature. The dataSource 
        property describes how the temporal data was acquired.
      
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
             This type encapsulates various dynamic properties of moving objects        
             (points, lines, regions). It is useful for dealing with features whose        
             geometry or topology changes over time.       
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
        The history relationship associates a feature with a sequence of TimeSlice instances.
      
		
		 
			 
		
	
	
	 
	
	 
		 
			        The track of a moving object is a sequence of specialized timeslices        that indicate the status of the object.       
		
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
			 
			 
		
	
	
	 
		 
			 A dynamic feature may possess a history and/or a timestamp.
		
		 
			 
				 
			
		
	
	
	 
		 
			 A dynamic feature collection may possess a history and/or a timestamp.
		
		 
			 
				 
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/feature.xsd
 
	 
		 
		 
     		      GML Feature schema. 		      
     		      Copyright (c) 2001-2004 OGC, All Rights Reserved. 
	      
	
	
	
	
	 
	 
	
	 
	
	 
		 
			  An abstract feature provides a set of common properties, including id, metaDataProperty, name and description inherited from AbstractGMLType, plus boundedBy.    A concrete feature type must derive from this type and specify additional  properties in an application schema. A feature must possess an identifying attribute ('id' - 'fid' has been deprecated).  
		
		 
			 
				 
					 
					 
						 
							 deprecated
							 deprecated in GML version 3.1
						
					
					
				
			
		
	
	
	
	 
	
	 
		 
			 Bounding shape.
		
		 
			 
				 
				 
			
		
	
	
	 
	
	 
		 
			 Envelope that includes also a temporal extent.
		
		 
			 
				 
					 
				
				 
			
		
	
	
	
	 
	 
	
	 
		 
			 Container for a feature - follow gml:AssociationType pattern.
		
		 
			 
		
		 
	
	
	
	 
	
	 
		 
			 Container for features - follow gml:ArrayAssociationType pattern.
		
		 
			 
		
	
	
	
	 
	
	 
		 
			  A feature collection contains zero or more features.  
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			  Concrete generic feature collection.  
		
		 
			 
		
	
	
	
	 
	 
	
	
	 
	 
	 
	 
	 
	
	
	 
		 
			  Makes boundedBy mandatory
		
		 
			 
				 
					 
					 
					 
						 
							 deprecated
							 deprecated in GML version 3.1
						
					
				
			
		
	
	
	 
		 
			 Deprecated in GML 3.1.0
		
	
	
	 
		 
			 Convenience property for generalised location.  
      A representative location for plotting or analysis.  
      Often augmented by one or more additional geometry properties with more specific semantics.  
			 Deprecated in GML 3.1.0
		
		 
			 
				 
				 
				 
				 
			
		
		 
	
	
	 
		 
			 Deprecated in GML 3.1.0
		
	
	
	 
		 
			 G-XML component
			 Deprecated in GML 3.1.0
		
		 
			 
				 
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/geometryAggregates.xsd
 
	 
		 geometryAggregates.xsd
		 
			Copyright (c) 2001-2004 OGC, All Rights Reserved.
    
	
	 
	
	
	
	
	 
		 
			 The "_GeometricAggregate" element is the abstract head of the substituition group for all geometric aggremates.
		
	
	
	 
		 
			 This is the abstract root type of the geometric aggregates.
		
		 
			 
		
	
	
	 
	
	 
		 
			 
				A geometry collection must include one or more geometries, referenced through geometryMember elements.
			
		
		 
			 
				 
					 
						 The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.
					
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a geometric aggregate via the XLink-attributes or contains the "multi geometry" element. multiGeometryProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _GeometricAggregate.
		
	
	
	 
		 
			 A property that has a geometric aggregate as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
			
		
	
	
	 
	
	 
		 
			 
				A MultiPoint is defined by one or more Points, referenced through pointMember elements.
			
		
		 
			 
				 
					 
						 The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.
					
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a point aggregate via the XLink-attributes or contains the "multi point" element. multiPointProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiPoint.
		
	
	
	 
		 
			 A property that has a collection of points as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
			
		
	
	
	 
	
	 
		 
			 
				A MultiCurve is defined by one or more Curves, referenced through curveMember elements.
			
		
		 
			 
				 
					 
						 The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.
					
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a curve aggregate via the XLink-attributes or contains the "multi curve" element. multiCurveProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiCurve.
		
	
	
	 
		 
			 A property that has a collection of curves as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				
			
		
	
	
	 
	
	 
		 
			 
				A MultiSurface is defined by one or more Surfaces, referenced through surfaceMember elements. 
			
		
		 
			 
				 
					 
						 The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.
					
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a surface aggregate via the XLink-attributes or contains the "multi surface" element. multiSurfaceProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiSurface.
		
	
	
	 
		 
			 A property that has a collection of surfaces as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				
			
		
	
	
	 
	
	 
		 
			 
				A MultiSolid is defined by one or more Solids, referenced through solidMember elements. 
			
		
		 
			 
				 
					 
						 The members of the geometric aggregate can be specified either using the "standard" property or the array property style. It is also valid to use both the "standard" and the array property style in the same collection.
NOTE: Array properties cannot reference remote geometry elements.
					
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a solid aggregate via the XLink-attributes or contains the "multi solid" element. multiSolidProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for MultiSolid.
		
	
	
	 
		 
			 A property that has a collection of solids as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				
			
		
	
	
	
	
	 
		 
			 Deprecated with GML 3.0 and included for backwards compatibility with GML 2. Use the "MultiSurface" element instead.
		
	
	
	 
		 
			 Deprecated with GML 3.0 and included for backwards compatibility with GML 2. Use the "MultiCurve" element instead.
		
	
	
	 
		 
			 
				A MultiLineString is defined by one or more LineStrings, referenced through lineStringMember elements. Deprecated with GML version 3.0. Use MultiCurveType instead.
			
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use MultiCurvePropertyType instead.
A property that has a collection of line strings as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				
			
		
	
	
	 
		 
			 
				A MultiPolygon is defined by one or more Polygons, referenced through polygonMember elements. Deprecated with GML version 3.0. Use MultiSurfaceType instead.
			
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use MultiSurfacePropertyType instead.

A property that has a collection of polygons as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				
			
		
	
	
	
	 
		 
			 This property element either references a geometry element via the XLink-attributes or contains the geometry element.
		
	
	 
		 
			 This property element contains a list of geometry elements. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 This property element either references a Point via the XLink-attributes or contains the Point element.
		
	
	 
		 
			 This property element contains a list of points. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 This property element contains a list of curves. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for "_Surface".
		
	
	 
		 
			 This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.
		
	
	 
		 
			 This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element which is substitutable for "_Solid".
		
	
	 
		 
			 This property element contains a list of solids. The order of the elements is significant and shall be preserved when processing the array.
		
	
	
	 
	 
	 
	 
	 
	 
	
	 
		 
			 deprecated
			 Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "curveMember" instead.
This property element either references a line string via the XLink-attributes or contains the line string element.
		
	
	 
		 
			 deprecated
			 Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "curveMember" instead.
This property element either references a line string via the XLink-attributes or contains the line string element.
		
	
	 
		 
			 deprecated
			 Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "surfaceMember" instead.
This property element either references a polygon via the XLink-attributes or contains the polygon element.
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/geometryBasic0d1d.xsd
 
	 
		 geometryBasic0d1d.xsd
		 
			 Schematron validation
			 
				 
					 The presence of a dimension attribute implies the presence of the srsName attribute.
					 The presence of an axisLabels attribute implies the presence of the srsName attribute.
					 The presence of an uomLabels attribute implies the presence of the srsName attribute.
					 The presence of an uomLabels attribute implies the presence of the axisLabels attribute and vice versa.
				
			
			 
				 
					 The presence of a count attribute implies the presence of the dimension attribute.
				
			
		
		 Copyright (c) 2001-2004 OGC, All Rights Reserved.
	
	
	 
		 
			 This includes not only measures.xsd, but also units.xsd, gmlBase.xsd and basicTypes.xsd.
		
	
	
	
	
	 
		 
			 The "_Geometry" element is the abstract head of the substituition group for all geometry elements of GML 3. This 
			includes pre-defined and user-defined geometry elements. Any geometry element must be a direct or indirect extension/restriction 
			of AbstractGeometryType and must be directly or indirectly in the substitution group of "_Geometry".
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 A geometric property can either be any geometry element encapsulated in an element of this type or an XLink reference 
			to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Note that either 
			the reference or the contained element must be given, but not both or none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference 
				remote resources (including those elsewhere in the same document). A simple link element can be constructed by 
				including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation 
				of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create 
				sophisticated links between resources; such links can be used to reference remote properties. A simple link element 
				can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by 
				including the gml:AssociationAttributeGroup.
			
		
	
	
	 
		 
			 A container for an array of geometry elements. The elements are always contained in the array property, 
			referencing geometry elements or arrays of geometry elements is not supported.
		
		 
			 
		
	
	
	 
		 
			 All geometry elements are derived directly or indirectly from this abstract supertype. A geometry element may 
			have an identifying attribute ("gml:id"), a name (attribute "name") and a description (attribute "description"). It may be associated 
			with a spatial reference system (attribute "srsName"). The following rules shall be adhered: - Every geometry type shall derive 
			from this abstract type. - Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the 
			substitution group of _Geometry.
		
		 
			 
				 
					 
						 This attribute is included for backward compatibility with GML 2 and is deprecated with GML 3. 
						This identifer is superceded by "gml:id" inherited from AbstractGMLType. The attribute "gid" should not be used 
						anymore and may be deleted in future versions of GML without further notice.
					
				
				 
			
		
	
	
	 
		 
			 Optional reference to the CRS used by this geometry, with optional additional information to simplify use when 
			a more complete definition of the CRS is not needed.
		
		 
			 
				 In general this reference points to a CRS instance of gml:CoordinateReferenceSystemType 
				(see coordinateReferenceSystems.xsd). For well known references it is not required that the CRS description exists at the 
				location the URI points to. If no srsName attribute is given, the CRS must be specified as part of the larger context this 
				geometry element is part of, e.g. a geometric element like point, curve, etc. It is expected that this attribute will be specified 
				at the direct position level only in rare cases.
			
		
		 
			 
				 The "srsDimension" is the length of coordinate sequence (the number of entries in the list). This dimension is 
				specified by the coordinate reference system. When the srsName attribute is omitted, this attribute shall be omitted.
			
		
		 
	
	
	 
		 
			 Optional additional and redundant information for a CRS to simplify use when a more complete definition of the 
			CRS is not needed. This information shall be the same as included in the more complete definition of the CRS, referenced by the 
			srsName attribute. When the srsName attribute is included, either both or neither of the axisLabels and uomLabels attributes 
			shall be included. When the srsName attribute is omitted, both of these attributes shall be omitted.
		
		 
			 
				 Ordered list of labels for all the axes of this CRS. The gml:axisAbbrev value should be used for these axis 
				labels, after spaces and forbiddden characters are removed. When the srsName attribute is included, this attribute is optional. 
				When the srsName attribute is omitted, this attribute shall also be omitted.
			
		
		 
			 
				 Ordered list of unit of measure (uom) labels for all the axes of this CRS. The value of the string in the 
				gml:catalogSymbol should be used for this uom labels, after spaces and forbiddden characters are removed. When the 
				axisLabels attribute is included, this attribute shall also be included. When the axisLabels attribute is omitted, this attribute 
				shall also be omitted.
			
		
	
	
	 
		 
			 The "_GeometricPrimitive" element is the abstract head of the substituition group for all (pre- and user-defined) 
			geometric primitives.
		
	
	
	 
		 
			 This is the abstract root type of the geometric primitives. A geometric primitive is a geometric object that is not 
			decomposed further into other primitives in the system. All primitives are oriented in the direction implied by the sequence of their 
			coordinate tuples.
		
		 
			 
		
	
	
	 
		 
			 A property that has a geometric primitive as its value domain can either be an appropriate geometry element 
			encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry 
			elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither 
			both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote 
				resources (including those elsewhere in the same document). A simple link element can be constructed by including a 
				specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide 
				Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between 
				resources; such links can be used to reference remote properties. A simple link element can be used to implement pointer 
				functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
			
		
	
	
	
	
	 
	
	 
		 
			 A Point is defined by a single coordinate tuple.
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the direct poisiton of a point. 1. The "pos" element is of type 
							DirectPositionType.
						
						 
						 
							 
								 Deprecated with GML version 3.1.0 for coordinates with ordinate values that are numbers. Use "pos" 
								instead. The "coordinates" element shall only be used for coordinates with ordinates that require a string 
								representation, e.g. DMS representations.
							
						
						 
							 
								 Deprecated with GML version 3.0. Use "pos" instead. The "coord" element is included for 
								backwards compatibility with GML 2.
							
						
					
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a point via the XLink-attributes or contains the point element. pointProperty 
			is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that 
			is substitutable for Point.
		
	
	
	 
		 
			 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
		
	
	
	 
		 
			 A property that has a point as its value domain can either be an appropriate geometry element encapsulated in an 
			element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located 
			elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote 
				resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific 
				set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. 
				XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be 
				used to reference remote properties. A simple link element can be used to implement pointer functionality, and this functionality has 
				been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
			
		
	
	
	 
	
	 
		 
			 A container for an array of points. The elements are always contained in the array property, referencing geometry 
			elements or arrays of geometry elements is not supported.
		
		 
			 
		
	
	
	
	
	 
		 
			 The "_Curve" element is the abstract head of the substituition group for all (continuous) curve elements.
		
	
	
	 
		 
			 An abstraction of a curve to support the different levels of complexity. The curve can always be viewed as a geometric 
			primitive, i.e. is continuous.
		
		 
			 
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the 
			predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is 
			substitutable for _Curve.
		
	
	
	 
		 
			 A property that has a curve as its value domain can either be an appropriate geometry element encapsulated in an 
			element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere 
			in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote 
				resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific 
				set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. 
				XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used 
				to reference remote properties. A simple link element can be used to implement pointer functionality, and this functionality has been built 
				into various GML 3 elements by including the gml:AssociationAttributeGroup.
			
		
	
	
	 
	
	 
		 
			 A container for an array of curves. The elements are always contained in the array property, referencing geometry elements 
			or arrays of geometry elements is not supported.
		
		 
			 
		
	
	
	 
	
	 
		 
			 A LineString is a special curve that consists of a single segment with linear interpolation. It is defined by two or more coordinate 
			tuples, with linear interpolation between them. It is backwards compatible with the LineString of GML 2, GM_LineString of ISO 19107 is 
			implemented by LineStringSegment.
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a line string. 1. A sequence of "pos" 
							(DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part 
							of this curve, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference 
							another point defined outside of this curve (reuse of existing points). 2. The "posList" element allows for a compact way to 
							specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong 
							to this curve only. The number of direct positions in the list must be at least two.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility 
									with GML 3.0.0.
								
							
							 
								 
									 Deprecated with GML version 3.0. Use "pos" instead. The "coord" element is included for backwards 
									compatibility with GML 2.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
				
			
		
	
	
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 DirectPosition instances hold the coordinates for a position within some coordinate reference system (CRS). Since 
			DirectPositions, as data types, will often be included in larger objects (such as geometry elements) that have references to CRS, the 
			"srsName" attribute will in general be missing, if this particular DirectPosition is included in a larger element with such a reference to a 
			CRS. In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.
		
		 
			 
				 
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 DirectPositionList instances hold the coordinates for a sequence of direct positions within the same coordinate 
			reference system (CRS).
		
		 
			 
				 
				 
					 
						 "count" allows to specify the number of direct positions in the list. If the attribute count is present then 
						the attribute srsDimension shall be present, too.
					
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 Vector instances hold the compoents for a (usually spatial) vector within some coordinate reference system (CRS). 
			Since Vectors will often be included in larger objects that have references to CRS, the "srsName" attribute may be missing. 
			In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.

			Note that this content model is the same as DirectPositionType, but is defined separately to reflect the distinct semantics, and to avoid validation problems. SJDC 2004-12-02
			
		
		 
			 
				 
			
		
	
	
	 
		 
			 A geometric position represented either by a DirectPosition or a Point.
		
		 
			 
			 
		
	
	
	 
		 
			 A list of geometric positions represented either by a DirectPosition or a Point.
		
		 
			 
			 
		
	
	
	 
		 
			 Deprecated with GML version 3.1.0.
		
	
	
	
	
	 
	
	 
		 
			 Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct 
			position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), 
			the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the 
			envelope).
		
		 
			 
				 
				 
			
			 
				 
					 deprecated
					 deprecated with GML version 3.0
				
			
			 
				 
					 deprecated
					 Deprecated with GML version 3.1. Use the explicit properties "lowerCorner" and "upperCorner" instead.
				
			
			 
				 
					 Deprecated with GML version 3.1.0. Use the explicit properties "lowerCorner" and "upperCorner" instead.
				
			
		
		 
	
	
	
	
	
	 
		 
			 Deprecated with GML 3.0 and included for backwards compatibility with GML 2. Use the "pos" element instead.
		
	
	 
		 
			 Represents a coordinate tuple in one, two, or three dimensions. Deprecated with GML 3.0 and replaced by 
			DirectPositionType.
		
		 
			 
			 
			 
		
	
	
	 
		 
			 Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "curveProperty" instead. This 
			property element either references a line string via the XLink-attributes or contains the line string element.
		
	
	
	 
		 
			 This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use 
			CurvePropertyType instead. A property that has a line string as its value domain can either be an appropriate geometry element encapsulated 
			in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere 
			in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources 
				(including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. 
				The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to 
				be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties. 
				A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by 
				including the gml:AssociationAttributeGroup.
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/geometryBasic2d.xsd
 
	 
		 geometryBasic2d.xsd
		 
			Copyright (c) 2001-2004 OGC, All Rights Reserved.
    
	
	 
	
	
	
	 
		 
			 The "_Surface" element is the abstract head of the substituition group for all (continuous) surface elements.
		
	
	
	 
		 
			 
				An abstraction of a surface to support the different levels of complexity. A surface is always a continuous region of a plane.
			
		
		 
			 
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _Surface.
		
	
	
	 
		 
			 A property that has a surface as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				
			
		
	
	
	 
	
	 
		 
			 A container for an array of surfaces. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.
		
		 
			 
		
	
	
	 
	
	 
		 
			 A Polygon is a special surface that is defined by a single surface patch. The boundary of this patch is coplanar and the polygon uses planar interpolation in its interior. It is backwards compatible with the Polygon of GML 2, GM_Polygon of ISO 19107 is implemented by PolygonPatch.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	
	
	 
		 
			 The "_Ring" element is the abstract head of the substituition group for all closed boundaries of a surface patch.
		
	
	
	 
		 
			 
				An abstraction of a ring to support surface boundaries of different complexity.
			
		
		 
			 
		
	
	
	 
		 
			 A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.
		
	
	 
		 
			 A boundary of a surface consists of a number of rings. The "interior" rings seperate the surface / surface patch from the area enclosed by the rings.
		
	
	 
		 
			 
				Deprecated with GML 3.0, included only for backwards compatibility with GML 2. Use "exterior" instead.
			
		
	
	 
		 
			 
				Deprecated with GML 3.0, included only for backwards compatibility with GML 2. Use "interior" instead.
			
		
	
	
	 
		 
			 
			        Encapsulates a ring to represent the surface boundary property of a surface.
			
		
		 
			 
		
	
	
	 
	
	 
		 
			 A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates must be coincident.
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a linear ring.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this ring, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this ring (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this ring only. The number of direct positions in the list must be at least four.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
						 
							 
								 Deprecated with GML version 3.0 and included for backwards compatibility with GML 2. Use "pos" elements instead.
							
						
					
				
			
		
	
	
	 
		 
			 
			        Encapsulates a ring to represent properties in features or geometry collections.
			
		
		 
			 
		
	
	
	
	
	 
		 
			 Deprecated with GML 3.0 and included only for backwards compatibility with GML 2.0. Use "surfaceProperty" instead.
This property element either references a polygon via the XLink-attributes or contains the polygon element.
		
	
	
	 
		 
			 This type is deprecated with GML 3 and shall not be used. It is included for backwards compatibility with GML 2. Use SurfacePropertyType instead.
A property that has a polygon as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/geometryComplexes.xsd
 
	 
		 geometryComplexes.xsd
		 
			Copyright (c) 2001-2004 OGC, All Rights Reserved.
    
	
	 
	
	 
	
	 
		 
			 
				A CompositeCurve is defined by a sequence of (orientable) curves such that the each curve in the sequence terminates at the start point of the subsequent curve in the list.
			
		
		 
			 
				 
					 
						 
							 This element references or contains one curve in the composite curve. The curves are contiguous, the collection of curves is ordered.
NOTE: This definition allows for a nested structure, i.e. a CompositeCurve may use, for example, another CompositeCurve as a curve member.
						
					
				
			
		
	
	
	 
		 
			 
		
		 
	
	
	 
	
	 
		 
			 A CompositeSurface is defined by a set of orientable surfaces. A composite surface is geometry type with all the geometric properties of a (primitive) surface. Essentially, a composite surface is a collection of surfaces that join in pairs on common boundary curves and which, when considered as a whole, form a single surface. 
		
		 
			 
				 
					 
						 
							 This element references or contains one surface in the composite surface. The surfaces are contiguous.
NOTE: This definition allows for a nested structure, i.e. a CompositeSurface may use, for example, another CompositeSurface as a member.
						
					
				
			
		
	
	
	 
		 
			 
		
		 
	
	
	 
	
	 
		 
			 
				A composite solid is a geometry type with all the geometric properties of a (primitive) solid. 
				Essentially, a composite solid is a collection of solids that join in pairs on common boundary surfaces and which, when considered as a whole, form a single solid. 
			
		
		 
			 
				 
					 
						 
							 
								 
									 
										 
									
								
							
							 This element references or contains one solid in the composite solid. The solids are contiguous.
NOTE: This definition allows for a nested structure, i.e. a CompositeSolid may use, for example, another CompositeSolid as a member.
						
					
				
			
		
	
	
	 
		 
			 
		
		 
	
	
	
	
	 
	
	 
		 
			 
				A geometric complex.
			
		
		 
			 
				 
					 
				
			
		
	
	
	 
		 
			 A property that has a geometric complex as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
NOTE: The allowed geometry elements contained in such a property (or referenced by it) have to be modelled by an XML Schema choice element since the composites inherit both from geometric complex *and* geometric primitive and are already part of the _GeometricPrimitive substitution group.
		
		 
			 
				 
				 
				 
				 
			
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/geometryPrimitives.xsd
 
	 
		 geometryPrimitives.xsd
		 
			Copyright (c) 2001-2004 OGC, All Rights Reserved.
    
	
	
	 
	
	 
	
	 
		 
			 
				Curve is a 1-dimensional primitive. Curves are continuous, connected, and have a measurable length in terms of the coordinate system. 
				A curve is composed of one or more curve segments. Each curve segment within a curve may be defined using a different interpolation method. The curve segments are connected to one another, with the end point of each segment except the last being the start point of the next segment in the segment list.
				The orientation of the curve is positive.
			
		
		 
			 
				 
					 
						 
							 This element encapsulates the segments of the curve.
						
					
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for "_Curve".
		
	
	
	 
	
	 
		 
			 
				OrientableCurve consists of a curve and an orientation. If the orientation is "+", then the OrientableCurve is identical to the baseCurve. If the orientation is "-", then the OrientableCurve is related to another _Curve with a parameterization that reverses the sense of the curve traversal.
			
		
		 
			 
				 
					 
						 
							 References or contains the base curve (positive orientation).
NOTE: This definition allows for a nested structure, i.e. an OrientableCurve may use another OrientableCurve as its base curve.
						
					
				
				 
					 
						 If the orientation is "+", then the OrientableCurve is identical to the baseCurve. If the orientation is "-", then the OrientableCurve is related to another _Curve with a parameterization that reverses the sense of the curve traversal. "+" is the default value.
					
				
			
		
	
	
	
	
	
	 
		 
			 The "_CurveSegment" element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.
		
	
	
	 
		 
			 
				Curve segment defines a homogeneous segment of a curve.
			
		
		 
		 
			 
				 The attribute "numDerivativesAtStart" specifies the type of continuity between this curve segment and its predecessor. If this is the first curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.
			
		
		 
			 
				 The attribute "numDerivativesAtEnd" specifies the type of continuity between this curve segment and its successor. If this is the last curve segment in the curve, one of these values, as appropriate, is ignored. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.
			
		
		 
			 
				 The attribute "numDerivativesInterior" specifies the type of continuity that is guaranteed interior to the curve. The default value of "0" means simple continuity, which is a mandatory minimum level of continuity. This level is referred to as "C 0 " in mathematical texts. A value of 1 means that the function and its first derivative are continuous at the appropriate end point: "C 1 " continuity. A value of "n" for any integer means the function and its first n derivatives are continuous: "C n " continuity.
NOTE: Use of these values is only appropriate when the basic curve definition is an underdetermined system. For example, line string segments cannot support continuity above C 0 , since there is no spare control parameter to adjust the incoming angle at the end points of the segment. Spline functions on the other hand often have extra degrees of freedom on end segments that allow them to adjust the values of the derivatives to support C 1 or higher continuity.
			
		
	
	
	 
		 
			 This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.
		
	
	
	 
		 
			 A container for an array of curve segments.
		
		 
			 
		
	
	
	 
	
	 
		 
			 
				A LineStringSegment is a curve segment that is defined by two or more coordinate tuples, with linear interpolation between them.
				Note: LineStringSegment implements GM_LineString of ISO 19107.
			
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least two.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
				
				 
					 
						 The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a LineStringSegment the interpolation is fixed as "linear".
					
				
			
		
	
	
	 
	
	 
		 
			 
				An ArcString is a curve segment that uses three-point circular arc interpolation.
			
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least three.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
				
				 
					 
						 The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcString the interpolation is fixed as "circularArc3Points".
					
				
				 
					 
						 The number of arcs in the arc string can be explicitly stated in this attribute. The number of control points in the arc string must be 2 * numArc + 1.
					
				
			
		
	
	
	 
	
	 
		 
			 
				An Arc is an arc string with only one arc unit, i.e. three control points.
			
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be three.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
				
				 
					 
						 An arc is an arc string consiting of a single arc, the attribute is fixed to "1".
					
				
			
		
	
	
	 
	
	 
		 
			 A Circle is an arc whose ends coincide to form a simple closed loop. The "start" and "end" bearing are equal and shall be the bearing for the first controlPoint listed. The three control points must be distinct non-co-linear points for the Circle to be unambiguously defined. The arc is simply extended past the third control point until the first control point is encountered.
		
		 
			 
		
	
	
	 
	
	 
		 
			 
				This variant of the arc computes the mid points of the arcs instead of storing the coordinates directly. The control point sequence consists of the start and end points of each arc plus the bulge.
			
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least two.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
					 
						 
							 The bulge controls the offset of each arc's midpoint. The "bulge" is the real number multiplier for the normal that determines the offset direction of the midpoint of each arc. The length of the bulge sequence is exactly 1 less than the length of the control point array, since a bulge is needed for each pair of adjacent points in the control point array. The bulge is not given by a distance, since it is simply a multiplier for the normal.
The midpoint of the resulting arc is given by: midPoint = ((startPoint + endPoint)/2.0) + bulge*normal
						
					
					 
						 
							 The attribute "normal" is a vector normal (perpendicular) to the chord of the arc, the line joining the first and last
point of the arc. In a 2D coordinate system, there are only two possible directions for the normal, and it is often given as a signed real, indicating its length, with a positive sign indicating a left turn angle from the chord line, and a negative sign indicating a right turn from the chord. In 3D, the normal determines the plane of the arc, along with the start and endPoint of the arc.
The normal is usually a unit vector, but this is not absolutely necessary. If the normal is a zero vector, the geometric object becomes equivalent to the straight line between the two end points. The length of the normal sequence is exactly the same as for the bulge sequence, 1 less than the control point sequence length.
						
					
				
				 
					 
						 The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcStringByBulge the interpolation is fixed as "circularArc2PointWithBulge".
					
				
				 
					 
						 The number of arcs in the arc string can be explicitly stated in this attribute. The number of control points in the arc string must be numArc + 1.
					
				
			
		
	
	
	 
	
	 
		 
			 
				An ArcByBulge is an arc string with only one arc unit, i.e. two control points and one bulge.
			
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be two.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
					 
						 
							 The bulge controls the offset of each arc's midpoint. The "bulge" is the real number multiplier for the normal that determines the offset direction of the midpoint of each arc. The length of the bulge sequence is exactly 1 less than the length of the control point array, since a bulge is needed for each pair of adjacent points in the control point array. The bulge is not given by a distance, since it is simply a multiplier for the normal.
The midpoint of the resulting arc is given by: midPoint = ((startPoint + endPoint)/2.0) + bulge*normal
						
					
					 
						 
							 The attribute "normal" is a vector normal (perpendicular) to the chord of the arc, the line joining the first and last
point of the arc. In a 2D coordinate system, there are only two possible directions for the normal, and it is often given as a signed real, indicating its length, with a positive sign indicating a left turn angle from the chord line, and a negative sign indicating a right turn from the chord. In 3D, the normal determines the plane of the arc, along with the start and endPoint of the arc.
The normal is usually a unit vector, but this is not absolutely necessary. If the normal is a zero vector, the geometric object becomes equivalent to the straight line between the two end points. The length of the normal sequence is exactly the same as for the bulge sequence, 1 less than the control point sequence length.
						
					
				
				 
					 
						 An arc is an arc string consiting of a single arc, the attribute is fixed to "1".
					
				
			
		
	
	
	 
	
	 
		 
			 
				This variant of the arc requires that the points on the arc have to be computed instead of storing the coordinates directly. The control point is the center point of the arc plus the radius and the bearing at start and end. This represenation can be used only in 2D.
			
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) element. The "pos" element contains a center point that is only part of this curve segment, a "pointProperty" element contains a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element can be used to specifiy the coordinates of the center point, too. The number of direct positions in the list must be one.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
					 
						 
							 The radius of the arc.
						
					
					 
						 
							 The bearing of the arc at the start.
						
					
					 
						 
							 The bearing of the arc at the end.
						
					
				
				 
					 
						 The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For an ArcByCenterPoint the interpolation is fixed as "circularArcCenterPointWithRadius".
					
				
				 
					 
						 Since this type describes always a single arc, the attribute is fixed to "1".
					
				
			
		
	
	
	 
	
	 
		 
			 A CircleByCenterPoint is an ArcByCenterPoint with identical start and end angle to form a full circle. Again, this represenation can be used only in 2D.
		
		 
			 
		
	
	
	 
	
	 
		 
			  An offset curve is a curve at a constant
		 distance from the basis curve. They can be useful as a cheap
		 and simple alternative to constructing curves that are offsets	
		 by definition.
		
		
		 
			 
				 
					 
						 
							  offsetBase is a reference to thecurve from which this
							 curve is define	as an offset.
      							
						
					
					 
						 
							  distance is the distance at which the
							 offset curve is generated from the basis curve. In 2D systems, positive distances
							 are to be to the left of the basis curve, and the negative distances are to be to the 
							 right of the basis curve. 
      							
						
					
					 
						 
							  refDistance is used to define the vector
       direction of the offset curve from the basis curve. It can
       be omitted in the 2D case, where the distance can be 
       positive or negative. In that case, distance defines left
       side (positive distance) or right side (negative distance)
       with respect to the tangent to the basis curve.

       In 3D the basis curve shall have a well defined tangent 
       direction for every point. The offset curve at any point 
       in 3D, the basis curve shall have a well-defined tangent
       direction for every point. The offset curve at any point
       (parameter) on the basis curve c is in the direction
       -   -   -         -               
       s = v x t  where  v = c.refDirection()  
       and
       -
       t = c.tangent()
                                                    -
       For the offset direction to be well-defined, v shall not
       on any point of the curve be in the same, or opposite, 
       direction as
       - 
       t.

       The default value of the refDirection shall be the local
       co-ordinate axis vector for elevation, which indicates up for
       the curve in a geographic sense.

       NOTE! If the refDirection is the positive tangent to the
       local elevation axis ("points upward"), then the offset
       vector points to the left of the curve when viewed from
       above.
      
						
					
				
			
		
	
	
	 
	
	 
		 
			  A placement takes a standard geometric
   construction and places it in geographic space. It defines a
   transformation from a constructive parameter space to the 
   co-ordinate space of the co-ordinate reference system being used.  
   Parameter spaces in formulae in this International Standard are 
   given as (u, v) in 2D and(u, v, w) in 3D. Co-ordinate reference 
   systems positions are given in formulae, in this International 
   Standard, by either (x, y) in 2D, or (x, y, z) in 3D.

   Affine placements are defined by linear transformations from 
   parameter space to the target co-ordiante space. 2-dimensional 
   Cartesian parameter space,(u,v) transforms into 3-dimensional co-
   ordinate reference systems,(x,y,z) by using an affine 
   transformation,(u,v)->(x,y,z) which is defined :

	x	ux vx  	x0
			 u	  
	y =	uy vy   + y0
			 v		
	x	uz vz	z0
	
   Then, given this equation, the location element of the 
   AffinePlacement is the direct position (x0, y0, z0), which is the
   target position of the origin in (u, v). The two reference
   directions (ux, uy, uz) and (vx, vy, vz) are the target     
   directions of the unit vectors at the origin in (u, v).
  
		
		 
			 
				 
					  The location property gives 
     the target of the parameter space origin. This is the vector  
    (x0, y0, z0) in the formulae above. 
    
				
			
			 
				 
					  The attribute refDirection gives the    
target directions for the co-ordinate basis vectors of the  
parameter space. These are the columns of the matrix in the 
formulae given above. The number of directions given shall be 
inDimension. The dimension of the directions shall be 
outDimension. 
    
				
			
			 
				 
					  Dimension of the constructive parameter 
     space.
    
				
			
			 
				 
					  Dimension of the co-ordinate space.
    
				
			
		
	
	
	 
	
	 
		 
			  A clothoid, or Cornu's spiral, is plane
   curve whose curvature is a fixed function of its length.
   In suitably chosen co-ordinates it is given by Fresnel's
   integrals.

    x(t) = 0-integral-t cos(AT*T/2)dT    
    
    y(t) = 0-integral-t sin(AT*T/2)dT
   
   This geometry is mainly used as a transition curve between
   curves of type straight line to circular arc or circular arc
   to circular arc. With this curve type it is possible to 
   achieve a C2-continous transition between the above mentioned
   curve types. One formula for the Clothoid is A*A = R*t where
   A is constant, R is the varying radius of curvature along the
   the curve and t is the length along and given in the Fresnel 
   integrals.     
  
		
		 
			 
				 
					 
						 
							 
								 
									 
										  The "refLocation" is an affine mapping 
          that places  the curve defined by the Fresnel Integrals  
          into the co-ordinate reference system of this object.
         
									
								
							
						
					
					 
						 
							 The element gives the value for the
       constant in the Fresnel's integrals.
      
						
					
					 
						 
							 The startParameter is the arc length
       distance from the inflection point that will be the start
       point for this curve segment. This shall be lower limit
       used in the Fresnel integral and is the value of the
       constructive parameter of this curve segment at its start
       point. The startParameter can either be positive or
       negative. 
       NOTE! If 0.0 (zero), lies between the startParameter and
       the endParameter of the clothoid, then the curve goes
       through the clothoid's inflection point, and the direction
       of its radius of curvature, given by the second
       derivative vector, changes sides with respect to the
       tangent vector. The term length distance for the
      
						
					
					 
						 
							 The endParameter is the arc length
       distance from the inflection point that will be the end
       point for this curve segment. This shall be upper limit
       used in the Fresnel integral and is the value of the
       constructive parameter of this curve segment at its
       start point. The startParameter can either be positive
       or negative.
      
						
					
				
			
		
	
	
	 
	
	 
		 
			  A GeodesicString consists of sequence of
   geodesic segments. The type essentially combines a sequence of
   Geodesic into a single object.
   The GeodesicString is computed from two or more positions and an
   interpolation using geodesics defined from the geoid (or 
   ellipsoid) of the co-ordinate reference system being used.
  
		
		 
			 
				 
					 
					 
				
				 
					 
						 The attribute "interpolation" specifies the
     curve interpolation mechanism used for this segment. This
     mechanism uses the control points and control parameters to
     determine the position of this curve segment. For an 
     GeodesicString the interpolation is fixed as "geodesic".
    
					
				
			
		
	
	
	 
	
	 
		 
			  A Geodesic consists of two distinct
   positions joined by a geodesic curve. The control points of
   a Geodesic shall lie on the geodesic between its start
   point and end points. Between these two points, a geodesic
   curve defined from ellipsoid or geoid model used by the
   co-ordinate reference systems may be used to interpolate
   other positions. Any other point in the controlPoint array
   must fall on this geodesic.	
  
		
		 
			 
		
	
	
	 
	
	 
		 
			 
				Cubic splines are similar to line strings in that they are a sequence of segments each with its own defining function. A cubic spline uses the control points and a set of derivative parameters to define a piecewise 3rd degree polynomial interpolation. Unlike line-strings, the parameterization by arc length is not necessarily still a polynomial. 
				The function describing the curve must be C2, that is, have a continuous 1st and 2nd derivative at all points, and pass through the controlPoints in the order given. Between the control points, the curve segment is defined by a cubic polynomial. At each control point, the polynomial changes in such a manner that the 1st and 2nd derivative vectors are the same from either side. The control parameters record must contain vectorAtStart, and vectorAtEnd which are the unit tangent vectors at controlPoint[1] and controlPoint[n] where n = controlPoint.count. 
				Note: only the direction of the vectors is relevant, not their length.
			
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only. The number of direct positions in the list must be at least three.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
					 
						 
							 "vectorAtStart" is the unit tangent vector at the start point of the spline.
						
					
					 
						 
							 "vectorAtEnd" is the unit tangent vector at the end point of the spline.
						
					
				
				 
					 
						 The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a CubicSpline the interpolation is fixed as "cubicSpline".
					
				
				 
					 
						 The degree for a cubic spline is "3".
					
				
			
		
	
	
	 
		 
			 A knot is a breakpoint on a piecewise spline curve.
		
		 
			 
				 
					 The property "value" is the value of the parameter at the knot of the spline. The sequence of knots shall be a non-decreasing sequence. That is, each knot's value in the sequence shall be equal to or greater than the previous knot's value. The use of equal consecutive knots is normally handled using the multiplicity.
				
			
			 
				 
					 The property "multiplicity" is the multiplicity of this knot used in the definition of the spline (with the same weight).
				
			
			 
				 
					 The property "weight" is the value of the averaging weight used for this knot of the spline.
				
			
		
	
	
	 
		 
			 
			        Encapsulates a knot to use it in a geometric type.
			
		
		 
			 
		
	
	
	 
	
	 
		 
			 A B-Spline is a piecewise parametric polynomial or rational curve described in terms of control points and basis functions. Knots are breakpoints on the curve that connect its pieces. They are given as a non-decreasing sequence of real numbers. If the weights in the knots are equal then it is a polynomial spline. The degree is the algebraic degree of the basis functions. 
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
					 
						 
							 The attribute "degree" shall be the degree of the polynomial used for interpolation in this spline.
						
					
					 
						 
							 The property "knot" shall be the sequence of distinct knots used to define the spline basis functions.
						
					
				
				 
					 
						 The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a BSpline the interpolation can be either "polynomialSpline" or "rationalSpline", default is "polynomialSpline".
					
				
				 
					 
						 The attribute isPolynomial is set to true if this is a polynomial spline.
					
				
				 
					 
						 The attribute "knotType" gives the type of knot distribution used in defining this spline. This is for information only
and is set according to the different construction-functions.
					
				
			
		
	
	
	 
	
	 
		 
			 Bezier curves are polynomial splines that use Bezier or Bernstein polynomials for interpolation purposes. It is a special case of the B-Spline curve with two knots.
		
		 
			 
				 
					 
						 
							 GML supports two different ways to specify the control points of a curve segment.
1. A sequence of "pos" (DirectPositionType) or "pointProperty" (PointPropertyType) elements. "pos" elements are control points that are only part of this curve segment, "pointProperty" elements contain a point that may be referenced from other geometry elements or reference another point defined outside of this curve segment (reuse of existing points).
2. The "posList" element allows for a compact way to specifiy the coordinates of the control points, if all control points are in the same coordinate reference systems and belong to this curve segment only.
						
						 
							 
							 
							 
								 
									 Deprecated with GML version 3.1.0. Use "pointProperty" instead. Included for backwards compatibility with GML 3.0.0.
								
							
						
						 
						 
							 
								 Deprecated with GML version 3.1.0. Use "posList" instead.
							
						
					
					 
						 
							 The attribute "degree" shall be the degree of the polynomial used for interpolation in this spline.
						
					
					 
						 
							 The property "knot" shall be the sequence of distinct knots used to define the spline basis functions.
						
					
				
				 
					 
						 The attribute "interpolation" specifies the curve interpolation mechanism used for this segment. This mechanism
uses the control points and control parameters to determine the position of this curve segment. For a Bezier the interpolation is fixed as "polynomialSpline".
					
				
				 
					 
						 The attribute isPolynomial is set to true as this is a polynomial spline.
					
				
				 
					 
						 The property "knotType" is not relevant for Bezier curve segments.
					
				
			
		
	
	
	 
	
	 
		 
			 
				A Surface is a 2-dimensional primitive and is composed of one or more surface patches. The surface patches are connected to one another.
				The orientation of the surface is positive ("up"). The orientation of a surface chooses an "up" direction through the choice of the upward normal, which, if the surface is not a cycle, is the side of the surface from which the exterior boundary appears counterclockwise. Reversal of the surface orientation reverses the curve orientation of each boundary component, and interchanges the conceptual "up" and "down" direction of the surface. If the surface is the boundary of a solid, the "up" direction is usually outward. For closed surfaces, which have no boundary, the up direction is that of the surface patches, which must be consistent with one another. Its included surface patches describe the interior structure of the Surface.
			
		
		 
			 
				 
					 
						 
							 This element encapsulates the patches of the surface.
						
					
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for "_Surface".
		
	
	
	 
	
	 
		 
			 
				OrientableSurface consists of a surface and an orientation. If the orientation is "+", then the OrientableSurface is identical to the baseSurface. If the orientation is "-", then the OrientableSurface is a reference to a Surface with an up-normal that reverses the direction for this OrientableSurface, the sense of "the top of the surface".
			
		
		 
			 
				 
					 
						 
							 References or contains the base surface (positive orientation).
						
					
				
				 
					 
						 If the orientation is "+", then the OrientableSurface is identical to the baseSurface. If the orientation is "-", then the OrientableSurface is a reference to a Surface with an up-normal that reverses the direction for this OrientableSurface, the sense of "the top of the surface". "+" is the default value.
					
				
			
		
	
	
	
	
	
	 
		 
			 The "_SurfacePatch" element is the abstract head of the substituition group for all surface pach elements describing a continuous portion of a surface.
		
	
	
	 
		 
			 
				A surface patch defines a homogenuous portion of a surface.
			
		
		 
	
	
	 
		 
			 This property element contains a list of surface patches. The order of the elements is significant and shall be preserved when processing the array.
		
	
	
	 
		 
			 A container for an array of surface patches.
		
		 
			 
		
	
	
	 
	
	 
		 
			 
				A PolygonPatch is a surface patch that is defined by a set of boundary curves and an underlying surface to which these curves adhere. The curves are coplanar and the polygon uses planar interpolation in its interior. Implements GM_Polygon of ISO 19107. 
			
		
		 
			 
				 
					 
					 
				
				 
					 
						 The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.
					
				
			
		
	
	
	 
	
	 
		 
			 Represents a triangle as a surface with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring must be four.
		
		 
			 
				 
					 
						 
							 
								Constraint: The Ring shall be a LinearRing and must form a triangle, the first and the last position must be co-incident.
							
						
					
				
				 
					 
						 The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.
					
				
			
		
	
	
	 
	
	 
		 
			 Represents a rectangle as a surface with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring must be five.
		
		 
			 
				 
					 
						 
							 
								Constraint: The Ring shall be a LinearRing and must form a rectangle; the first and the last position must be co-incident.
							
						
					
				
				 
					 
						 The attribute "interpolation" specifies the interpolation mechanism used for this surface patch. Currently only planar surface patches are defined in GML 3, the attribute is fixed to "planar", i.e. the interpolation method shall return points on a single plane. The boundary of the patch shall be contained within that plane.
					
				
			
		
	
	
	 
		 
			 This property element either references a curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for "_Curve".
		
	
	
	 
	
	 
		 
			 A Ring is used to represent a single connected component of a surface boundary. It consists of a sequence of curves connected in a cycle (an object whose boundary is empty).
A Ring is structurally similar to a composite curve in that the endPoint of each curve in the sequence is the startPoint of the next curve in the Sequence. Since the sequence is circular, there is no exception to this rule. Each ring, like all boundaries, is a cycle and each ring is simple.
NOTE: Even though each Ring is simple, the boundary need not be simple. The easiest case of this is where one of the interior rings of a surface is tangent to its exterior ring.
		
		 
			 
				 
					 
						 
							 This element references or contains one curve in the composite curve. The curves are contiguous, the collection of curves is ordered.
NOTE: This definition allows for a nested structure, i.e. a CompositeCurve may use, for example, another CompositeCurve as a curve member.
						
					
				
			
		
	
	
	 
		 
			 
			        Encapsulates a ring to represent properties in features or geometry collections.
			
		
		 
			 
		
	
	
	 
		 
			  Reference points which are organised
   into sequences or grids(sequences of equal length sequences).
  
		
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
	
	 
		 
			   
			
		
		 
			 
		
	
	
	 
	
	 
		 
			  A gridded surface is a parametric curve
   surface derived from a rectangular grid in the parameter
   space. The rows from this grid are control points for
   horizontal surface curves; the columns are control points
   for vertical surface curves. The working assumption is that
   for a pair of parametric co-ordinates (s, t) that the
   horizontal curves for each integer offset are calculated
   and evaluated at "s". The defines a sequence of control
   points:
   
   cn(s) : s  1 .....columns 

   From this sequence a vertical curve is calculated for "s",
   and evaluated at "t". In most cases, the order of
   calculation (horizontal-vertical vs. vertical-horizontal)
   does not make a difference. Where it does, the horizontal-   
   vertical order shall be the one used.

   Logically, any pair of curve interpolation types can lead
   to a subtype of GriddedSurface. The following clauses
   define some most commonly encountered surfaces that can
   be represented in this manner. 
  
		
		 
			 
				 
					 
						 
							  This is the double indexed sequence
       of control points, given in row major form. 
       NOTE! There in no assumption made about the shape
       of the grid. 
       For example, the positions need not effect a "21/2D"
       surface, consecutive points may be equal in any or all
       of the ordinates. Further, the curves in either or both
       directions may close.    
      
						
					
					 
						 
							  The attribute rows gives the number
         of rows in the parameter grid.
       
						
					
					 
						 
							  The attribute columns gives the number
        of columns in the parameter grid.
       
						
					
				
			
		
	
	
	 
	
	 
		 
			  A cone is a gridded surface given as a
   family of conic sections whose control points vary linearly.
   NOTE! A 5-point ellipse with all defining positions identical
   is a point. Thus, a truncated elliptical cone can be given as a
   2x5 set of control points
   ((P1, P1, P1, P1, P1), (P2, P3, P4, P5, P6)). P1 is the apex 
   of the cone. P2, P3,P4, P5 and P6 are any five distinct points
   around the base ellipse of the cone. If the horizontal curves
   are circles as opposed to ellipses, the a circular cone can
   be constructed using ((P1, P1, P1),(P2, P3, P4)). The apex most     
   not coinside with the other plane. 
  
		
		 
			 
				 
				 
			
		
	
	
	 
	
	 
		 
			  A cylinder is a gridded surface given as a
   family of circles whose positions vary along a set of parallel
   lines, keeping the cross sectional horizontal curves of a
   constant shape.
   NOTE! Given the same working assumptions as in the previous
   note, a Cylinder can be given by two circles, giving us the
   control points of the form ((P1, P2, P3),(P4, P5, P6)). 
  
		
		 
			 
				 
				 
			
		
	
	
	 
	
	 
		 
			  A sphere is a gridded surface given as a
   family of circles whose positions vary linearly along the
   axis of the sphere, and whise radius varies in proportions to
   the cosine function of the central angle. The horizontal 
   circles resemble lines of constant latitude, and the vertical
   arcs resemble lines of constant longitude. 
   NOTE! If the control points are sorted in terms of increasing
   longitude, and increasing latitude, the upNormal of a sphere
   is the outward normal.
   EXAMPLE If we take a gridded set of latitudes and longitudes
   in degrees,(u,v) such as

	(-90,-180)  (-90,-90)  (-90,0)  (-90,  90) (-90, 180) 
	(-45,-180)  (-45,-90)  (-45,0)  (-45,  90) (-45, 180) 
	(  0,-180)  (  0,-90)  (  0,0)  (  0,  90) (  0, 180)
	( 45,-180)  ( 45,-90)  ( 45,0)  ( 45, -90) ( 45, 180)
	( 90,-180)  ( 90,-90)  ( 90,0)  ( 90, -90) ( 90, 180)
   
   And map these points to 3D using the usual equations (where R
   is the radius of the required sphere).

    z = R sin u
    x = (R cos u)(sin v)
    y = (R cos u)(cos v)

   We have a sphere of Radius R, centred at (0,0), as a gridded
   surface. Notice that the entire first row and the entire last
   row of the control points map to a single point in each 3D
   Euclidean space, North and South poles respectively, and that
   each horizontal curve closes back on itself forming a 
   geometric cycle. This gives us a metrically bounded (of finite
   size), topologically unbounded (not having a boundary, a
   cycle) surface. 
  
		
		 
			 
				 
				 
			
		
	
	
	 
	
	 
		 
			  A polyhedral surface is a surface composed
   of polygon surfaces connected along their common boundary 
   curves. This differs from the surface type only in the
   restriction on the types of surface patches acceptable.
  
		
		 
			 
				 
					 
					 
						 
							 
								  This property encapsulates the patches of 
      the polyhedral surface.
     
							
						
					
				
			
		
	
	
	 
		 
			  This property element contains a list of
   polygon patches. The order of the patches is significant and 
   shall be preserved when processing the list. 
  
		
	
	
	 
		 
			 This type defines a container for an array of 
   polygon patches.
  
		
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			  This property element contains a list of
   triangle patches. The order of the patches is significant and 
   shall be preserved when processing the list.
  
		
	
	
	 
		 
			  This type defines a container for an array of 
     triangle patches.
   
		
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
	
	 
		 
			  A triangulated surface is a polyhedral 
   surface that is composed only of triangles. There is no
   restriction on how the triangulation is derived. 
  
		
		 
			 
				 
					 
					 
						 
							 
								  This property encapsulates the patches of 
      the triangulated surface.
     
							
						
					
				
			
		
	
	
	 
	
	 
		 
			  A tin is a triangulated surface that uses
   the Delauny algorithm or a similar algorithm complemented with
   consideration of breaklines, stoplines, and maximum length of 
   triangle sides. These networks satisfy the Delauny's criterion
   away from the modifications: Fore each triangle in the 
   network, the circle passing through its vertices does not
   contain, in its interior, the vertex of any other triangle.
  
		
		 
			 
				 
					 
						 
							  Stoplines are lines where the local
       continuity or regularity of the surface is questionable.
       In the area of these pathologies, triangles intersecting
       a stopline shall be removed from the tin surface, leaving
       holes in the surface. If coincidence occurs on surface
       boundary triangles, the result shall be a change of the 
       surface boundary. Stoplines contains all these
       pathological segments as a set of line strings.
      
						
					
					 
						 
							  Breaklines are lines of a critical
       nature to the shape of the surface, representing local
       ridges, or depressions (such as drainage lines) in the
       surface. As such their constituent segments must be
       included in the tin eve if doing so
       violates the Delauny criterion. Break lines contains these
       critical segments as a set of line strings.
      
						
					
					 
						 
							  Areas of the surface where data is not 
       sufficiently dense to assure reasonable calculation shall be    
       removed by adding a retention criterion for triangles based 
       on the length of their sides. For many triangle sides  
       exceeding maximum length, the adjacent triangles to that 
       triangle side shall be removed from the surface.
      
						
					
					 
						 
							  The corners of the triangles in the TIN 
  are often referred to as pots. ControlPoint shall contain a 
  set of the GM_Position used as posts for this TIN. Since each  
  TIN contains triangles, there must be at least 3 posts. The 
       order in which these points are given does not affect the 
       surface that is represented. Application schemas may add 
       information based on ordering of control points to facilitate 
       the reconstruction of the TIN from the control points.
      
						
						 
							 
								 
								 
							
						
					
				
			
		
	
	 
		 
			 
		
	
	
	
	
	
	 
		 
			 The "_Solid" element is the abstract head of the substituition group for all (continuous) solid elements.
		
	
	
	 
		 
			 
				An abstraction of a solid to support the different levels of complexity. A solid is always contiguous.
			
		
		 
			 
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 This property element either references a solid via the XLink-attributes or contains the solid element. solidProperty is the predefined property which can be used by GML Application Schemas whenever a GML Feature has a property with a value that is substitutable for _Solid.
		
	
	
	 
		 
			 A property that has a solid as its value domain can either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element must be given, but neither both nor none.
		
		 
			 
		
		 
			 
				 This attribute group includes the XLink attributes (see xlinks.xsd). XLink is used in GML to reference remote resources (including those elsewhere in the same document). A simple link element can be constructed by including a specific set of XLink attributes. The XML Linking Language (XLink) is currently a Proposed Recommendation of the World Wide Web Consortium. XLink allows elements to be inserted into XML documents so as to create sophisticated links between resources; such links can be used to reference remote properties.
A simple link element can be used to implement pointer functionality, and this functionality has been built into various GML 3 elements by including the gml:AssociationAttributeGroup.
				
			
		
	
	
	 
	
	 
		 
			 A container for an array of solids. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements is not supported.
		
		 
			 
		
	
	
	 
	
	 
		 
			 A solid is the basis for 3-dimensional geometry. The extent of a solid is defined by the boundary surfaces (shells). A shell is represented by a composite surface, where every  shell is used to represent a single connected component of the boundary of a solid. It consists of a composite surface (a list of orientable surfaces) connected in a topological cycle (an object whose boundary is empty). Unlike a Ring, a Shell's elements have no natural sort order. Like Rings, Shells are simple.
		
		 
			 
				 
					 
						 
							 
								 
									 
										 
									
								
							
							 Boundaries of solids are similar to surface boundaries. In normal 3-dimensional Euclidean space, one (composite) surface is distinguished as the exterior. In the more general case, this is not always possible.
						
					
					 
						 
							 
								 
									 
										 
									
								
							
							 Boundaries of solids are similar to surface boundaries.
						
					
				
			
		
	
	
	
	
	 
		 
			 CurveInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.
		
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	
	
	 
		 
			 SurfaceInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an
application schema.
		
		 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		
	
	
	 
		 
			 Defines allowed values for the knots` type. Uniform knots implies that all knots are of multiplicity 1 and they differ by a positive constant from the preceding knot. Knots are quasi-uniform iff they are of multiplicity (degree + 1) at the ends, of multiplicity 1 elsewhere, and they differ by a positive constant from the preceding knot.
		
		 
			 
			 
			 
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/gml.xsd
 
	 
		 gml.xsd
		 
		    	Copyright (c) 2002-2004 OGC, All Rights Reserved.
			Top level GML schema
		
	
	
	 
	 
	 
	 
	 
	 
	 
	




05-011 Common CRSs Folder/gml/3.1.1/base/gmlBase.xsd
 
	 
		 
			 Schematron validation
			 
			 
			 
				 
					 
            Property element may not carry both a reference to an object and contain an object.
					 
            Property element must either carry a reference to an object or contain an object.
				
			
		
		 
			GML base schema for GML 3
			Components to support the GML encoding model.  
			
			The abstract Schematron rules can be used by any schema that includes gmlBase.  
			Copyright (c) 2001-2004 OGC, All Rights Reserved.

    
	
	
	 
	 
	
	
	
	
	
	 
		 
			 This abstract element is the head of a substitutionGroup hierararchy which may contain either simpleContent or complexContent elements.  It is used to assert the model position of "class" elements declared in other GML schemas.  
		
	
	
	
	 
		 
			 Global element which acts as the head of a substitution group that may include any element which is a GML feature, object, geometry or complex value
		
	
	
	 
		 
			 This content model group makes it easier to construct types that 
      derive from AbstractGMLType and its descendents "by restriction".  
      A reference to the group saves having to enumerate the standard object properties.  
		
		 
			 
			 
			 
				 
					 Multiple names may be provided.  These will often be distinguished by being assigned by different authorities, as indicated by the value of the codeSpace attribute.  In an instance document there will usually only be one name per authority. 
				
			
		
	
	
	 
		 
			 All complexContent GML elements are directly or indirectly derived from this abstract supertype 
	to establish a hierarchy of GML types that may be distinguished from other XML types by their ancestry. 
	Elements in this hierarchy may have an ID and are thus referenceable.  
		
		 
			 
		
		 
	
	
	
	 
		 
			 Generic GML element to contain a heterogeneous collection of GML _Objects
		
	
	
	 
		 
			 A non-abstract generic collection type that can be used as a document element for a collection of any GML types - Geometries, Topologies, Features ...

FeatureCollections may only contain Features.  GeometryCollections may only contain Geometrys.  Bags are less constrained  they must contain objects that are substitutable for gml:_Object.  This may mix several levels, including Features, Definitions, Dictionaries, Geometries etc.  

The content model would ideally be 
   member 0..*
   members 0..1
   member 0..*
for maximum flexibility in building a collection from both homogeneous and distinct components: 
included "member" elements each contain a single Object
an included "members" element contains a set of Objects 

However, this is non-deterministic, thus prohibited by XSD.  


		
		 
			 
				 
					 
					 
				
			
		
	
	
	
	 
		 
			 Generic GML element to contain a homogeneous array of GML _Objects
		
	
	
	 
		 
			 A non-abstract generic collection type that can be used as a document element for a homogeneous collection of any GML types - Geometries, Topologies, Features ...
		
		 
			 
				 
					 
				
			
		
	
	
	
	 
		 
			 Abstract element which acts as the head of a substitution group for packages of MetaData properties.  
		
	
	
	 
		 
			  An abstract base type for complex metadata types.
		
		 
	
	
	
	 
		 
			 Concrete element in the _MetaData substitution group, which permits any well-formed XML content.  Intended to act as a container for metadata defined in external schemas, for which it is not possible to add the concrete components to the GML _MetaData substitution group directly. Deprecated with GML version 3.1.0.
		
	
	
	 
		 
			 Deprecated with GML version 3.1.0.
		
		 
			 
				 
					 
				
			
		
	
	
	
	
	
	
	 
	
	 
		 
			 
				 
					 
						 
					
				
			
			 must carry a reference to an object or contain an object but not both
		
	
	
	 
	
	 
		 
			   A pattern or base for derived types used to specify complex types corresponding to an  unspecified UML association - either composition or aggregation.  Restricts the cardinality of Objects contained in the association to a maximum of one.  An instance of this type can contain an element representing an Object, or serve as a pointer to a remote Object.  

Descendents of this type can be restricted in an application schema to 
* allow only specified classes as valid participants in the aggregation
* allow only association by reference (i.e. empty the content model) or by value (i.e. remove the xlinks).    

When used for association by reference, the value of the gml:remoteSchema attribute can be used to locate a schema fragment that constrains the target instance.   

In many cases it is desirable to impose the constraint prohibiting the occurence of both reference and value in the same instance, as that would be ambiguous.  This is accomplished by adding a directive in the annotation element of the element declaration.  This directive can be in the form of normative prose, or can use a Schematron pattern to automatically constrain co-occurrence - see the declaration for _strictAssociation below.   

If co-occurence is not prohibited, then both a link and content may be present.  If this occurs in an instance, then the rule for interpretation is that the instance found by traversing the href provides the normative value of the property, and should be used when possible.  The value(s) included as content may be used if the remote instance cannot be resolved.  This may be considered to be a "cached" version of the value(s).    
		
		 
			 
		
		 
	
	
	 
	
	 
		 
			   A pattern or base for derived types used to specify complex types corresponding to a UML aggregation association.  An instance of this type serves as a pointer to a remote Object.  
 
		
		 
		 
	
	
	
	 
	
	 
		 
			   A base for derived types used to specify complex types containing an array of objects, by unspecified UML association - either composition or aggregation.  An instance of this type contains elements representing Objects.

Ideally this type would be derived by extension of AssociationType.  
However, this leads to a non-deterministic content model, since both the base and the extension have minOccurs="0", and is thus prohibited in XML Schema. 
		
		 
			 
		
	
	
	
	 
		 
			 Contains or refers to a metadata package that contains metadata properties.  
		
	
	
	 
		 
			 Base type for complex metadata property types.
		
		 
			
			 
		
		 
		 
	
	
	
	 
		 
			 Database handle for the object.  It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.  An external identifier for the object in the form of a URI may be constructed using standard XML and XPointer methods.  This is done by concatenating the URI for the document, a fragment separator, and the value of the id attribute.  
		
	
	
	 
		 
			 Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere. 
		
	
	
	 
		 
			 Attribute group used to enable property elements to refer to their value remotely. It contains the simple link components from xlinks.xsd, with all members optional, and the remoteSchema attribute, which is also optional.  These attributes can be attached to any element, thus allowing it to act as a pointer. The 'remoteSchema' attribute allows an element  that carries link attributes to indicate that the element is declared  in a remote schema rather than by the schema that constrains the current document instance. 
		
		 
		 
	
	
	 
		 
			 Label for the object, normally a descriptive name. An object may have several names, typically assigned by different authorities.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace. 
		
	
	
	 
		 
			 Contains a simple text description of the object, or refers to an external description.  
		
	
	
	 
		 
			 
This type is available wherever there is a need for a "text" type property. It is of string type, so the text can be included inline, but the value can also be referenced remotely via xlinks from the AssociationAttributeGroup. If the remote reference is present, then the value obtained by traversing the link should be used, and the string content of the element can be used for an annotation.  
		
		 
			 
				 
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/grids.xsd
 
	 
		 grids.xsd
		 Grid geometries
    A subset of implicit geometries
    Designed for use with GML Coverage schema, but maybe useful elsewhere as well.  
    
    Copyright (c) 20022004 OGC, All Rights Reserved.
    
	
	
	 
	
	 
	
	 
	
	 
		 
			 An unrectified grid, which is a network composed of two or more sets of equally spaced parallel lines in which the members of each set intersect the members of the other sets at right angles.
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 
		
	
	
	 
		 
			 Provides grid coordinate values for the diametrically opposed corners of an envelope that bounds a section of grid. The value of a single coordinate is the number of offsets from the origin of the grid in the direction of a specific axis.
		
		 
			 
			 
		
	
	
	 
		 
			 Should be substitutionGroup="gml:Grid" but changed in order to accomplish Xerces-J schema validation
		
	
	
	 
		 
			 A rectified grid has an origin and vectors that define its post locations.
		
		 
			 
				 
					 
					 
				
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/measures.xsd
 
	 
		 
		 
			 Extends the units.xsd and basicTypes.xsd schemas with types for recording measures using specific types of units, especially the measures and units needed for coordinate reference systems and coordinate operations. The specific unit types encoded are length, angle, scale factor, time, area, volume, speed, and grid length. This schema allows angle values to be recorded as single numbers or in degree-minute-second format. GML 3.0 candidate schema, primary editor: Arliss Whiteside. Last updated 2002/11/13. 
			 Copyright (c) 2001-2004 OpenGIS, All Rights Reserved
			 Parts of this schema are based on Subclause 6.5.7 of ISO/CD 19103 Geographic information - Conceptual schema language, on Subclause A.5.2.2.3 of ISO/CD 19118 Geographic information - Encoding, and on Subclause 4.7 of OpenGIS Recommendation Paper OGC 02-007r4 Units of Measure Use and Definition Recommendations. 
		
	
	
	 
	
	
	
	 
	
	 
		 
			 Value of a length (or distance) quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet. 
		
		 
			 
		
	
	
	 
		 
			 Value of a scale factor (or ratio) that has no physical unit. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a scale factor, such as percent, permil, or parts-per-million. 
		
		 
			 
		
	
	
	 
		 
			 Value of a time or temporal quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a time value, such as seconds or weeks. 
		
		 
			 
		
	
	
	 
		 
			 Value of a length (or distance) quantity in a grid, where the grid spacing does not have any associated physical units, or does not have a constant physical spacing. This grid length will often be used in a digital image grid, where the base units are likely to be pixel spacings. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for length along the axes of a grid, such as pixel spacings or grid spacings. 
		
		 
			 
		
	
	
	 
		 
			 Value of a spatial area quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for an area, such as square metres or square miles. 
		
		 
			 
		
	
	
	 
		 
			 Value of a spatial volume quantity, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a volume, such as cubic metres or cubic feet. 
		
		 
			 
		
	
	
	 
		 
			 Value of a speed, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a velocity, such as metres per second or miles per hour.
		
		 
			 
		
	
	
	 
		 
			 Value of an angle quantity provided in either degree-minute-second format or single value format. 
		
		 
			 
			 
		
	
	
	 
	
	 
		 
			 Value of an angle quantity recorded as a single number, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for an angle, such as degrees or radians. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Angle value provided in degree-minute-second or degree-minute format. 
		
		 
			 
			 
				 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 Integer number of degrees, plus the angle direction. This element can be used for geographic Latitude and Longitude. For Latitude, the XML attribute direction can take the values "N" or "S", meaning North or South of the equator. For Longitude, direction can take the values "E" or "W", meaning East or West of the prime meridian. This element can also be used for other angles. In that case, the direction can take the values "+" or "-" (of SignType), in the specified rotational direction from a specified reference direction. 
		
		 
			 
				 
					 
						 
							 
								 
									 
									 
									 
									 
								
							
							 
								 
							
						
					
				
			
		
	
	
	 
		 
			 Integer number of degrees in a degree-minute-second or degree-minute angular value, without indication of direction. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Decimal number of arc-minutes in a degree-minute angular value. 
		
		 
			 
			 
		
	
	
	 
	
	 
		 
			 Integer number of arc-minutes in a degree-minute-second angular value. 
		
		 
			 
		
	
	
	 
	
	 
		 
			 Number of arc-seconds in a degree-minute-second angular value. 
		
		 
			 
			 
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/observation.xsd
 
	 
		 observation.xsd
		 Observation schema for GML 3.1     
        Copyright (c) 2002-2004 OGC, All Rights Reserved.
    
	
	
	
	 
	 
	 
	
	
	 
		 
			 This element contains or points to a description of a sensor, instrument or procedure used for the observation
		
	
	
	 
		 
			 This element contains or points to the specimen, region or station which is the object of the observation
		
	
	
	 
		 
			 Synonym for target - common word used for photographs
		
	
	
	 
		 
			 Container for an object representing the target or subject of an observation.
		
		 
			 
				 
				 
			
		
		 
	
	
	 
		 
			 The result of the observation: an image, external object, etc
		
	
	
	
	 
	
	 
		 
			 
				 
					 
					 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 
				 
					 
				
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/referenceSystems.xsd
 
	 
		 
		 
			 referenceSystems.xsd
			 3.1.1
			 How to encode reference system definitions. 
			 Builds on several other parts of GML 3 to encode the data needed to define reference systems. Primary editor: Arliss Whiteside. Last updated 2004/11/02. 
			 Copyright (c) 2002-2003 Open GIS Consortium, All Rights Reserved.
			 This schema encodes the Reference System (RS_) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates. That UML model is adapted from ISO 19111 - Spatial referencing by coordinates, as described in Annex C of Topic 2. The SC_CRS class is also encoded here, to eliminate the (circular) references from coordinateOperations.xsd to coordinateReferenceSystems.xsd. The RS_SpatialReferenceSystemUsingGeographicIdentifier class is not encoded, since it is not applicable to coordinate positions. The CI_Citation class is not directly encoded, since such information can be included as metaDataProperty elements which are optionally allowed. A modified version of the EX_Extent (DataType) class from ISO 19115 is currently encoded here, using GML 3 schema types. (A more extensive version of the EX_Extent package might be XML encoded in the future, probably in a separate extent.xsd schema.) 

			Caution: The CRS package in GML 3.1 and GML 3.1.1 is preliminary, and is expected to undergo some modifications that are not backward compatible during the development of GML 3.2 (ISO 19136). 
			The GML 3.2 package will implement the model described in the revised version of ISO 19111. 
		
	
	
	 
	 
	
	 
	
	 
		 
			 Basic encoding for reference system objects, simplifying and restricting the DefinitionType as needed. 
		
		 
			 
				 
					 
					 
				
				 
			
		
	
	
	 
		 
			 The name by which this reference system is identified. 
		
	
	
	 
		 
			 Description of a spatial and/or temporal reference system used by a dataset. 
		
		 
			 
				 
					 
						 
							 Set of alterative identifications of this reference system. The first srsID, if any, is normally the primary identification code, and any others are aliases. 
						
					
					 
						 
							 Comments on or information about this reference system, including source information. 
						
					
					 
					 
				
			
		
	
	
	 
		 
			 An identification of a reference system. 
		
	
	
	 
	
	 
		 
			 Association to a reference system, either referencing or containing the definition of that reference system. 
		
		 
			 
		
		 
	
	
	 
		 
			 Abstract coordinate reference system, usually defined by a coordinate system and a datum. This abstract complexType shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document. 
		
	
	
	 
	
	 
		 
			 Association to a CRS abstract coordinate reference system, either referencing or containing the definition of that CRS. 
		
		 
			 
		
		 
	
	
	
	 
		 
			 An identification of a CRS object. The first use of the IdentifierType for an object, if any, is normally the primary identification code, and any others are aliases. 
		
		 
			 
				 
					 The code or name for this Identifier, often from a controlled list or pattern defined by a code space. The optional codeSpace attribute is normally included to identify or reference a code space within which one or more codes are defined. This code space is often defined by some authority organization, where one organization may define multiple code spaces. The range and format of each Code Space identifier is defined by that code space authority. Information about that code space authority can be included as metaDataProperty elements which are optionally allowed in all CRS objects. 
				
			
			 
			 
				 
					 Remarks about this code or alias. 
				
			
		
	
	
	 
		 
			 Identifier of the version of the associated codeSpace or code, as specified by the codeSpace or code authority. This version is included only when the "code" or "codeSpace" uses versions. When appropriate, the version is identified by the effective date, coded using ISO 8601 date format. 
		
	
	
	 
		 
			 Information about this object or code. Contains text or refers to external text.  
		
	
	
	 
		 
			 Description of domain of usage, or limitations of usage, for which this CRS object is valid. 
		
	
	
	 
		 
			 Area or region in which this CRS object is valid. 
		
	
	
	 
		 
			 Information about the spatial, vertical, and/or temporal extent of a reference system object. Constraints: At least one of the elements "description", "boundingBox", "boundingPolygon", "verticalExtent", and temporalExtent" must be included, but more that one can be included when appropriate. Furthermore, more than one "boundingBox", "boundingPolygon", "verticalExtent", and/or temporalExtent" element can be included, with more than one meaning the union of the individual domains. 
		
		 
			 
				 
					 Description of spatial and/or temporal extent of this object. 
				
			
			 
				 
					 Geographic domain of this reference system object. 
				
				 
					 
						 Unordered list of bounding boxes (or envelopes) whose union describes the spatial domain of this object. 
					
				
				 
					 
						 Unordered list of bounding polygons whose union describes the spatial domain of this object. 
					
				
			
			 
				 
					 Unordered list of vertical intervals whose union describes the spatial domain of this object. 
				
			
			 
				 
					 Unordered list of time periods whose union describes the spatial domain of this object. 
				
			
		
	
	
	 
		 
			 A bounding box (or envelope) defining the spatial domain of this object. 
		
	
	
	 
		 
			 A bounding polygon defining the horizontal spatial domain of this object. 
		
	
	
	 
		 
			 An interval defining the vertical spatial domain of this object. 
		
	
	
	 
		 
			 A time period defining the temporal domain of this object. 
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/temporal.xsd
 
   
     
     
    The temporal schema for GML 3.1 provides constructs for handling time-varying spatial data. 
    This schema reflects a partial implementation of the model described in ISO 19108:2002. 
    Copyright (c) 2004 OGC, All Rights Reserved.    
    
  
  
   
  
  
  
   
     
       
      This abstract element acts as the head of the substitution group for temporal primitives and complexes.  
      
    
  
  
   
     
       
      The abstract supertype for temporal objects.
      
    
     
       
    
  
  
  
  
   
     
       
      This abstract element acts as the head of the substitution group for temporal primitives.  
      
    
  
  
   
     
       
      The abstract supertype for temporal primitives.
      
    
     
       
         
           
        
      
    
  
  
   
     
       
    
     
  
  
   
     
       
         
           
             
               
               
               
               
               
               
               
               
               
               
               
               
               
            
          
        
      
    
  
  
  
  
   
     
       
			This abstract element acts as the head of the substitution group for temporal complexes. 
			Temporal complex is an aggregation of temporal primitives as its components, 
			represents a temporal geometric complex and a temporal topology complex. 
			N.B. Temporal geometric complex is not defined in this schema. 
			
    
  
  
   
     
       
	The abstract supertype for temporal complexes. 
	
    
     
       
    
  
  
  
  
   
     
       
      This abstract element acts as the head of the substitution group for temporal geometric primitives.  
      
    
  
  
   
     
       
      The abstract supertype for temporal geometric primitives.
       A temporal geometry must be associated with a temporal reference system via URI. 
       The Gregorian calendar with UTC is the default reference system, following ISO 
       8601. Other reference systems in common use include the GPS calendar and the 
       Julian calendar.
      
    
     
       
         
      
    
  
  
   
     
       
    
     
  
  
  
  
   
  
   
     
       Omit back-pointers begunBy, endedBy.  
    
     
       
         
           
        
      
    
  
  
   
     
       
    
     
  
  
  
  
   
  
   
     
       
         
           
             
             
          
           
             
             
          
           
        
      
    
  
  
   
     
       
    
     
  
  
  
  
 	 
		 
			 This model group is provided as an alternative to the abstract susbstitutionGroup head _timeLength.
		ISO 19136 comment 411
		
		 
			 
			 
		
	
	
  
     
       
      This element is an instance of the primitive xsd:duration simple type to 
      enable use of the ISO 8601 syntax for temporal length (e.g. P5DT4H30M). 
      It is a valid subtype of TimeDurationType according to section 3.14.6, 
      rule 2.2.4 in XML Schema, Part 1.
      
    
  
  
   
     
       
			This element is a valid subtype of TimeDurationType 
			according to section 3.14.6, rule 2.2.4 in XML Schema, Part 1.
      
    
  
  
   
     
       
      This type extends the built-in xsd:decimal simple type to allow floating-point 
      values for temporal length. According to  the ISO 11404 model you have to use 
      positiveInteger together with appropriate values for radix and factor. The 
      resolution of the time interval is to one radix ^(-factor) of the specified 
      time unit (e.g. unit="second", radix="10", factor="3" specifies a resolution 
      of milliseconds). It is a subtype of TimeDurationType.
      
    
     
       
         
         
         
      
    
  
  
   
     
       
        Standard units for measuring time intervals (see ISO 31-1).
      
    
     
       
         
           
           
           
           
           
        
      
       
         
           
        
      
    
  
  
  
  
   
     
       Direct representation of a temporal position
    
  
  
   
     
       Direct representation of a temporal position. 
      Indeterminate time values are also allowed, as described in ISO 19108. The indeterminatePosition 
      attribute can be used alone or it can qualify a specific value for temporal position (e.g. before 
      2002-12, after 1019624400). 
      For time values that identify position within a calendar, the calendarEraName attribute provides 
      the name of the calendar era to which the date is referenced (e.g. the Meiji era of the Japanese calendar).
      
    
     
       
         
         
         
      
    
  
  
   
     
       
      The ISO 19108:2002 hierarchy of subtypes for temporal position are collapsed 
      by defining a union of XML Schema simple types for indicating temporal position relative 
      to a specific reference system. 
      
      Dates and dateTime may be indicated with varying degrees of precision.  
      dateTime by itself does not allow right-truncation, except for fractions of seconds. 
      When used with non-Gregorian calendars based on years, months, days, 
      the same lexical representation should still be used, with leading zeros added if the 
      year value would otherwise have fewer than four digits.  
      
      An ordinal position may be referenced via URI identifying the definition of an ordinal era.  
      
      A time coordinate value is indicated as a decimal (e.g. UNIX time, GPS calendar).
      
    
     
  
  
   
     
       
      Calendar dates may be indicated with varying degrees of precision, 
      using year, year-month, date. 
      When used with non-Gregorian calendars based on years, months, days, 
      the same lexical representation should still be used, with leading zeros added if the 
      year value would otherwise have fewer than four digits.  
      time is used for a position that recurs daily (see clause 5.4.4.2 of ISO 19108:2002).  
      
    
     
  
  
   
     
       
        This enumerated data type specifies values for indeterminate positions.
      
    
     
       
       
       
       
    
  
  
  
  
   
  




05-011 Common CRSs Folder/gml/3.1.1/base/temporalReferenceSystems.xsd
 
   
     
     
    The Temporal Reference Systems schema for GML 3.1 provides constructs for handling various styles of temporal reference system. 
    This schema reflects a partial implementation of the model described in ISO 19108:2002. 
    Copyright (c) 2004 OGC, All Rights Reserved.    
    
  
  
   
   
  
  
  
   
     
       Abstract element serves primarily as the head of a substitution group for temporal reference systems.
    
  
  
   
     
       
        A value in the time domain is measured relative to a temporal reference system. Common 
        types of reference systems include calendars, ordinal temporal reference systems, and 
        temporal coordinate systems (time elapsed since some epoch, e.g. UNIX time).
      
    
     
       
         
           
        
      
    
  
  
  
  
   
  
   
     
       
      A temporal coordinate system is based on a continuous interval scale defined in terms of a single time interval.
      
    
     
       
         
           
             
             
          
           
        
      
    
  
  
  
  
   
  
   
     
       
      In an ordinal reference system the order of events in time can be well 
      established, but the magnitude of the intervals between them can not be 
      accurately determined (e.g. a stratigraphic sequence).
      
    
     
       
         
           
        
      
    
  
  
   
  
   
     
       
      Ordinal temporal reference systems are often hierarchically structured 
      such that an ordinal era at a given level of the hierarchy includes a 
      sequence of shorter, coterminous ordinal eras. This captured using the member/group properties.  
      
      Note that in this schema, TIme Ordinal Era is patterned on TimeEdge, which is a variation from ISO 19108.  
      This is in order to fulfill the requirements of ordinal reference systems based on eras delimited by 
      named points or nodes, which are common in geology, archeology, etc.  
      
      This change is subject of a change proposal to ISO
      
    
     
       
         
           
           
           
           
           
             
               An Era may be composed of several member Eras. The "member" element implements the association to the Era at the next level down the hierarchy.  "member" follows the standard GML property pattern whereby its (complex) value may be either described fully inline, or may be the target of a link carried on the member element and described fully elsewhere, either in the same document or from another service. 
            
          
           
             
               In a particular Time System, an Era may be a member of a group.  The "group" element implements the back-pointer to the Era at the next level up in the hierarchy. 

If the hierarchy is represented by describing the nested components fully in the their nested position inside "member" elements, then the parent can be easily inferred, so the group property is unnecessary.  

However, if the hierarchy is represented by links carried on the "member" property elements, pointing to Eras described fully elsewhere, then it may be useful for a child (member) era to carry an explicit pointer back to its parent (group) Era.  
            
          
        
      
    
  
  
   
     
       
    
     
  
  
  
  
   
  
   
     
       A calendar is a discrete temporal reference system 
      that provides a basis for defining temporal position to a resolution of one day. 
      A single calendar may reference more than one calendar era.
    
     
       
         
           
             
               Link to the CalendarEras that it uses as a reference for dating.
            
          
        
      
    
  
  
   
     
       
    
     
  
  
   
  
   
     
       
      In every calendar, years are numbered relative to the date of a 
      reference event that defines a calendar era. 
      In this implementation, we omit the back-pointer "datingSystem".  
    
     
       
         
           
             
               Name or description of a mythical or historic event which fixes the position of the base scale of the calendar era.
            
          
           
             
               Date of the referenceEvent expressed as a date in the given calendar. 
              In most calendars, this date is the origin (i.e., the first day) of the scale, but this is not always true.
            
          
           
             
               Julian date that corresponds to the reference date.  
              The Julian day numbering system is a temporal coordinate system that has an 
              origin earlier than any known calendar, 
              at noon on 1 January 4713 BC in the Julian proleptic calendar.  
              The Julian day number is an integer value; 
              the Julian date is a decimal value that allows greater resolution. 
              Transforming calendar dates to and from Julian dates provides a 
              relatively simple basis for transforming dates from one calendar to another.
            
          
           
             
               Period for which the calendar era was used as a basis for dating.
            
          
        
      
    
  
  
   
     
       
    
     
  
  
  
  
   
  
   
     
       A clock provides a basis for defining temporal position within a day. 
      A clock must be used with a calendar in order to provide a complete description of a temporal position 
      within a specific day.      
    
     
       
         
           
             
               Name or description of an event, such as solar noon or sunrise, 
              which fixes the position of the base scale of the clock.
            
          
           
             
               time of day associated with the reference event expressed as 
              a time of day in the given clock. The reference time is usually the origin of the clock scale. 
            
          
           
             
               24 hour local or UTC time that corresponds to the reference time.
            
          
           
        
      
    
  
  
   
     
       
    
     
  
  




05-011 Common CRSs Folder/gml/3.1.1/base/temporalTopology.xsd
 
   
     
     
		The temporal topology schema for ISO19136 provides constructs for handling topological complexes and 
		temporal feature relationships. 
		Temporal geometric characteristics of features are represented as instants and periods. 
		While, temporal context of features that does not relate to the position of time is described as connectivity relationships 
		among instants and periods. These relationships are called temporal topology as they do not change in time, 
		as long as the direction of time does not change. 
		It is used effectively in the case of describing a family tree expressing evolution of species, an ecological cycle, 
		a lineage of lands or buildings, or a history of separation and merger of administrative boundaries.
		This schema reflects a partial yet consistent implementation of the model described in ISO 19108:2002. 
    Copyright (c) 2004 OGC, All Rights Reserved.    
    
  
  
   
  
  
  
  
   
     
       
	This element represents temporal topology complex. It shall be the connected acyclic directed graph composed of time nodes and time edges.
			
    
  
  
   
     
       A temporal topology complex.
    
     
       
         
           
        
      
    
  
  
   
     
       A time topology complex property can either be any time topology complex element
			 encapsulated in an element of this type or an XLink reference to a remote time topology complex element 
			 (where remote includes elements located elsewhere in the same document). 
			 Note that either the reference or the contained element must be given, but not both or none.
			 
    
     
       
    
     
  
  
  
  
   
     
       
	This abstract element acts as the head of the substitution group for temporal topology primitives.
		
    
  
  
   
     
       The element "complex" carries a reference to the complex containing this primitive.
    
     
       
         
           
        
      
    
  
  
   
     
       A time topology primitive property can either hold any time topology complex element
			 eor carry an XLink reference to a remote time topology complex element 
			 (where remote includes elements located elsewhere in the same document). 
			 Note that either the reference or the contained element must be given, but not both or none.
			 
    
     
       
    
     
  
  
  
  
   
     
       "TimeNode" is a zero dimensional temporal topology primitive, 
			expresses a position in topological time, and is a start and an end of time edge, which represents states of time.
			Time node may be isolated. However, it cannot describe the ordering relationships with other primitives. 
			An isolated node may not be an element of any temporal topology complex.
			
    
  
  
   
     
       Type declaration of the element "TimeNode". 

    
     
       
         
           
           
           
        
      
    
  
  
   
     
       A time node property can either be any time node element encapsulated in an element of this type 
			or an XLink reference to a remote time node element (where remote includes elements located elsewhere in the same document). 
			Note that either the reference or the contained element must be given, but not both or none.
			
    
     
       
    
     
  
  
  
  
   
     
       TimeEdge is one dimensional temporal topology primitive,
			 expresses a state in topological time. It has an orientation from its start toward the end, 
			 and its boundaries shall associate with two different time nodes.
			 
    
  
  
   
     
       Type declaration of the element "TimeEdge". 
			
    
     
       
         
           
           
           
        
      
    
  
  
   
     
       A time edge property can either be any time edge element encapsulated in an element of this type 
			or an XLink reference to a remote time edge element (where remote includes elements located elsewhere in the same document). 
			Note that either the reference or the contained element must be given, but not both or none.
			
    
     
       
    
     
  
  
  
  
   
     
       Feature succession is a semantic relationship derived from evaluation of observer, and 
			Feature Substitution, Feature Division and Feature Fusion are defined as associations between 
			previous features and next features in the temporal context. 
			Successions shall be represented in either following two ways. 
			* define a temporal topological complex element as a feature element 
			* define an association same as temporal topological complex between features. 
			
    
     
       
       
       
       
    
  
  




05-011 Common CRSs Folder/gml/3.1.1/base/topology.xsd
 
	 
		 topology.xsd
		 
    
	
	 
	
	
	 
	
	 
		 
			 
		
	
	
	 
		 
			 Substitution group branch for Topo Primitives, used by TopoPrimitiveArrayAssociationType
		
	
	
	 
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
			 
		
		 
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
		 
			 
			 
		
		 
	
	
	
	
	 
	
	 
		 
			  Its optional co-boundary is a set of connected directedEdges.  The orientation of one of these dirEdges is "+" if the Node is the "to" node of the Edge, and "-" if it is the "from" node. 
		
		 
			 
				 
					 
					 
					
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
	
	 
		 
			 There is precisely one positively directed and one negatively directed node in the boundary of every edge. The negatively and positively directed nodes correspond to the start and end nodes respectively. The optional coboundary of an edge is a circular sequence of directed faces which are incident on this edge in document order. Faces which use a particular boundary edge in its positive orientation appear with positive orientation on the coboundary of the same edge. In the 2D case, the orientation of the face on the left of the edge is "+"; the orientation of the face on the right on its right is "-". An edge may optionally be realised by a 1-dimensional (curve) geometric primitive.
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
	
	 
		 
			 . The topological boundary of a face consists of a set of directed edges. Note that all edges associated with a Face, including dangling and interior edges, appear in the boundary.  Dangling and interior edges are each referenced by pairs of directedEdges with opposing orientations.  The optional coboundary of a face is a pair of directed solids which are bounded by this face. If present, there is precisely one positively directed and one negatively directed solid in the coboundary of every face. The positively directed solid corresponds to the solid which lies in the direction of the positively directed normal to the face in any geometric realisation.  A face may optionally be realised by a 2-dimensional (surface) geometric primitive.
		
		 
			 
				 
					 
					 
					 
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
		
		 
		 
	
	
	
	
	 
	
	 
		 
			 The topological boundary of a TopoSolid consists of a set of directed faces. Note that all faces associated with the TopoSolid, including dangling faces, appear in the boundary. The coboundary of a TopoSolid is empty and hence requires no representation.
		
		 
			 
				 
					 
				
			
		
	
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
		
		 
		 
	
	
	 
	
	 
		 
			 The intended use of TopoPoint is to appear within a point feature to express the structural and possibly geometric relationships of this point to other features via shared node definitions. Note the orientation assigned to the directedNode has no meaning in this context. It is preserved for symmetry with the types and elements which follow.
		
		 
			 
				 
					 
				
			
		
	
	
	
	
	 
	
	 
		 
			 
		
	
	
	
	 
	
	 
		 
			  The end Node of each directedEdge of a TopoCurveType
is the start Node of the next directedEdge of the TopoCurveType in document order.  The TopoCurve type and element represent a homogeneous topological expression, a list of directed edges, which if realised are isomorphic to a geometric curve primitive. The intended use of TopoCurve is to appear within a line feature instance to express the structural and geometric relationships of this line to other features via the shared edge definitions.
		
		 
			 
				 
					 
				
			
		
	
	
	
	 
	
	 
		 
			 
		
	
	
	
	 
	
	 
		 
			 The TopoSurface type and element represent a homogeneous topological expression, a set of directed faces, which if realised are isomorphic to a geometric surface primitive. The intended use of TopoSurface is to appear within a surface feature instance to express the structural and possibly geometric relationships of this surface to other features via the shared face definitions.
		
		 
			 
				 
					 
				
			
		
	
	
	
	 
	
	 
		 
			 
		
	
	
	 
	
	 
		 
			 The TopoVolume type and element represent a homogeneous topological expression, a set of directed TopoSolids, which if realised are isomorphic to a geometric solid primitive. The intended use of TopoVolume is to appear within a 3D solid feature instance to express the structural and geometric relationships of this solid to other features via the shared TopoSolid definitions.  . Note the orientation assigned to the directedSolid has no meaning in three dimensions. It is preserved for symmetry with the preceding types and elements. 
		
		 
			 
				 
					 
				
			
		
	
	
	
	 
	
	 
		 
			 
		
	
	
	
	 
	
	 
		 
			 This type represents a TP_Complex capable of holding topological primitives.
		
		 
			 
				 
					 
					 
					 
					 
					 
				
				 
			
		
	
	
	 
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 
				 
					 
						 
					
				
			
			 Need schamatron test here that isMaximal attribute value is true
		
	
	
	 
		 
			 This Property can be used to embed a TopoComplex in a feature collection.
		
		 
			 
		
		 
	
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 This type supports embedding topological primitives in a TopoComplex.
		
		 
			 
		
		 
	
	
	
	 
		 
			 
				 
					 
						 
					
				
			
		
	
	
	 
		 
			 This type supports embedding an array of topological primitives in a TopoComplex
		

				 
					 
						 
					
				

	
	




05-011 Common CRSs Folder/gml/3.1.1/base/units.xsd
 
	 
		 
		 
			 Builds on gmlBase.xsd to encode units of measure (or uom), including definitions of units of measure and dictionaries of such definitions. GML 3.0 candidate schema, primary editor: Arliss Whiteside. Last updated 2002/11/13. 
			 Copyright (c) 2001-2004 OpenGIS, All Rights Reserved.
			 Parts of this schema are based on Subclause 6.5.7 of ISO/CD 19103 Geographic information - Conceptual schema language, on Subclause A.5.2.2.3 of ISO/CD 19118 Geographic information - Encoding, and on most of OpenGIS Recommendation Paper OGC 02-007r4 Units of Measure Use and Definition Recommendations. 
		
	
	
	 
	
	 
	
	 
		 
			 Reference to a unit of measure definition that applies to all the numerical values described by the element containing this element. Notice that a complexType which needs to include the uom attribute can do so by extending this complexType. Alternately, this complexType can be used as a pattern for a new complexType. 
		
		 
		 
			 
				 Reference to a unit of measure definition, usually within the same XML document but possibly outside the XML document which contains this reference. For a reference within the same XML document, the "#" symbol should be used, followed by a text abbreviation of the unit name. However, the "#" symbol may be optional, and still may be interpreted as a reference. 
			
		
	
	
	 
	
	 
		 
			 Definition of a unit of measure (or uom). The definition includes a quantityType property, which indicates the phenomenon to which the units apply, and a catalogSymbol, which gives the short symbol used for this unit. This element is used when the relationship of this unit to other units or units systems is unknown.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
	
	 
		 
			 Definition of a unit of measure which is a base unit from the system of units.  A base unit cannot be derived by combination of other base units within this system.  Sometimes known as "fundamental unit".  
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 Definition of a unit of measure which is defined through algebraic combination of more primitive units, which are usually base units from a particular system of units. Derived units based directly on base units are usually preferred for quantities other than the base units or fundamental quantities within a system.  If a derived unit is not the preferred unit, the ConventionalUnit element should be used instead.
		
		 
			 
				 
					 
				
			
		
	
	
	 
	
	 
		 
			 Definition of a unit of measure which is related to a preferred unit for this quantity type through a conversion formula.  A method for deriving this unit by algebraic combination of more primitive units, may also be provided.  
		
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	
	 
		 
			 Informal description of the phenomenon or type of quantity that is measured or observed. For example, "length", "angle", "time", "pressure", or "temperature". When the quantity is the result of an observation or measurement, this term is known as Observable Type or Measurand. 
		
	
	
	 
		 
			 For global understanding of a unit of measure, it is often possible to reference an item in a catalog of units, using a symbol in that catalog. The "codeSpace" attribute in "CodeType" identifies a namespace for the catalog symbol value, and might reference the catalog. The "string" value in "CodeType" contains the value of a symbol that is unique within this catalog namespace. This symbol often appears explicitly in the catalog, but it could be a combination of symbols using a specified algebra of units. For example, the symbol "cm" might indicate that it is the "m" symbol combined with the "c" prefix. 
		
	
	
	 
	
	 
		 
			 Definition of one unit term for a derived unit of measure. This unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent can be positive or negative, but not zero. 
		
		 
			 
				 
			
		
	
	
	 
		 
			 This element is included when this unit has an accurate conversion to the preferred unit for this quantity type. 
		
	
	
	 
		 
			 This element is included when the correct definition of this unit is unknown, but this unit has a rough or inaccurate conversion to the preferred unit for this quantity type. 
		
	
	
	 
		 
			 Relation of a unit to the preferred unit for this quantity type, specified by an arithmetic conversion (scaling and/or offset). A preferred unit is either a base unit or a derived unit selected for all units of one quantity type. The mandatory attribute "uom" shall reference the preferred unit that this conversion applies to. The conversion is specified by one of two alternative elements: "factor" or "formula". 
		
		 
			 
				 
					 
						 
							 Specification of the scale factor by which a value using this unit of measure can be multiplied to obtain the corresponding value using the preferred unit of measure. 
						
					
					 
						 
							 Specification of the formula by which a value using this unit of measure can be converted to obtain the corresponding value using the preferred unit of measure. 
						
					
				
			
		
	
	
	 
		 
			 Paremeters of a simple formula by which a value using this unit of measure can be converted to the corresponding value using the preferred unit of measure. The formula element contains elements a, b, c and d, whose values use the XML Schema type "double". These values are used in the formula y = (a + bx) / (c + dx), where x is a value using this unit, and y is the corresponding value using the preferred unit. The elements a and d are optional, and if values are not provided, those parameters are considered to be zero. If values are not provided for both a and d, the formula is equivalent to a fraction with numerator and denominator parameters. 
		
		 
			 
			 
			 
			 
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/base/valueObjects.xsd
 
	 
		 valueObjects.xsd
		 Copyright (c) 2002-2004 OGC, All Rights Reserved.  
		GML conformant schema for Values in which the  
		* scalar Value types and lists have their values recorded in simpleContent elements 
		* complex Value types are built recursively
	
	
	
	 
	 
	
	 
		 
			 Utility choice group which unifies generic Values defined in this schema document with 
			Geometry and Temporal objects and the Measures described above, 
			so that any of these may be used within aggregate Values.
		
		 
			
			 
			 

			 
		
	
	
	 
		 
			 
			 
			 
			 
		
		
	
	
	
	
	 
		 
			 
			 
			 
			 
		
	
	
	 
		 
			 
			 
			 
			 
		
	
	
	
	 
		 
			 A value from two-valued logic, using the XML Schema boolean type.  An instance may take the values {true, false, 1, 0}.
		
	
	
	 
		 
			 XML List based on XML Schema boolean type.  An element of this type contains a space-separated list of boolean values {0,1,true,false}
		
	
	
	
	 
		 
			 A term representing a classification.  It has an optional XML attribute codeSpace, whose value is a URI which identifies a dictionary, codelist or authority for the term.
		
	
	
	 
		 
			 A space-separated list of terms or nulls.  A single XML attribute codeSpace may be provided, which authorises all the terms in the list.
		
	
	
	
	 
		 
			 A numeric value with a scale.  The content of the element is an amount using the XML Schema type double which permits decimal or scientific notation.  An XML attribute uom (unit of measure) is required, whose value is a URI which identifies the definition of the scale or units by which the numeric value must be multiplied.
		
	
	
	 
		 
			 A space separated list of amounts or nulls.  The amounts use the XML Schema type double.  A single XML attribute uom (unit of measure) is required, whose value is a URI which identifies the definition of the scale or units by which all the amounts in the list must be multiplied.
		
	
	
	
	 
		 
			 An integer representing a frequency of occurrence.
		
	
	
	 
		 
			 A space-separated list of integers or nulls.
		
	
	
	
	
	
	 
		 
			 Aggregate value built from other Values using the Composite pattern. It contains zero or an arbitrary number of valueComponent elements, and zero or one valueComponents elements.  It may be used for strongly coupled aggregates (vectors, tensors) or for arbitrary collections of values.
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Aggregate value built using the Composite pattern.
		
	
	
	
	 
		 
			 A Value Array is used for homogeneous arrays of primitive and aggregate values.  The member values may be scalars, composites, arrays or lists.  ValueArray has the same content model as CompositeValue, but the member values must be homogeneous.  The element declaration contains a Schematron constraint which expresses this restriction precisely.            Since the members are homogeneous, the referenceSystem (uom, codeSpace) may be specified on the ValueArray itself and implicitly inherited by all the members if desired.    Note that a_ScalarValueList is preferred for arrays of Scalar Values since this is a more efficient encoding.
		
		 
			 
				 
			
		
	
	
	 
		 
			 
				 
					 
						 ValueArray may not carry both a reference to a codeSpace and a uom
					
				
				 
					 
						 All components of   must be of the same type
						 All components of   must be of the same type
					
				
			
			 A Value Array is used for homogeneous arrays of primitive and aggregate values.   _ScalarValueList is preferred for arrays of Scalar Values since this is more efficient.  Since "choice" is not available for attribute groups, an external constraint (e.g. Schematron) would be required to enforce the selection of only one of these through schema validation
		
	
	
	 
		 
		 
	
	
	
	 
		 
			 
			 
			 
		
	
	
	 
		 
			 Utility element to store a 2-point range of numeric values. If one member is a null, then this is a single ended interval.
		
	
	
	 
		 
			 Restriction of list type to store a 2-point range of numeric values. If one member is a null, then this is a single ended interval.
		
		 
			 
				 
			
		
	
	
	 
		 
			 Utility element to store a 2-point range of ordinal values. If one member is a null, then this is a single ended interval.
		
	
	
	 
		 
			 Restriction of list type to store a 2-point range of ordinal values. If one member is a null, then this is a single ended interval.
		
		 
			 
				 
			
		
	
	
	 
		 
			 Utility element to store a 2-point range of frequency values. If one member is a null, then this is a single ended interval.
		
	
	
	 
		 
			 Restriction of list type to store a 2-point range of frequency values. If one member is a null, then this is a single ended interval.
		
		 
			 
		
	
	
	
	 
		 
			 Element which refers to, or contains, a Value
		
	
	
	 
		 
			 Element which refers to, or contains, a Value.  This version is used in CompositeValues.
		
	
	
	 
		 
			 GML property which refers to, or contains, a Value
		
		 
			 
		
		 
	
	
	
	 
		 
			 Element which refers to, or contains, a set of homogeneously typed Values.
		
	
	
	 
		 
			 GML property which refers to, or contains, a set of homogeneously typed Values.
		
		 
			 
		
	
	
	 
		 
			 Property whose content is a scalar value.
		
		 
			 
				 
					
					 
				
			
		
	
	 
		 
			 Property whose content is a Boolean value.
		
		 
			 
				 
					 
				
			
		
	
	 
		 
			 Property whose content is a Category.
		
		 
			 
				 
					 
				
			
		
	
	 
		 
			 Property whose content is a Quantity.
		
		 
			 
				 
					 
				
			
		
	
	 
		 
			 Property whose content is a Count.
		
		 
			 
				 
					 
				
			
		
	
	




05-011 Common CRSs Folder/gml/3.1.1/xlink/xlinks.xsd
 
	 
		 xlinks.xsd v3.0b2 2001-07
		 
			GML 3.0 candidate xlinks schema. Copyright (c) 2001 OGC, All Rights Reserved.
		
	
	
	
	 
	
	 
	 
	 
	
	 
		 
			 
        The 'show' attribute is used to communicate the desired presentation 
        of the ending resource on traversal from the starting resource; it's 
        value should be treated as follows: 
        new - load ending resource in a new window, frame, pane, or other 
              presentation context
        replace - load the resource in the same window, frame, pane, or 
                  other presentation context
        embed - load ending resource in place of the presentation of the 
                starting resource
        other - behavior is unconstrained; examine other markup in the 
                link for hints 
        none - behavior is unconstrained 
      
		
		 
			 
				 
				 
				 
				 
				 
			
		
	
	 
		 
			 
        The 'actuate' attribute is used to communicate the desired timing 
        of traversal from the starting resource to the ending resource; 
        it's value should be treated as follows:
        onLoad - traverse to the ending resource immediately on loading 
                 the starting resource 
        onRequest - traverse from the starting resource to the ending 
                    resource only on a post-loading event triggered for 
                    this purpose 
        other - behavior is unconstrained; examine other markup in link 
                for hints 
        none - behavior is unconstrained
      
		
		 
			 
				 
				 
				 
				 
			
		
	
	
	 
	 
	 
	
	 
		 
		 
		 
		 
		 
		 
		 
	
	 
		 
		 
		 
	
	 
		 
		 
		 
		 
		 
	
	 
		 
		 
		 
		 
		 
		 
		 
	
	 
		 
		 
		 
		 
	
	 
		 
	
	 
		 
	




05-011 Common CRSs Folder/transverse mercator application/transverseMercator.xsd
 
	 
		 
			 transverseMercator.xsd
			 How to encode definition of specific Transverse Mercator conversion. 
			 Example Application Schema to encode the data needed to define a specific Transverse Mercator type of map projection, which is a coordinate conversion. Builds on coordinateOperations.xsd, and follows same GML 3 patterns and ISO 19118 encoding. Written in the "ex" namespace. Primary editor: Arliss Whiteside. Last updated 2005-01-28
			 Guidance Note Number 7 "Coordinate Conversions and Transformations including Formulas" (available through http://www.epsg.org/), especially Section 1.4.6 "Transverse Mercator". 
			 Copyright (c) Open Geospatial Consortium (2005) 
			 This schema encodes a draft Transverse Mercator package that builds on the Coordinate Operation (CC_) package of the extended UML Model for OGC Abstract Specification Topic 2: Spatial Referencing by Coordinates. That draft package defines restricted subtypes of the CC_Conversion and CC_ParameterValue classes as needed for the Transverse Mercator map projection conversion. 
		
	
	
	 
	 
	
	 
	
	 
		 
			 Specific Transverse Mercator map projection. Uses the AbstractGeneralConversionType with restricted values for included elements, including elements in the coordinateOperationID element with the IdentifierType. If appropriate, the "codeSpace" element should have the string value "EPSG", and the "code" element should then have the appropriate EPSG code value. The other elements in the IdentifierType can be omitted. The "coordinateOperationName" element shall have a string value that names a specific Transverse Mercator map projection. The "_PositionalAccuracy" and "metaDataProperty" elements can be omitted. 
		
		 
			 
				 
					 
					 
					 
					 
					 
					 
				
			
		
	
	
	
	 
		 
			 Reference to Transverse Mercator operation method. 
		
		 
			 
			 
		
	
	
	 
		 
			 Value of the Latitude of the natural origin parameter for a specific coordinate conversion. 
		
	
	
	 
		 
			 Value of the Longitude of the natural origin (or central meridian) parameter for a specific coordinate conversion. 
		
	
	
	 
		 
			 Value of the scale factor at the natural origin (on the central meridian) parameter for a specific coordinate conversion. 
		
	
	
	 
		 
			 Value of the false Easting coordinate of the origin parameter for a specific coordinate conversion. 
		
	
	
	 
		 
			 Value of the false Northing coordinate of the origin parameter for a specific coordinate conversion. 
		
	
	
	
	 
		 
			 Angle measure operation parameter value. 
		
		 
			 
				 
					 
						 
						 
					
					 
				
			
		
	
	
	 
		 
			 Scale measure operation parameter value. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	 
		 
			 Length measure operation parameter value. 
		
		 
			 
				 
					 
					 
				
			
		
	
	
	
	 
		 
			 Angle value of an operation parameter, recorded as a single number, with a unit of measure suitable for an angle, such as degrees or radians. 
		
	
	
	 
		 
			 Scale factor value of an operation parameter, with a unit of measure suitable for a scale factor, such as percent, permil, or parts-per-million. 
		
	
	
	 
		 
			 Length value of an operation parameter, with a unit of measure suitable for a length, such as metres or feet. 
		
	
	




05-011 Common CRSs Folder/transverse mercator application/transverseMercatorSpecific#2.xml
 
	
	
	
	 Transverse Mercator
	 
		 United Kingdom (UK) - Great Britain - England Scotland Wales - onshore; Isle of Man. 
	
	 
	 
		 49
		 
	
	 
		 -2
		 
	
	 
		 0.999601272
		 
	
	 
		 400000
		 
	
	 
		 -100000
		 
	




05-011 Common CRSs Folder/transverseMercatorGeneral#2.xml
 
	
	
	
	 Transverse Mercator
	 
		 19916
		 6.0
	
	 
	 
		 49
		 
	
	 
		 -2
		 
	
	 
		 0.999601272
		 
	
	 
		 400000
		 
	
	 
		 -100000
		 
	




05-011 Common CRSs Folder/transverseMercatorMethod#1.xml
 
	
	 Transverse Mercator
	 
		 9807
		 6.0
	
	 See Section 1.4.6 "Transverse Mercator" of EPSG Guidance Note 7, December 2000. 
	 2
	 2
	 
		 
			 Latitude of natural origin
			 
				 8801
			
		
	
	 
		 
			 Longitude of natural origin
			 
				 8802
			
		
	
	 
		 
			 Scale factor at natural origin
			 
				 8805
			
		
	
	 
		 
			 False Easting
			 
				 8806
			
		
	
	 
		 
			 False Northing
			 
				 8807
			
		
	




05-011 Common CRSs Folder/unitsDictionaryv1.xml
 
	
	 Example GML Dictinary of unit definitions.
	 Units Dictionary
	 
		 
			 degree
			 9102
			 degree
			 angle
			 
				 1.74532925199433E-02
			
		
	
	 
		 
			 radian
			 radian
			 angle
			 
		
	
	 
		 
			 metre
			 9001
			 metre
			 length
			 
		
	
	 
		 
			 unity
			 8805
			 unity
			 scale factor
			 
		
	



